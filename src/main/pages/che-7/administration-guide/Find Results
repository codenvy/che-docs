Searching 538 files for "/w"]" (regex)

0 matches

Searching 538 files for "[a-z]\"\]" (regex)

C:\Users\yanar_000\Documents\che-docs\src\main\_layouts\default.html:
   37      <script>
   38          $(function () {
   39:             $('[data-toggle="tooltip"]').tooltip()
   40          })
   41      </script>

C:\Users\yanar_000\Documents\che-docs\src\main\css\customstyles.css:
  768  }
  769  
  770: a[data-toggle="tooltip"] {
  771      color: #649345;
  772      font-style: italic;
  ...
 1240   */
 1241  /* 1 */
 1242: .ie9 img[src$=".svg"] {
 1243      width: 100%;
 1244  }
 1245  /* 2 */
 1246  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
 1247:     img[src$=".svg"] {
 1248          width: 100%;
 1249      }

C:\Users\yanar_000\Documents\che-docs\src\main\css\printstyles.css:
   25      color: blue !important;
   26  }
   27: a[href*="mailto"]::after, a[data-toggle="tooltip"]::after, a[href].noCrossRef::after {
   28      content: "";
   29  }

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-blue.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-che.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-green.css:
   40  }
   41  
   42: a[data-toggle="tooltip"] {
   43      color: #649345;
   44      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\fonts\fontawesome-webfont.woff2:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\js\customscripts.js:
   12      }
   13      // activate tooltips. although this is a bootstrap js function, it must be activated this way in your theme.
   14:     $('[data-toggle="tooltip"]').tooltip({
   15          placement : 'top'
   16      });
   ..
   27  $(function() {
   28      var json, tabsState;
   29:     $('a[data-toggle="pill"], a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
   30          var href, json, parentId, tabsState;
   31  

C:\Users\yanar_000\Documents\che-docs\src\main\js\jekyll-search.js:
    1: !function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module){module.exports=function(){function receivedResponse(xhr){return 200==xhr.status&&4==xhr.readyState}function handleResponse(xhr,callback){xhr.onreadystatechange=function(){if(receivedResponse(xhr))try{callback(null,JSON.parse(xhr.responseText))}catch(err){callback(err,null)}}}var self=this;self.load=function(location,callback){var xhr=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");xhr.open("GET",location,!0),handleResponse(xhr,callback),xhr.send()}}},{}],2:[function(require,module){function FuzzySearchStrategy(){function createFuzzyRegExpFromString(string){return new RegExp(string.split("").join(".*?"),"gi")}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),!!string.match(createFuzzyRegExpFromString(crit)))}}module.exports=new FuzzySearchStrategy},{}],3:[function(require,module){function LiteralSearchStrategy(){function doMatch(string,crit){return string.toLowerCase().indexOf(crit.toLowerCase())>=0}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),doMatch(string,crit))}}module.exports=new LiteralSearchStrategy},{}],4:[function(require,module){module.exports=function(){function findMatches(store,crit,strategy){for(var data=store.get(),i=0;i<data.length&&matches.length<limit;i++)findMatchesInObject(data[i],crit,strategy);return matches}function findMatchesInObject(obj,crit,strategy){for(var key in obj)if(strategy.matches(obj[key],crit)){matches.push(obj);break}}function getSearchStrategy(){return fuzzy?fuzzySearchStrategy:literalSearchStrategy}var self=this,matches=[],fuzzy=!1,limit=10,fuzzySearchStrategy=require("./SearchStrategies/fuzzy"),literalSearchStrategy=require("./SearchStrategies/literal");self.setFuzzy=function(_fuzzy){fuzzy=!!_fuzzy},self.setLimit=function(_limit){limit=parseInt(_limit,10)||limit},self.search=function(data,crit){return crit?(matches.length=0,findMatches(data,crit,getSearchStrategy())):[]}}},{"./SearchStrategies/fuzzy":2,"./SearchStrategies/literal":3}],5:[function(require,module){module.exports=function(_store){function isObject(obj){return!!obj&&"[object Object]"==Object.prototype.toString.call(obj)}function isArray(obj){return!!obj&&"[object Array]"==Object.prototype.toString.call(obj)}function addObject(data){return store.push(data),data}function addArray(data){for(var added=[],i=0;i<data.length;i++)isObject(data[i])&&added.push(addObject(data[i]));return added}var self=this,store=[];isArray(_store)&&addArray(_store),self.clear=function(){return store.length=0,store},self.get=function(){return store},self.put=function(data){return isObject(data)?addObject(data):isArray(data)?addArray(data):void 0}}},{}],6:[function(require,module){module.exports=function(){var self=this,templatePattern=/\{(.*?)\}/g;self.setTemplatePattern=function(newTemplatePattern){templatePattern=newTemplatePattern},self.render=function(t,data){return t.replace(templatePattern,function(match,prop){return data[prop]||match})}}},{}],7:[function(require){!function(window){"use strict";function SimpleJekyllSearch(){function initWithJSON(){store.put(opt.dataSource),registerInput()}function initWithURL(url){jsonLoader.load(url,function(err,json){err?throwError("failed to get JSON ("+url+")"):(store.put(json),registerInput())})}function throwError(message){throw new Error("SimpleJekyllSearch --- "+message)}function validateOptions(_opt){for(var i=0;i<requiredOptions.length;i++){var req=requiredOptions[i];_opt[req]||throwError("You must specify a "+req)}}function assignOptions(_opt){for(var option in opt)opt[option]=_opt[option]||opt[option]}function isJSON(json){try{return json instanceof Object&&JSON.parse(JSON.stringify(json))}catch(e){return!1}}function emptyResultsContainer(){opt.resultsContainer.innerHTML=""}function appendToResultsContainer(text){opt.resultsContainer.innerHTML+=text}function registerInput(){opt.searchInput.addEventListener("keyup",function(e){if (e.keyCode == 38 || e.keyCode == 40) return false;return 0==e.target.value.length?void emptyResultsContainer():void render(searcher.search(store,e.target.value))})}function render(results){if(emptyResultsContainer(),0==results.length)return appendToResultsContainer(opt.noResultsText);for(var i=0;i<results.length;i++)appendToResultsContainer(templater.render(opt.searchResultTemplate,results[i]))}var self=this,requiredOptions=["searchInput","resultsContainer","dataSource"],opt={searchInput:null,resultsContainer:null,dataSource:[],searchResultTemplate:'<li><a href="{url}" title="{desc}">{title}</a></li>',noResultsText:"No results found",limit:10,fuzzy:!1};self.init=function(_opt){validateOptions(_opt),assignOptions(_opt),isJSON(opt.dataSource)?initWithJSON(opt.dataSource):initWithURL(opt.dataSource)}}var Searcher=require("./Searcher"),Templater=require("./Templater"),Store=require("./Store"),JSONLoader=require("./JSONLoader"),searcher=new Searcher,templater=new Templater,store=new Store,jsonLoader=new JSONLoader;window.SimpleJekyllSearch=new SimpleJekyllSearch}(window,document)},{"./JSONLoader":1,"./Searcher":4,"./Store":5,"./Templater":6}]},{},[7]);
    2  
    3  var currentSelection = 0;

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authorizing-users.adoc:
   40  include::ref_monitorsystem-permission.adoc[leveloffset=+1]
   41  
   42: ifeval::["{project-context} == "che"]
   43  include::con_super-privileged-mode.adoc[leveloffset=+1]
   44  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_deploying-the-registries.adoc:
   14  Otherwise, these images can be pushed to a container registry (public, such as `quay.io`, or the DockerHub, or a private registry).
   15  
   16: ifeval::["{project-context}" == "che"]
   17  include::proc_deploying-registries-in-kubernetes.adoc[leveloffset=+1]
   18  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_monitoring-che.adoc:
   22  include::proc_collecting-che-metrics-with-prometheus.adoc[leveloffset=+1]
   23  
   24: ifeval::["{project-context}" == "che"]
   25  
   26  include::proc_viewing-che-metrics-on-grafana-dashboards.adoc[leveloffset=+1]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_authorization-and-user-management.adoc:
   13  To find your Keycloak URL:
   14  
   15: ifeval::["{project-context}" == "che"]
   16  If {prod-short} is running on Kubernetes:
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_kubernetes-image-puller-overview.adoc:
   10  The Kubernetes Image Puller pulls its configuration from a `ConfigMap` with the following available parameters:
   11  
   12: [id="kubernetes-image-puller-configuration"]
   13  .Kubernetes Image Puller parameters
   14: [options="header"]
   15  |===
   16  |Parameter |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_roles-in-an-organization.adoc:
    5  :context: roles-in-an-organization
    6  
    7: [id="roles-in-an-organization"]
    8  = Roles in an organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_super-privileged-mode.adoc:
   10  The *super-privileged* mode is disabled by default. To change to the *super-privileged* mode, set the `CHE_SYSTEM_SUPER__PRIVILEGED__MODE` variable to `true` in the `che.env` file. The following is a list of services that are enabled for users with the *manageSystems* permissions and with *super-privileged* mode on.
   11  
   12: [options="header"]
   13  |====
   14  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_authenticating-to-the-che-server-using-openid.adoc:
   69  To obtain the token, send a request to the token endpoint with the username and password credentials. This request can be schematically described as the following cURL request:
   70  
   71: [subs="+quotes"]
   72  ----
   73  $ curl --data "grant_type=password&client_id=__<client_name>__&username=__<username>__&password=__<password>__" \
   ..
   88  To do this, send a request to the token endpoint that can be schematically described as the following cURL request:
   89  
   90: [subs="+quotes"]
   91  ----
   92  $ curl -X POST -d "client_id=__<client_name>__" \
   ..
  104  
  105  `_<user_openshift_token>_` is the token retrieved by the end-user with the command:
  106: [subs="+quotes"]
  107  ----
  108  $ oc whoami --show-token

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-devfile-registry.adoc:
   19  +
   20  .File organization for a devfile
   21: [subs="+quotes"]
   22  ----
   23  ./che-devfile-registry/devfiles/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-plug-in-registry.adoc:
   19  +
   20  .File organization for a plugin
   21: [subs="+quotes"]
   22  ----
   23  ./che-plugin-registry/v3/plugins/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_collecting-che-metrics-with-prometheus.adoc:
   15  +
   16  .Prometheus configuration example
   17: [source,yaml,subs="+attributes"]
   18  ----
   19  include::examples/prometheus-config.yaml[]
   20  ----
   21  +
   22: ifeval::["{project-context}" == "che"]
   23  Latest version: link:https://+github.com/eclipse/che/blob/master/deploy/openshift/templates/monitoring/prometheus-config.yaml[example `prometheus-config.yaml` on GitHub].
   24  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-keycloak-tokens.adoc:
    6  You can change the following Keycloak token settings:
    7  
    8: image::keycloak/keycloak_realm.png[link="{imagesdir}/keycloak/keycloak_realm.png"]
    9  
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-smtp-and-email-notifications.adoc:
    5  :context: configuring-smtp-and-email-notifications
    6  
    7: [id="configuring-smtp-and-email-notifications"]
    8  = Configuring SMTP and email notifications
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-helm.adoc:
    8  * The `helm` binary
    9  
   10: ifeval::["{project-context}" == "che"]
   11  * An OpenShift or Kubernetes cluster to install to
   12  * The `oc` or the `kubectl` binary
   ..
   15  endif::[]
   16  
   17: ifeval::["{project-context}" != "che"]
   18  * An OpenShift cluster to install to
   19  * The `oc` binary
   ..
   23  
   24  .Parameters for installing with Helm
   25: [options="header"]
   26  |===
   27  |Value |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-openshift-templates.adoc:
   12  
   13  .Parameters for installing with OpenShift templates
   14: [options="header"]
   15  |===
   16  |Value |Usage |Default
   ..
   40  . Log into the OpenShift cluster and create a namespace to deploy the puller into:
   41  +
   42: [subs="+quotes"]
   43  ----
   44  $ oc login -u username -p password https://openshift-cluster-api:6443
   ..
   61  To set different values than the defaults, use:
   62  +
   63: [subs="+quotes"]
   64  ----
   65  $ oc process -p __<parameterName>__=__<value>__ -f deploy/openshift/__<template>__ | oc apply -f -

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-kubernetes.adoc:
   10  . To deploy the plug-in registry using the Helm chart, run the following command:
   11  +
   12: [subs="+quotes,+attributes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__     <1>
   ..
   28  . The devfile registry also has a Helm chart in the `deploy/kubernetes/che-devfile-registry/` directory of the GitHub repository. To deploy it, run the command:
   29  +
   30: [subs="+quotes,+attributes"]
   31  ----
   32  NAMESPACE=__<namespace-name>__     <1>
   ..
   46  . The Helm chart creates a pod, a service, and an Ingress. To get them, use `app=che-plugin-registry` (or `app=che-plugin-registry` for the devfile registry).
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ kubectl get -o custom-columns=TYPE:.kind,NAME:.metadata.name \
   ..
   58  . To verify that the new plug-in is correctly published to the plug-in registry, make a request to the registry path `/v3/plugins/index.json` (or `/devfiles/index.json` for the devfile registry).
   59  +
   60: [subs="+quotes,+attributes"]
   61  ----
   62  $ URL=$(kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
   ..
   90  . Verify that the {prod-short} server points to the URL of the registry. To do this, compare the value of the `pass:[CHE_WORKSPACE_PLUGIN__REGISTRY__URL]` parameter in the `che` ConfigMap (or `pass:[CHE_WORKSPACE_DEVFILE__REGISTRY__URL]` for the devfile registry):
   91  +
   92: [subs="+quotes,+attributes"]
   93  ----
   94  $ kubectl get \
   ..
  101  with the URL of the Ingress:
  102  +
  103: [subs="+quotes,+attributes"]
  104  ----
  105  $ kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
  ...
  110  . If they do not match, update the ConfigMap and restart the {prod-short} server.
  111  +
  112: [subs="+quotes,+attributes"]
  113  ----
  114  $ kubectl edit cm/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-openshift.adoc:
   10  . To deploy the plug-in registry using the OpenShift template, run the following command:
   11  +
   12: [subs="+quotes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__  <1>
   ..
   25  . The devfile registry has an OpenShift template in the `deploy/openshift/` directory of the GitHub repository. To deploy it, run the command:
   26  +
   27: [subs="+quotes"]
   28  ----
   29  NAMESPACE=__<namespace-name>__  <1>
   ..
   39  
   40  . Check if the registries are deployed successfully on OpenShift.
   41: ifeval::["{project-context}" == "crw"]
   42  For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[Deploying registries in Kubernetes] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   43  endif::[]
   44: ifeval::["{project-context}" == "che"]
   45  The steps to check are similar to the Kubernetes steps. For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   46  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_developing-grafana-dashboards.adoc:
   12  +
   13  .New Grafana dashboard: Queries to
   14: image::monitoring/monitoring-che-new-grafana-dashboard-queries.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-queries.png"]
   15  
   16  . In the *Visualisation* section, choose a metric to be shown in the following visual in the form of a graph, gauge, heatmap, or others.
   17  +
   18  .New Grafana dashboard: Visualization
   19: image::monitoring/monitoring-che-new-grafana-dashboard-visualization.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-visualization.png"]
   20  
   21  . Save changes to the dashboard by clicking the btn:[Save] button, and copy and paste the JSON code to the deployment.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-authentication-with-social-accounts-and-brokering.adoc:
   18  . Set store tokens and stored tokens readable to *ON*.
   19  +
   20: image::git/kc_provider.png[link="{imagesdir}/git/kc_provider.png"]
   21  
   22  . Add a default read-token role.
   23  +
   24: image::git/kc_roles.png[link="{imagesdir}/git/kc_roles.png"]
   25  
   26  This is the default `delegated` OAuth service mode for multi-user {prod-short}. You can configure the OAuth service mode with the property `che.oauth.service_mode`.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-che-metrics-collections.adoc:
   12  For Jaeger tracing to work, enable the following environment variables in your {prod-short} deployment:
   13  
   14: [source,bash,subs="+quotes,+attributes"]
   15  ----
   16  # Activating {prod-short} tracing modules

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_installing-the-jaeger-tracing-tool-for-che-on-openshift-4.adoc:
   15  . In the {prod-short} installation namespace of the {ocp} cluster,  use the `oc` client to create a new application for the Jaeger deployment.
   16  +
   17: [subs="+quotes,attributes"]
   18  ----
   19  $ oc new-app -f / ${CHE_LOCAL_GIT_REPO}/deploy/openshift/templates/jaeger-all-in-one-template.yml:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-server-logs-on-the-cli.adoc:
   15  +
   16  .Example
   17: [subs="+attributes"]
   18  ----
   19  $ oc get pods
   ..
   24  . To get the logs for a deployment, run the following command:
   25  +
   26: [subs="+quotes"]
   27  ----
   28  $ oc logs _<name-of-pod>_
   ..
   30  +
   31  .Example
   32: [subs="+attributes"]
   33  ----
   34  $ oc logs {prod-deployment}-11-j4w2b

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-theia-ide-logs-on-the-cli.adoc:
    6  .Prerequisites
    7  
    8: ifeval::["{project-context}" == "che"]
    9  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{site-baseurl}che-7/installing-che-on-openshift-4-from-operatorhub/#viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools_installing-che-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   10  endif::[]
   11: ifeval::["{project-context}" == "crw"]
   12  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{prod-ig-url}installing-{prod-id-short}-on-ocp-4_crw#viewing-the-state-of-the-{prod-id-short}-cluster-deployment-using-openshift-4-cli-tools_installing-{prod-id-short}-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   13  endif::[]
   ..
   49  . Get logs from the `theia/ide` container:
   50  +
   51: [subs="+quotes"]
   52  ----
   53  $ oc logs --follow _<name-of-pod>_ --container _<name-of-container>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-traces-in-jaeger-ui.adoc:
   13  +
   14  .Using Jaeger UI to trace {prod-short}
   15: image::tracing/trace-search.png[link="{imagesdir}/tracing/trace-search.png"]
   16  
   17  . Select the trace to expand it and show the tree of nested spans, as well as additional information about the highlighted span, such as tags or durations.
   18  +
   19  .Expanded tracing tree
   20: image::tracing/trace-tree-expanded.png[link="{imagesdir}/tracing/trace-tree-expanded.png"]
   21  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-kubernetes-events.adoc:
   29  ////
   30  +
   31: image::logs/kubernetes-events.png[link="{imagesdir}/logs/kubernetes-events.png"]
   32  ////
   33  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-logs-for-php-debug.adoc:
    1: [id="viewing-logs-for-php-debug"]
    2  = Viewing logs for PHP-Debug
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_configuring-system-variables.adoc:
   10  
   11  
   12: [id="configuring-system-variables"]
   13  = Configuring system properties for {prod-short}
   14  
   ..
   20  .Example of changing the default value of `+++CHE_WORKSPACE_DEFAULT__MEMORY__LIMIT__MB+++` to 2048:
   21  
   22: [source,yaml,subs="+attributes"]
   23  ----
   24  include::examples/changing-system-variables.yaml[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_grafana-dashboards-for-che.adoc:
   10  
   11  .The *Workspaces* panel
   12: image::monitoring/monitoring-che-che-server-dashboard-workspace-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-panel.png"]
   13  
   14  * *Workspace start rate* -- the ratio between successful and failed started workspaces
   ..
   24  
   25  .The *Users* panel
   26: image::monitoring/monitoring-che-che-server-dashboard-users-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-users-panel.png"]
   27  
   28  * *Number of Users* -- the number of users known to {prod-short} over time
   ..
   30  
   31  .The *Tomcat* panel
   32: image::monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png"]
   33  
   34  * *Max number of active sessions* -- the max number of active sessions that have been active at the same time
   ..
   40  
   41  .The *Request* panel
   42: image::monitoring/monitoring-che-che-server-dashboard-requests-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-requests-panel.png"]
   43  
   44  The *Requests* panel displays HTTP requests in a graph that shows the average number of requests per minute.
   45  
   46  .The *Executors* panel, part 1
   47: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png"]
   48  
   49  * *Threads running* - the number of threads that are not terminated aka alive. May include threads that are in a waiting or blocked state. 
   ..
   53  
   54  .The *Executors* panel, part 2
   55: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png"]
   56  
   57  * *Executor threads active* - number of threads that actively execute tasks.
   ..
   61  
   62  .The *Executors* panel, part 3
   63: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png"]
   64  
   65  * *Rejected task* - the number of tasks that were rejected from execution.
   ..
   69  
   70  .The *Executors* panel, part 4
   71: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png"]
   72  
   73  * *Task execution seconds max* - 5min moving maximum of task execution
   ..
   77  
   78  .The *Traces* panel, part 1
   79: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png"]
   80  
   81  * *Workspace start Max* - maximum workspace start time
   ..
   85  
   86  .The *Traces* panel, part 2
   87: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png"]
   88  
   89  * *OpenShiftInternalRuntime#start Max* - maximum time of OpenShiftInternalRuntime#start operation
   ..
   93  
   94  .The *Traces* panel, part 3
   95: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png"]
   96  
   97  * *OpenShiftEnvironmentProvisioner#provision Max* - maximum time of OpenShiftEnvironmentProvisioner#provision operation
   ..
  101  
  102  .The *Traces* panel, part 4
  103: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png"]
  104  
  105  * *WaitMachinesStart Max* - maximim time of WaitMachinesStart operations
  ...
  109  
  110  .The *Workspace detailed* panel
  111: image::monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png"]
  112  
  113  The *Workspace Detailed* panel contains heat maps, which illustrate the average time of workspace starts or fails. The row shows some period of time.
  ...
  119  
  120  .{prod-short} server JVM dashboard
  121: image::monitoring/monitoring-che-che-server-jvm-dashboard.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard.png"]
  122  
  123  .Quick Facts
  124: image::monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png"]
  125  
  126  .JVM Memory
  127: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png"]
  128  
  129  .JVM Misc
  130: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png"]
  131  
  132  .JVM Memory Pools (heap)
  133: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png"]
  134  
  135  .JVM Memory Pools (Non-Heap)
  136: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png"]
  137  
  138  .Garbage Collection
  139: image::monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png"]
  140  
  141  .Classloading
  142: image::monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png"]
  143  
  144  .Buffer Pools
  145: image::monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png"]
  146  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_managesystem-permission.adoc:
    8  Users with the *manageSystem* permission have access to the following services:
    9  
   10: [options="header"]
   11  |====
   12  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_monitorsystem-permission.adoc:
    9  Users with the *monitorSystem* permission have access to the following services.
   10  
   11: [options="header"]
   12  |====
   13  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\examples\che-devfile-meta.yml:
    1  displayName: Rust
    2  description: Rust Stack with Rust 1.39
    3: tags: ["Rust"]
    4  icon: https://www.eclipse.org/che/images/logo-eclipseche.svg
    5  globalMemoryLimit: 1686Mi

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_branding-che-theia.adoc:
   12  :parent-context-of-branding-che-theia: {context}
   13  
   14: [id="branding-che-theia"]
   15  = Branding Che-Theia
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_che-extensibility-reference.adoc:
   12  :parent-context-of-che-extensibility-reference: {context}
   13  
   14: [id="{prod-id-short}-extensibility-reference"]
   15  = {prod-short} extensibility reference
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_developing-che-theia-plug-ins.adoc:
   12  :parent-context-of-developing-che-theia-plug-ins: {context}
   13  
   14: [id="developing-che-theia-plug-ins"]
   15  = Developing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_publishing-che-theia-plug-ins.adoc:
   12  :parent-context-of-publishing-che-theia-plug-ins: {context}
   13  
   14: [id="publishing-che-theia-plug-ins"]
   15  = Publishing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_testing-che-theia-plug-ins.adoc:
   12  :parent-context-of-testing-che-theia-plug-ins: {context}
   13  
   14: [id="testing-che-theia-plug-ins"]
   15  = Testing Che-Theia plug-ins
   16  
   ..
   42  When you run a hosted instance, the main Che-Theia instance opens the *Output* view. This view contains all the output from the `yarn` backend process. It also contains the output of the backend plug-in that is being developed.
   43  
   44: image::extensibility/hosted-instance-output.png[link="{imagesdir}/extensibility/hosted-instance-output.png"]
   45  
   46  == Controlling a hosted Che-Theia instance
   ..
   59  Your plug-in will handle the opening of a document and displaying a notification message when the document is opened.
   60  
   61: image:extensibility/code-completion-example.gif[link="{imagesdir}/extensibility/code-completion-example.gif"]
   62  ====
   63  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-a-che-theia-plug-in-into-a-workspace.adoc:
   17  +
   18  .Adding plug-ins through the dashboard
   19: image::extensibility/adding-plug-ins-in-dashboard.png[link="{imagesdir}/extensibility/adding-plug-ins-in-dashboard.png"]
   20  
   21  
   ..
   30  +
   31  .Adding plug-ins by configuring a component
   32: image::extensibility/adding-plug-ins-in-workspace-devfile.png[link="{imagesdir}/extensibility/adding-plug-ins-in-workspace-devfile.png"]
   33  
   34  +

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-support-for-a-new-debugger.adoc:
    9  ---
   10  
   11: [id="adding-support-for-a-new-debugger"]
   12  = Adding support for a new debugger
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_bootstrapping-che-theia-plug-in-development-with-yeoman.adoc:
   77  Alternatively, run `yo` without any parameters and select the `@theia/plugin` generator from the list of available generators.
   78  +
   79: image::extensibility/yo-select-plug-in-generator.png[link="{imagesdir}/extensibility/yo-select-plug-in-generator.png"]
   80  
   81  . Enter the information to configure the plug-in. For example:
   82  +
   83: image::extensibility/launching-console-plug-in-generator.png[link="{imagesdir}/extensibility/launching-console-plug-in-generator.png"]
   84  
   85  When the plug-in is generated, it appears in the *Files* panel. The sample is already compiled and contains the plug-in binary. In this example, the plug-in binary is named `my_first_plugin.theia`.
   ..
   95  . Type `Yeom` to filter the commands. Select the `Yeoman Wizard` command.
   96  +
   97: image::extensibility/yeoman-wizard-launching.png[link="{imagesdir}/extensibility/yeoman-wizard-launching.png"]
   98  +
   99  Note that launching the wizard may take a few seconds.
  ...
  101  . Enter the new project name.
  102  +
  103: image::extensibility/yeoman-wizard-choosing-plug-in-name.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-name.png"]
  104  
  105  . Select the desired plug-in type (client-side or server-side).
  106  +
  107: image::extensibility/yeoman-wizard-choosing-plug-in-type.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-type.png"]
  108  
  109  . Select the plug-in sample to use.
  110  +
  111: image::extensibility/yeoman-wizard-choosing-plug-in-sample.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-sample.png"]
  112  
  113  When the plug-in is generated, the *Yeoman wizard* displays a notification.
  114  
  115: image::extensibility/yeoman-wizard-plug-in-generated.png[link="{imagesdir}/extensibility/yeoman-wizard-plug-in-generated.png"]
  116  
  117  The plug-in sample displays in the *Files* panel. Use the *Output* tab in the botton panel to access logs for plug-in generation.
  118  
  119: image::extensibility/yeoman-wizard-logs.png[link="{imagesdir}/extensibility/yeoman-wizard-logs.png"]
  120  
  121  NOTE: The *Yeoman wizard* only works when a workspace is opened in Che-Theia.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_che-usage-with-tls.adoc:
   10  
   11  +
   12: image::contributor/che-tls-chrome-import_1.png[link="{imagesdir}/contributor/che-tls-chrome-import_1.png"]
   13  
   14  . Select `Trust this certificate for identifying websites` and click OK.
   15  
   16  +
   17: image::contributor/che-tls-chrome-import_2.png[link="{imagesdir}/contributor/che-tls-chrome-import_2.png"]
   18  
   19  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   20  
   21  +
   22: image::contributor/che-tls-chrome-import_3.png[link="{imagesdir}/contributor/che-tls-chrome-import_3.png"]
   23  
   24  
   ..
   29  
   30  +
   31: image::contributor/che-tls-firefox-import_1.png[link="{imagesdir}/contributor/che-tls-firefox-import_1.png"]
   32  
   33  . Go to `Authorities` tab, click `Import` and find your generated `rootCA.crt` (or `ca.crt` for OpenShift 4) file.
   34  
   35  +
   36: image::contributor/che-tls-firefox-import_2.png[link="{imagesdir}/contributor/che-tls-firefox-import_2.png"]
   37  
   38  . Select `Trust this CA to identify websites` and click OK.
   39  
   40  +
   41: image::contributor/che-tls-firefox-import_3.png[link="{imagesdir}/contributor/che-tls-firefox-import_3.png"]
   42  
   43  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   44  
   45  +
   46: image::contributor/che-tls-firefox-import_4.png[link="{imagesdir}/contributor/che-tls-firefox-import_4.png"]
   47  
   48  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_defining-custom-branding-values-for-che-theia.adoc:
    8  Create a `product.json` file with a new name of the product, logo, description, and list of hyperlinks on the *Welcome* page (an example of link:https://github.com/che-samples/che-theia-branding-example/blob/master/branding/product.json[`product.json`]:
    9  
   10: [source,json,attrs="nowrap"]
   11  ----
   12  {
   ..
   19      "welcome": {                             <4>
   20          "title": "Welcome to Your Workspace",
   21:         "links": ["website", "documentation"]
   22      },
   23      "links": {                               <5>
   ..
   43  To use only one logo image for both dark and light themes:
   44  
   45: [source,json,attrs="nowrap"]
   46  ----
   47  {

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-kubernetes.adoc:
   18  
   19  +
   20: [subs="+quotes"]
   21  ----
   22  $ kubectl create namespace che
   ..
   27  
   28  +
   29: [subs="+quotes"]
   30  ----
   31  $ kubectl create secret tls che-tls --key=domain.key --cert=domain.crt -n che
   ..
   36  
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ cp rootCA.crt ca.crt
   ..
   46  
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ {prod-cli} server:start --platform=minikube --installer=helm --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift-using-operator.adoc:
   17  
   18  +
   19: [subs="+quotes"]
   20  ----
   21  $ oc login -u system:admin --insecure-skip-tls-verify=true
   ..
   27  
   28  +
   29: [subs="+quotes,+attributes"]
   30  ----
   31  $ oc delete secret router-certs
   ..
   38  
   39  +
   40: [subs="+quotes,+attributes"]
   41  ----
   42  $ oc create namespace che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ cp rootCA.crt ca.crt
   ..
   57  
   58  +
   59: [subs="+quotes,+attributes"]
   60  ----
   61  $ {prod-cli} server:start --platform=minishift --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift4-using-operator.adoc:
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  $ oc login -u kubeadmin -p <password>
   ..
   20  
   21  +
   22: [subs="+quotes"]
   23  ----
   24  $ oc get secret router-ca -n openshift-ingress-operator -o jsonpath="{.data.tls\.crt}" | base64 -d > ca.crt
   ..
   29  
   30  +
   31: [subs="+quotes"]
   32  ----
   33  $ oc create namespace che
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ oc create secret generic self-signed-certificate --from-file=ca.crt -n=che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ {prod-cli} server:start --platform=crc --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_developing-che-theia-plug-ins-using-che.adoc:
   13  +
   14  .Adding a workspace
   15: image::extensibility/adding-workspace.png[link="{imagesdir}/extensibility/adding-workspace.png"]
   16  
   17  . Select the *{prod-short} {prod-ver} Dev* stack, and click the btn:[CREATE & OPEN] button.
   18  +
   19  .Choosing the '{prod-short} {prod-ver} Dev' stack
   20: image::extensibility/choosing-che-7-dev-stack.png[link="{imagesdir}/extensibility/choosing-che-7-dev-stack.png"]
   21  
   22  . *Generate a plug-in scaffold.* The workspace created from this stack provides an easy way to scaffold a new plug-in. When the workspace is started and fully ready, execute the *Yeoman Wizard* from the command palette:
   ..
   25  +
   26  .Launching the Yeoman Wizard
   27: image::extensibility/launching-yeoman-wizard.png[link="{imagesdir}/extensibility/launching-yeoman-wizard.png"]
   28  +
   29  .. Fill in the following fields about the plug-in that you want to create: 
   ..
   36  +
   37  .Yeoman successfully generated a new plug-in
   38: image::extensibility/yeoman-successful.png[link="{imagesdir}/extensibility/yeoman-successful.png"]
   39  
   40  . Open the *Files* panel, to see the sources of the generated plug-in in the `src` directory.
   ..
   45  +
   46  .Opening a new terminal in the development container
   47: image::extensibility/open-terminal-in-container.png[link="{imagesdir}/extensibility/open-terminal-in-container.png"]
   48  +
   49  .. In the terminal, go to the plug-in directory, and run the `yarn` command:
   ..
   55  +
   56  .Building a Che-Theia plug-in using `yarn`
   57: image::extensibility/building-plug-in-using-yarn.png[link="{imagesdir}/extensibility/building-plug-in-using-yarn.png"]
   58  +
   59  NOTE: The plug-in generator automatically builds the plug-in after its generation.
   ..
   67  +
   68  .Running a Che-Theia plug-in in Hosted mode
   69: image::extensibility/running-plug-in-hosted-mode.gif[link="{imagesdir}/extensibility/running-plug-in-hosted-mode.gif"]
   70  
   71  . *Debug the plug-in.*
   ..
   78  +
   79  .Debugging a Che-Theia plug-in
   80: image::extensibility/debugging-plug-ins.gif[link="{imagesdir}/extensibility/debugging-plug-ins.gif"]
   81  +
   82  NOTE: When developing a frontend plug-in, debug it using your browser’s Developer Tools option.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_generating-self-signed-certificates.adoc:
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  # default for minishift
   ..
   26  
   27  +
   28: [subs="+quotes"]
   29  ----
   30  # Fedora 31
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ CA_CN=eclipse-che-signer
   ..
   46  
   47  +
   48: [subs="+quotes"]
   49  ----
   50  # Example with minikube on Fedora 31
   ..
   62  
   63  +
   64: [subs="+quotes"]
   65  ----
   66  $ openssl genrsa -out rootCA.key 4096
   ..
   71  
   72  +
   73: [subs="+quotes"]
   74  ----
   75  $ openssl req -x509 \
   ..
   91  
   92  +
   93: [subs="+quotes"]
   94  ----
   95  $ openssl genrsa -out domain.key 2048
   ..
   99  
  100  +
  101: [subs="+quotes"]
  102  ----
  103  $ openssl req -new -sha256 \
  ...
  114  
  115  +
  116: [subs="+quotes"]
  117  ----
  118  $ openssl x509 \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_sharing-your-che-theia-plug-in-with-a-factory.adoc:
   28  . Add the plug-in to the `workspace.attributes.plugins` field.
   29  +
   30: image::extensibility/sharing-plug-in-with-factory.png[link="{imagesdir}/extensibility/sharing-plug-in-with-factory.png"]
   31  
   32  . Share the factory link.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_testing-che-theia-with-custom-branding.adoc:
   18  . Create a workspace using the sample https://github.com/che-samples/che-theia-branding-example/blob/master/devfile.yaml[che-theia-branding-example devfile] to apply the changes:
   19  +
   20: image::https://che.openshift.io/factory/resources/factory-contribute.svg[link="https://che.openshift.io/f?url=https://raw.githubusercontent.com/che-samples/che-theia-branding-example/master/devfile.yaml"]
   21  +
   22: [source,yaml,attrs="nowrap"]
   23  ----
   24  metadata:
   ..
   41  * The dark theme of Che-Theia:
   42  +
   43: image::branding/welcome-dark.png[link="{imagesdir}/branding/welcome-dark.png"]
   44  +
   45: image::branding/about-dark.png[link="{imagesdir}/branding/about-dark.png"]
   46  
   47  * The light theme of Che-Theia:
   48  +
   49: image::branding/welcome-light.png[link="{imagesdir}/branding/welcome-light.png"]
   50  +
   51: image::branding/about-light.png[link="{imagesdir}/branding/about-light.png"]
   52  
   53  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\ref_che-theia-plug-in-api.adoc:
   15  The Che-Theia plug-in API consists of two namespaces:
   16  
   17: [options="header"]
   18  |===
   19  | Namespace | Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-ide-basics.adoc:
   12  :parent-context-of-che-theia-ide-basics: {context}
   13  
   14: [id="che-theia-ide-basics"]
   15  = Che-Theia IDE basics
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-troubleshooting.adoc:
   11  :parent-context-of-che-theia-troubleshooting: {context}
   12  
   13: [id="che-theia-troubleshooting"]
   14  = Che-Theia Troubleshooting
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-github-oauth.adoc:
   27  image::git/github_oauth.png[]
   28  
   29: ifeval::["{project-context}" == "che"]
   30  . On OpenShift or Kubernetes, update the deployment configuration (see link:{site-baseurl}che-7/openshift-config.html[OpenShift configuration]).
   31  +
   ..
   43  * Substitute `_<your-github-client-id>_` and `_<your-github-secret>_` with your GitHub client ID and secret.
   44  
   45: ifeval::["{project-context}" == "che"]
   46  * This configuration only applies to single-user deployments of {prod-short}.
   47  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-oauth-authorization.adoc:
   12  :parent-context-of-configuring-oauth-authorization: {context}
   13  
   14: [id="configuring-oauth-authorization"]
   15  = Configuring OAuth authorization
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-openshift-oauth.adoc:
   18  . Register {prod-short} OAuth client in OpenShift (see link:https://docs.openshift.com/container-platform/4.3/authentication/configuring-internal-oauth.html#oauth-register-additional-client_configuring-internal-oauth[Register an OAuth client in OpenShift]).
   19  +
   20: [subs="+quotes,+attributes"]
   21  ----
   22  $ oc create -f <(echo '

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_converting-a-che-6-workspace-to-a-che-7-devfile.adoc:
   15  :parent-context-of-converting-a-che-6-workspace-to-a-che-7-devfile: {context}
   16  
   17: [id="converting-a-{prod-id-short}-{prod-prev-ver}-workspace-to-a-{prod-id-short}-{prod-ver}-devfile"]
   18  = Converting a {prod-short} {prod-prev-ver} workspace to a {prod-short} {prod-ver} devfile
   19  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_creating-and-configuring-a-new-che-7-workspace.adoc:
   13  :parent-context-of-creating-and-configuring-a-new-che-7-workspace: {context}
   14  
   15: [id="creating-and-configuring-a-new-{prod-id-short}-{prod-ver}-workspace"]
   16  = Creating and configuring a new {prod-short} {prod-ver} workspace
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_customizing-developer-environments.adoc:
   12  :parent-context-of-customizing-developer-environments: {context}
   13  
   14: [id="customizing-developer-environments"]
   15  = Customizing developer environments
   16  
   ..
   28  
   29  .{prod-short} extensibility
   30: image::extensibility/extending-che.png[link="{imagesdir}/extensibility/extending-che.png"]
   31  
   32  Extending {prod} can be done entirely using {prod}. Since version 7, {prod} provides a self-hosting mode.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_defining-custom-commands-for-che-theia.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="defining-custom-commands-for-che-theia"]
   17  = Defining custom commands for Che-Theia
   18  
   ..
   46                  "options": {"cwd": "/projects/theia"},
   47                  "command": "yarn",
   48:                 "args": ["watch"]
   49                }
   50               ]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_importing-a-kubernetes-application-into-a-workspace.adoc:
   12  :parent-context-of-importing-a-kubernetes-application-into-a-workspace: {context}
   13  
   14: [id="importing-a-kubernetes-application-into-a-workspace"]
   15  = Importing a Kubernetes application into a workspace
   16  
   ..
   27  To run the application on a Kubernetes cluster:
   28  
   29: [subs="+attributes"]
   30  ----
   31  $ node=https://raw.githubusercontent.com/redhat-developer/devfile/master/samples/web-nodejs-with-db-sample/nodejs-app.yaml && \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_navigating-che-using-the-dashboard.adoc:
   18  The *Dashboard* is accessible on your cluster from a URL like `http://__<che-instance>__.__<IP-address>__.nip.io/dashboard/`.
   19  This section describes how to access this URL on
   20: ifeval::["{project-context}" == "che"]
   21  Minishift and
   22  endif::[]
   23  OpenShift.
   24  
   25: ifeval::["{project-context}" == "che"]
   26  include::proc_navigating-che-using-the-dashboard-on-minishift.adoc[leveloffset=+1]
   27  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_version-control.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="version-control"]
   17  = Version Control
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_what-is-a-che-theia-plug-in.adoc:
   12  :parent-context-of-what-is-a-che-theia-plug-in: {context}
   13  
   14: [id="what-is-a-che-theia-plug-in"]
   15  = What is a Che-Theia plug-in
   16  
   ..
   31  == Features and benefits of Che-Theia plug-ins
   32  
   33: [options="header"]
   34  |===
   35  | *Features*            | *Description* | *Benefits*

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_che-theia-plug-in-lifecycle.adoc:
   14  
   15  .Che-Theia plug-in lifecycle
   16: image::extensibility/che-theia-plug-in-lifecycle.png[link="{imagesdir}/extensibility/che-theia-plug-in-lifecycle.png"]
   17  
   18  Before a {prod-short} workspace is launched, {prod-short} master starts containers for the workspace:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_factory-json-reference.adoc:
   36  The `factory.policies`, `factory.ide`, and `factory.creator` objects are unique to factories. They provide meta information to the automation engine that alter the presentation of the factory URL or the behavior of the provisioning.
   37  
   38: [id="mixins"]
   39  == Mixins
   40  
   ..
   52  * Learn more about other link:TODO: link to project API docs[mixins]
   53  
   54: [id="pull-request-mixin-attributes"]
   55  == Pull Request mixin attributes
   56  
   ..
   89  ----
   90  
   91: [id="policies"]
   92  == Policies
   93  
   ..
  108  <4> Create one workpace per click, user, or account.
  109  
  110: [id="factories_json_reference-limitations"]
  111  == Limitations
  112  
  113  You can use `since : EPOCHTIME`, `until : EPOCHTIME`, and `referer` as a way to prevent the factory from executing under certain conditions. `since` and `until` represent a valid time window that allows the factory to activate. The `referrer` checks the hostname of the acceptor and only allows the factory to execute if there is a match.
  114  
  115: [id="factories_json_reference-multiplicity"]
  116  == Multiplicity
  117  
  118  Using `create : perClick` causes every click of the factory URL to generate a new workspace, each with its own identifier, name, and resources. Using `create : perUser` causes only one workspace to be generated for each unique user that clicks on the factory URL. If the workspace has previously been generated, the existing workspace is reopened.
  119  
  120: [id="factories_json_reference-ide-customization"]
  121  == Customizing the IDE
  122  
  ...
  220  |===
  221  
  222: [id="action-open-file"]
  223  == Action: Open File
  224  
  ...
  236  ----
  237  
  238: [id="action-find-and-replace"]
  239  == Action: Find and Replace
  240  
  ...
  276  Use https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions.html[regular expressions] in `sed`, both in find-replace and file-file type patterns.
  277  
  278: [id="creator"]
  279  == Creator
  280  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_workspaces-overview.adoc:
   13  :page-liquid:
   14  
   15: [id="workspaces-overview"]
   16  = Workspaces overview
   17  
   ..
   28  
   29  IMPORTANT: By default, it is possible to run only one workspace at a time. 
   30: ifeval::["{project-context}" == "che"]
   31  To change the default value, see link:{site-baseurl}che-7/advanced-configuration-options/#limits-for-the-workspaces-of-an-user[Limits for the workspaces of a user].
   32  endif::[]
   33: ifeval::["{project-context}" == "crw"]
   34  To change the default value, see link:{prod-ig-url}[the {prod-ig}].
   35  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-projects-to-your-workspace.adoc:
   18  . Fill in the required details for the project type that you selected, and click the btn:[Add] button.
   19  +
   20: image::workspaces/projects-add-project.png[link="{imagesdir}/workspaces/projects-add-project.png"]
   21  
   22  . To add another project to the workspace, click the btn:[Add Project] button.
   ..
   24  . After configuring the project for the workspace, check the change in the devfile, which is the configuration file of the workspace, by opening the *Devfile* tab.
   25  +
   26: image::workspaces/devfile-tab-to-view.png[link="{imagesdir}/workspaces/devfile-tab-to-view.png"]
   27  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-che-plugins-panel.adoc:
   16  . In the search bar, click the *Menu* button and then click *Change Registry* to choose the registry from the list. If the required registry is not in the list, add it using the *Add Registry* menu option. The registry link should point to the `plugins` segment of the registry. For example: `https://my-registry.com/v3/plugins/index.json`.
   17  +
   18: image::extensibility/vs-code-extension-change-registry.png[link="{imagesdir}/extensibility/vs-code-extension-change-registry.png"]
   19  
   20  . Search for the required plug-in using the filter, and then click the btn:[Install] button.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-workspace-configuration.adoc:
   18  . Locate the *components* section, and add a new entry with the following structure:
   19  +
   20: [source,yaml,subs="+quotes"]
   21  ----
   22   - type: chePlugin
   ..
   29  Alternatively, you can link to a `meta.yaml` file hosted on GitHub, via the reference field.
   30  +
   31: [source,yaml,subs="+quotes"]
   32  ----
   33   - type: chePlugin

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_changing-the-configuration-of-an-existing-workspace-from-the-user-dashboard.adoc:
   59  ====
   60  
   61: [id="configure-devfile"]
   62  [start=5]
   63  . From the *Devfile* tab, edit the workspace's YAML configuration. See link:{site-baseurl}che-7/making-a-workspace-portable-using-a-devfile/#devfile-reference_making-a-workspace-portable-using-a-devfile[Devfile reference].

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-the-workspace-and-adding-tooling.adoc:
   10  
   11  .{prod-short} {prod-ver} plug-ins that have replaced {prod-short} {prod-prev-ver} installers
   12: [options="header"]
   13  |===
   14  | {prod-short} {prod-prev-ver} installer | {prod-short} {prod-ver} plug-in
   ..
  114  .. Click the *Containers* tab (*Workspace* -> *Details* -> *Containers*).
  115  +
  116: image::workspaces/edit-the-container.png[link="{imagesdir}/workspaces/edit-the-container.png"]
  117  
  118  .. Copy the {prod-short} {prod-prev-ver} recipe, and paste it into the separate {prod-short} {prod-ver} component as a *referenceContent*.
  119  +
  120: image::workspaces/component_as_a_referenceContent.png[link="{imagesdir}/workspaces/component_as_a_referenceContent.png"]
  121  
  122  .. Set the type from the original {prod-short} {prod-prev-ver} configuration. The following is an example of the resulting file:
  ...
  147  +
  148  .Сhe 6 and Сhe 7 equivalence table
  149: [options="header"]
  150  |===
  151  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  191  
  192  .Сhe 6 and Сhe 7 equivalence table
  193: [options="header"]
  194  |===
  195  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  233  . Save changes and start the new {prod-short} {prod-ver} workspace.
  234  +
  235: image::workspaces/save-and-start-the-new-che-workspace.png[link="{imagesdir}/workspaces/save-and-start-the-new-che-workspace.png"]
  236  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-workspace-exposure-strategies-using-the-helm-chart-and-the-operator.adoc:
   12  When deploying {prod-short} using the Helm chart, configure the workspace exposure strategy using the `global.serverStrategy` property. To do so, add the following option to the `helm install` or `helm upgrade` command:
   13  
   14: [subs="+quotes"]
   15  ----
   16  $ helm install --set global.serverStrategy=__<single-host>__
   ..
   19  or:
   20  
   21: [subs="+quotes"]
   22  ----
   23  $ helm upgrade --set global.serverStrategy=__<single-host>__
   ..
   36  * Create a new cluster by executing the `kubectl apply` command. For example:
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ kubectl apply -f _<my-cluster.yaml>_
   ..
   43  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
   44  +
   45: [subs="+quotes"]
   46  ----
   47  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/k8s/ingressStrategy", "value": "__single-host__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_converting-a-che-6-workspace-to-a-basic-che-7-devfile.adoc:
   68  .. By default, the example project is added to the workspace. To remove the default project, click the btn:[Remove] button:
   69  +
   70: image::workspaces/remove-default-project.png[link="{imagesdir}/workspaces/remove-default-project.png"]
   71  
   72  .. To import a custom project that was used in {prod-short} {prod-prev-ver} workspace, click the *Add or Import Project* and select *Git* or *GitHub* option:
   73  +
   74: image::workspaces/add-custom-project.png[link="{imagesdir}/workspaces/add-custom-project.png"]
   75  
   76  .. Various commands can be added to devfiles of imported projects, for example, `run`, `build`, and  `test`. The commands are then accessible from the IDE when a workspace is started. Custom commands and other devfile components can be added in the *Devfile* configuration.
   ..
   78  .. Click the btn:[Create & Proceed Editing] button.
   79  +
   80: image::workspaces/create-and-edit.png[link="{imagesdir}/workspaces/create-and-edit.png"]
   81  +
   82  Select the *Devfile* tab to update the configuration. Machine servers in {prod-short} {prod-prev-ver} workspaces can be specified as components endpoints in a Devfile and {prod-short} {prod-prev-ver} installers as components of type chePlugin. See the link:https://redhat-developer.github.io/devfile/devfile[Devfile specification] for the detailed information about the supported properties and attributes.
   83  +
   84: image::workspaces/update-devfile-configuration.png[link="{imagesdir}/workspaces/update-devfile-configuration.png"]
   85  .. Once the *Devfile* configuration is completed, click the btn:[Open] button to start a newly created {prod-short} {prod-ver} workspace.
   86  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-new-workspace-from-the-dashboard.adoc:
   17  . In the *SELECT STACK* list, select one of the default stacks.
   18  +
   19: image::workspaces/{project-context}-stack-list.png[link="{imagesdir}/workspaces/{project-context}-stack-list.png"]
   20  
   21  . Click the btn:[Create & Proceed Editing] button. The *Workspaces -> Configs* page is shown.
   22  +
   23: image::workspaces/workspaces-config-page.png[link="{imagesdir}/workspaces/workspaces-config-page.png"]
   24  
   25  . Change the workspace name and click the *Devfile* tab.
   26  +
   27: image::workspaces/workspace-devfile-tab.png[link="{imagesdir}/workspaces/workspace-devfile-tab.png"]
   28  
   29  . Delete all the *components* and *commands* in the devfile to get an empty devfile.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-by-importing-source-code-of-a-project.adoc:
   11  :page-liquid:
   12  
   13: [id="creating-a-workspace-by-importing-source-code-of-a-project"]
   14  = Creating a workspace by importing the source code of a project
   15  
   ..
   33  * xref:#importing-to-a-running-workspace-with-git-clone-in-a-terminal[Import to a running workspace using `git clone` in a terminal]
   34  
   35: [id="importing-from-the-dashboard-into-an-existing-workspace"]
   36  == Importing from the Dashboard into an existing workspace
   37  
   ..
   96  image::workspaces/configure-command.png[Configure tasks]
   97  
   98: [id="importing-to-a-running-workspace-using-the-git-clone-command"]
   99  == Importing to a running workspace using the *Git: Clone* command
  100  
  ...
  113  image::workspaces/git-clone-command-2.png[Configure git clone command]
  114  
  115: [id="importing-to-a-running-workspace-with-git-clone-in-a-terminal"]
  116  == Importing to a running workspace with `git clone` in a terminal
  117  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-a-feature-branch-of-a-git-repository.adoc:
   16  Use following URL format to open an experimental link:https://github.com/quarkusio/quarkus-quickstarts[quarkus-quickstarts] branch hosted on link:https://che.openshift.io[che.openshift.io].
   17  
   18: [subs="+quotes"]
   19  ----
   20  https://che.openshift.io/f?url=https://github.com/maxandersen/quarkus-quickstarts/tree/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-the-default-branch-of-a-git-repository.adoc:
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://github.com/eclipse/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-with-a-publicly-accessible-standalone-devfile-using-http.adoc:
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-using-chectl-and-a-local-devfile.adoc:
   17  . Run a workspace from a devfile using the `workspace:start` parameter with the `{prod-cli}` tool as follows:
   18  
   19: [subs="+attributes,+quotes"]
   20  ----
   21  $ {prod-cli} workspace:start --devfile=devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_downloading-and-uploading-a-file-to-a-workspace-using-the-command-line-interface.adoc:
   17  * To download a local file named `downloadme.txt` from a workspace container to the current home directory of the user, use the following in the {prod-short} remote shell.
   18  +
   19: [subs="+quotes",options="+nowrap"]
   20  ----
   21  $ REMOTE_FILE_PATH=/projects/downloadme.txt
   ..
   28  * To upload a local file named `uploadme.txt` to a workspace container in the `/projects` directory:
   29  
   30: [subs="+quotes",options="+nowrap"]
   31  ----
   32  $ LOCAL_FILE_PATH=./uploadme.txt

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_generating-a-devfile-from-an-existing-kubernetes-application.adoc:
   18  . Use the `{prod-cli} devfile:generate` command to generate a devfile:
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ {prod-cli} devfile:generate
   ..
   27  The following example generates a devfile that includes the `NodeJS` component:
   28  +
   29: [subs="+attributes"]
   30  ----
   31  $ {prod-cli} devfile:generate --selector="app=nodejs"
   ..
   55  * To include support for a language, use the `--language` parameter:
   56  +
   57: [subs="+attributes"]
   58  ----
   59  $ {prod-cli} devfile:generate --selector="app=nodejs" --language="typescript"

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_including-a-kubernetes-application-in-a-workspace-devfile-definition.adoc:
   72  Use this devfile to create and start a workspace with the `{prod-cli}` command:
   73  
   74: [subs="+attributes,+quotes"]
   75  ----
   76  $ {prod-cli} worspace:start --devfile _<devfile-path>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_managing-git-configuration-identity.adoc:
   16  . Open *File > Settings > Open Preferences*:
   17  +
   18: image::git/git-config-identity.png[link="{imagesdir}/git/git-config-identity.png"]
   19  
   20  . In the opened window, navigate to the *Git* section, and find:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_overriding-devfile-values-using-factory-parameters.adoc:
   24  Consider the following initial devfile:
   25  
   26: [subs="+quotes"]
   27  ----
   28  ---
   ..
   36  To add or override `generateName` value, the following factory URL can be used:
   37  
   38: [subs="+quotes"]
   39  ----
   40  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.metadata.generateName=myprefix
   ..
   43  The resulting workspace will have the following devfile model:
   44  
   45: [subs="+quotes"]
   46  ----
   47  ---
   ..
   59  Consider the following initial devfile:
   60  
   61: [subs="+quotes"]
   62  ----
   63  ---
   ..
   75  To add or override source `branch` value, the following factory URL can be used:
   76  
   77: [subs="+quotes"]
   78  ----
   79  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.projects.web-java-spring-petclinic.source.branch=1.0.x
   ..
   82  The resulting workspace will have the following devfile model:
   83  
   84: [subs="+quotes"]
   85  ----
   86  apiVersion: 1.0.0
   ..
  102  Consider the following initial devfile:
  103  
  104: [subs="+quotes"]
  105  ----
  106  ---
  ...
  116  To add or override `persistVolumes` attribute value, the following factory URL can be used:
  117  
  118: [subs="+quotes"]
  119  ----
  120  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.persistVolumes=true
  ...
  124  The resulting workspace will have the following devfile model:
  125  
  126: [subs="+quotes"]
  127  ----
  128  ---
  ...
  141  possible to use dot-separated names:
  142  
  143: [subs="+quotes"]
  144  ----
  145  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.dot.name.format.attribute=true
  ...
  149  The resulting workspace will have the following devfile model:
  150  
  151: [subs="+quotes"]
  152  ----
  153  ---

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_remotely-accessing-workspaces-using-kubectl.adoc:
   13  * Verify the installation of `kubectl` using the `kubectl version` command:
   14  +
   15: [subs="+quotes",options="+nowrap"]
   16  ----
   17  $ kubectl version
   ..
   29  . To find the name of the Kubernetes namespace and pod that runs the {prod-short} workspace:
   30  +
   31: [subs="+quotes",options="+nowrap"]
   32  ----
   33  $ kubectl get pod -l che.workspace_id --all-namespaces
   ..
   40  . To find the name of the container:
   41  +
   42: [subs="+quotes",options="+nowrap"]
   43  ----
   44  $ NAMESPACE=che
   ..
   51  . When you have the namespace, pod name, and the name of the container, use the `kubectl` command to open a remote shell:
   52  +
   53: [literal,subs="+quotes",options="nowrap"]
   54  --
   55  $ NAMESPACE=che
   ..
   62  . From the container, execute the `build` and `run` commands (as if from the {prod-short} workspace terminal):
   63  +
   64: [subs="+quotes",options="+nowrap"]
   65  ----
   66  user@workspace7b2wemdf3hx7s3ln $ mvn clean install

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_che-theia-plug-in-metadata.adoc:
   96  
   97  .Example `meta.yaml` for a Che-Theia plug-in: the {prod-short} machine-exec Service
   98: [source,yaml,subs="+quotes,+attributes"]
   99  ----
  100  apiVersion: v2

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_objects-supported-in-eclipse-che.adoc:
    4  The following table lists the objects that are partially supported in {prod} {prod-ver}:
    5  
    6: [cols="1,1,1,1,5", options="header"]
    7  |===
    8  |Object 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_connecting-source-code-from-guthub-to-a-openshift-component-using-openshift-connector.adoc:
   32  For additional information about cloning Git repository, see:
   33  
   34: ifeval::["{project-context}" == "che"]
   35  link:https://www.eclipse.org/che/docs/che-7/version-control/#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   36  endif::[]
   37  
   38: ifeval::["{project-context}" == "crw"]
   39  link:https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html-single/end-user_guide/index#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   40  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_installing-che-in-restricted-environment.adoc:
   65  . Build the plug-in registry image:
   66  +
   67: [subs="+quotes"]
   68  ----
   69  ./build.sh --organization _<my-org>_ \
   ..
   96  . Build the devfile registry image:
   97  +
   98: [subs="+quotes"]
   99  ----
  100  ./build.sh --organization _<my-org>_ \
  ...
  155  To get a list of images required for plug-ins, display this file:
  156  
  157: [subs="+quotes"]
  158  ----
  159  $ docker run -it --rm \
  ...
  170  An offline devfile registry (see xref:building-offline-devfile-registry_{context}[]) contains a file with the list of all images referenced in its devfiles:
  171  
  172: [subs="+quotes"]
  173  ----
  174  $ docker run -it --rm \
  ...
  210  The `CheCluster` Custom Resource, which is managed by the {prod-short} Operator, includes fields to facilitate deploying an instance of {prod-short} in a restricted environment:
  211  
  212: [source,yaml,subs="+quotes"]
  213  ----
  214  # [...]
  ...
  222  Setting these values uses `<my-internal-registry>` and `<my-organization>` for all images. This means that the Operator expects the offline plug-in and devfile registries to be available at:
  223  
  224: [subs="+quotes"]
  225  ----
  226  __<my-internal-registry>__/__<my-organization>__/che-plug-in-registry:__<ver>__

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_upgrading-che.adoc:
   62  When making changes to the `checluster` custom resource, use patching to make updates to it. For example:
   63  
   64: ifeval::["{project-context}" == "che"]
   65  On Kubernetes, run:
   66  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\con_che-configmaps-and-their-behavior.adoc:
   23  For example, to overrride the default memory limit for workspaces, add the `CHE_WORKSPACE_DEFAULT\__MEMORY__LIMIT__MB` property to `customCheProperties`:
   24  
   25: [subs="+attributes"]
   26  [source,yaml]
   27  ----
   ..
   46  Previous versions of the {prod-short} Operator had a configMap named `custom` to fulfill this role.  If the {prod-short} Operator finds a `configMap` with the name `custom`, it adds the data it contains into the `customCheProperties` field, redeploys {prod-short}, and deletes the `custom` `configMap`.
   47  
   48: ifeval::["{project-context}" == "che"]
   49  == {prod-short} installed using a Helm Chart
   50  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_adding-custom-certificates-to-trust-store.adoc:
    8  . Create a new *configMap* with the certificate(s):
    9  +
   10: [subs="+quotes"]
   11  ----
   12  $ kubectl create configmap <config-map name> --from-file=<certificate file path> -n=che
   ..
   21  . Set the `global.tls.serverTrustStoreConfigMapName` property to previously created config-map name. To do that, add the following option to the `helm upgrade` command:
   22  +
   23: [subs="+quotes"]
   24  ----
   25  $ helm upgrade che -n che --set global.tls.serverTrustStoreConfigMapName=<config-map name> --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_configuring-namespace-strategies.adoc:
   20  To assign namespace names composed of a `che-ws` prefix and workspace id, set:
   21  
   22: [subs="+quotes"]
   23  ----
   24  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<workspaceid>__
   ..
   36  To have all workspaces created in `che-workspaces` namespace, set:
   37  
   38: [subs="+quotes"]
   39  ----
   40  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-workspaces
   ..
   54  To assign namespace names composed of a `che-ws` prefix and individual usernames (`che-ws-user1`, `che-ws-user2`), set:
   55  
   56: [subs="+quotes"]
   57  ----
   58  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<username>__
   ..
   79  disabled by default. To allow user-defined workspace namespaces, set:
   80  
   81: [subs="+quotes"]
   82  ----
   83  CHE_INFRA_KUBERNETES_NAMESPACE_ALLOW__USER__DEFINED=true

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_deploying-che-with-support-for-git-repositories-with-self-signed-certificates.adoc:
   15  . Create a new *configMap* with details about the Git server:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ kubectl create configmap che-git-self-signed-cert --from-file=ca.crt \
   ..
   34  . Update the `global.useGitSelfSignedCerts` property. To do that, add the following option to the `helm upgrade` command:
   35  +
   36: [subs="+quotes"]
   37  ----
   38  $ helm upgrade che -n che --set global.useGitSelfSignedCerts=true --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-chectl-installation.adoc:
   10  * For {prod-short} installed using the `{prod-cli} server:start` command and the `-n` argument (custom namespace specified), use the `-n` argument also to uninstall the {prod-short} instance.
   11  
   12: ifeval::["{project-context}" == "che"]
   13  * For installations that did not use the `-n` argument, the created namespace is named `{prod-id-short}` by default.
   14  endif::[]
   15  
   16: ifeval::["{project-context}" == "crw"]
   17  * For installations that did not use the `-n` argument, the created namespace is named `workspaces` by default.
   18  endif::[]
   ..
   29  . Stop the {prod} Server:
   30  +
   31: [subs="+quotes,attributes"]
   32  ----
   33  $ {prod-cli} server:stop
   ..
   42  . Remove {prod-short} from the cluster:
   43  +
   44: [subs="+quotes,attributes"]
   45  ----
   46  $ {prod-cli} server:delete -n _<namespace>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-operatorhub-installation.adoc:
   26  . In the row that displays information about the specific {prod-short} cluster, delete the {prod-short} Cluster deployment using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   27  //+
   28: //image::uninstall/che-delete-che-cluster.png[link="{imagesdir}/uninstall/che-delete-che-cluster.png"]
   29  . Alternatively, delete the {prod-short} deployment by clicking the displayed {prod} Cluster, `{prod-id}`, and select the *Delete cluster* option in the *Actions* drop-down menu on the top right.
   30  
   ..
   35  . In the row that displays information about the specific {prod} Operator, uninstall the {prod-short} Operator using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   36  //+
   37: //image::uninstall/che-uninstall-operator.png[link="{imagesdir}/uninstall/che-uninstall-operator.png"]
   38  . Accept the selected option, *Also completely remove the Operator from the selected namespace*.
   39  . Alternatively, uninstall the {prod} Operator by clicking the displayed {prod} Operator, `{prod}`, followed by selecting the *Uninstall Operator* option in the *Actions* drop-down menu on the top right.
   ..
   57  . Sign in to the cluster:
   58  +
   59: [subs="+quotes"]
   60  ----
   61  $ oc login -u _<username>_ -p _<password>_ _<cluster_URL>_
   ..
   64  . Switch to the project where the {prod-short} instance is deployed:
   65  +
   66: [subs="+quotes,attributes"]
   67  ----
   68  $ oc project _<{prod-id-short}_project>_
   ..
   71  . Obtain the {prod-short} cluster name. The following shows a cluster named `{prod-id}`:
   72  +
   73: [subs="+quotes,attributes"]
   74  ----
   75  $ oc get {prod-id-short}cluster
   ..
   80  . Delete the {prod-short} cluster:
   81  +
   82: [subs="+quotes,attributes"]
   83  ----
   84  $ oc delete {prod-id-short}cluster {prod-id}
   ..
   88  . Obtain the name of the {prod-short} cluster service version (CSV) module. The following detects a CSV module named `{prod-id}.v{prod-ver}`:
   89  +
   90: [subs="+quotes,attributes"]
   91  ----
   92  $ oc get csv
   ..
   97  . Delete the {prod-short} CSV:
   98  +
   99: [subs="+quotes,attributes"]
  100  ----
  101  $ oc delete csv {prod-id}.v{prod-ver}

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-3-using-the-cli-management-tool.adoc:
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-4-using-the-cli-management-tool.adoc:
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\ref_che-configmaps-fields-reference.adoc:
    9  == `server` settings related to the {prod-short} server
   10  
   11: [cols="1,1,3", options="header"]
   12  :===
   13  Property: Default value: Description
   ..
   49  == `database` configuration settings related to the database used by {prod-short}
   50  
   51: [cols="1,1,3", options="header"]
   52  :===
   53  Property: Default value: Description
   ..
   65  == `auth` configuration settings related to authentication used by {prod-short} installation
   66  
   67: [cols="1,1,3", options="header"]
   68  :===
   69  Property: Default value: Description
   ..
   87  
   88  
   89: [cols="1,1,3", options="header"]
   90  :===
   91  Property: Default value: Description
   ..
  102  == `k8s` configuration settings specific to {prod-short} installations on Kubernetes
  103  
  104: [cols="1,1,3", options="header"]
  105  :===
  106  Property: Default value: Description
  ...
  116  == `installation` defines the observed state of {prod-short} installation
  117  
  118: [cols="1,3", options="header"]
  119  :===
  120  Property: Description
  ...
  136  == Limits for workspaces
  137  
  138: [cols="1,1,3", options="header"]
  139  :===
  140  Property: Default value: Description
  ...
  146  == Limits for the workspaces of an user
  147  
  148: [cols="1,1,3", options="header"]
  149  :===
  150  Property: Default value: Description
  ...
  158  
  159  
  160: [cols="1,1,3", options="header"]
  161  :===
  162  Property: Default value: Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-architecture.adoc:
   12  :parent-context-of-che-architectural-elements: {context}
   13  
   14: [id="{prod-id-short}-architectural-elements"]
   15  = {prod-short} architectural elements
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_persistent-volume-configuration.adoc:
   91  When deploying {prod-short} using the Helm chart, configure the workspace PVC strategy by setting values for `global.pvcStrategy`. To do so, add the following option to the `helm install` or `helm upgrade` command:
   92  
   93: [subs="+quotes"]
   94  ----
   95  $ helm install --set global.pvcStrategy=__<common>__
   ..
   98  or:
   99  
  100: [subs="+quotes"]
  101  ----
  102  $ helm upgrade --set global.pvcStrategy=__<common>__
  ...
  120  * Create a new cluster by executing the `kubectl apply` command. For example:
  121  +
  122: [subs="+quotes"]
  123  ----
  124  $ kubectl apply -f _<my-cluster.yaml>_
  ...
  127  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
  128  +
  129: [subs="+quotes"]
  130  ----
  131  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/storage/pvcStrategy", "value": "__common__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_accessing-che-from-red-hat-applications-menu.adoc:
   16  A drop-down menu with installed applications is displayed.
   17  +
   18: image::installation/{project-context}-red-hat-application-menu-che-odp.png[link="{imagesdir}/installation/{project-context}-red-hat-application-menu-che-odp.png"]
   19  
   20  . Click the *{prod-short}* link. This creates a new workspace or redirects to an existing one. For source links pointing to publicly accessible GitHub repositories that contain a `devfile.yaml` file, this file is be used to configure the workspace. Otherwise, a default workspace is created.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_configuring-dns-on-azure.adoc:
    8  . In the Azure web console, navigate to *Home* -> *DNS zones*.
    9  +
   10: image::installation/dns-zone-in-microsoft-azure.png[link="{imagesdir}/installation/dns-zone-in-microsoft-azure.png"]
   11  
   12  . Create a new zone.
   ..
   14  .. In the *Resource group* drop-down list, click *eclipseCheResourceGroup*.
   15  +
   16: image::installation/selecting-the-resource-group.png[link="{imagesdir}/installation/selecting-the-resource-group.png"]
   17  
   18  .. In the *Instance details* section, in the *Name* field, type the name of the domain (*azr.my-ide.cloud*, in this case).
   ..
   20  .. Click the btn:[Review + create] button.
   21  +
   22: image::installation/entering-the-name-fo-the-domain.png[link="{imagesdir}/installation/entering-the-name-fo-the-domain.png"]
   23  
   24  . Click the btn:[Create] button.
   25  +
   26: image::installation/completing-the-creation-of-the-zone.png[link="{imagesdir}/installation/completing-the-creation-of-the-zone.png"]
   27  +
   28  The created zone and the list of name servers (NS) are displayed in the *DNS Zones* section.
   29  +
   30: image::installation/list-of-created-zones-and-NS.png[link="{imagesdir}/installation/list-of-created-zones-and-NS.png"]
   31  +
   32  These servers must be configured with the registrar of the domain.
   ..
   40  .. In the *IP Address* field, select the external IP of Ingress-nginx controller that the user had obtained in the xref:installing-ingress-on-azure[] section (*40.89.129.194*, in this case).
   41  +
   42: image::installation/adding-a-record-set.png[link="{imagesdir}/installation/adding-a-record-set.png"]
   43  +
   44  The following is an example of an added DNS zone:
   45  +
   46: image::installation/example-of-an-added-dns-zone.png[link="{imagesdir}/installation/example-of-an-added-dns-zone.png"]
   47  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_editing-the-code-of-applications-running-in-openshift-container-platform-using-che.adoc:
   21  The deployments are displayed as graphical circles surrounded by circular buttons. One of these buttons is *Edit Source Code*.
   22  +
   23: image::installation/edit-source-code-button-che-odp.png[link="{imagesdir}/installation/edit-source-code-button-che-odp.png"]
   24  
   25  . To edit the code of an application using {prod-short}, click the *Edit Source Code* button. This redirects to a workspace with the cloned source code of the application component.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_enabling-ssl-on-openshift-4.adoc:
   28  . Click *Confirm change*.
   29  +
   30: image::installation/tls-mode-true.png[link="{imagesdir}/installation/tls-mode-true.png"]
   31  
   32  . Navigate to the *Resources* tab.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager-on-kubernetes.adoc:
   76  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   77  +
   78: image::installation/dns-challenge-gcp.png[link="{imagesdir}/installation/dns-challenge-gcp.png"]
   79  
   80  . The cert-manager logs should contain information about the DNS challenge. To get the logs (here, `cert-manager-8d478bb45-2924h` is the name of the cert-manager pod):

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager.adoc:
   91  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   92  +
   93: image::installation/new-dns-challenge-added.png[link="{imagesdir}/installation/new-dns-challenge-added.png"]
   94  +
   95  The cert-manager logs should contain information about the DNS challenge.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-azure-using-the-chectl-command.adoc:
   13  * To install {prod-short}, run the following `{prod-cli}` command:
   14  +
   15: [subs="+attributes"]
   16  ----
   17  $ {prod-cli} server:start --installer=helm --platform=k8s --tls \
   ..
   51  Keycloak and {prod-short} now have valid wildcard certificates.
   52  
   53: image::installation/wildcard-certificates-for-keycloak-che.png[link="{imagesdir}/installation/wildcard-certificates-for-keycloak-che.png"]
   54  
   55  .{prod-short} user dashboard
   56: image::installation/che-user-dashboard.png[link="{imagesdir}/installation/che-user-dashboard.png"]
   57  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-codeready-containers-using-chectl.adoc:
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-google-cloud-platform-using-chectl.adoc:
   12  To install {prod-short} on Google Cloud Platform, run the following `{prod-cli}` command:
   13  +
   14: [subs="+attributes"]
   15  ----
   16  $ {prod-cli} server:start --installer=helm --platform=k8s --tls --domain=gcp.my-ide.cloud --multiuser
   ..
   48  
   49  .Keycloak and {prod-short} with valid wildcard certificates
   50: image::installation/keycloak-and-che-with-valid-wildcard-certs.gif[link="{imagesdir}/installation/keycloak-and-che-with-valid-wildcard-certs.gif"]
   51  
   52  .{prod-short} user dashboard
   53: image::installation/che-user-dashboard-gcp.png[link="{imagesdir}/installation/che-user-dashboard-gcp.png"]
   54  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kind-using-chectl.adoc:
   95  . Run `{prod-cli}`, using the external IP of the `ingress-nginx` Service, as an https://nip.io[nip.io] url.
   96  +
   97: [subs="+quotes,+attributes"]
   98  ----
   99  $ {prod-cli} server:start --installer operator --platform k8s --domain 172.17.250.1.nip.io

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kubernetes-using-the-chectl-command.adoc:
   16  . Run the following command:
   17  +
   18: [subs="+quotes,+attributes",options="nowrap"]
   19  ----
   20  $ {prod-cli} server:start --platform=k8s --installer=helm --domain=aws.my-ide.cloud --multiuser --tls
   ..
   53  . The certificate generated by Let’s Encrypt is a valid certificate.
   54  +
   55: image::installation/certificate-generate-lets-encrypt.png[link="{imagesdir}/installation/certificate-generate-lets-encrypt.png"]
   56  +
   57: image::installation/eclipse-che-welcome-to-your-workspace.png[link="{imagesdir}/installation/eclipse-che-welcome-to-your-workspace.png"]
   58  
   59  // .Additional Resources

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minikube-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minishift-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator-and-ssl.adoc:
   18  . Run the following command to create the {prod-short} instance:
   19  +
   20: [subs="+quotes,+attributes",options="nowrap"]
   21  ----
   22  $ {prod-cli} server:start -n _<project-name>_ --domain=<OPENSHIFT_APPS_URL> --tls 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator.adoc:
   20  . Create a new project called *{prod-id-short}*:
   21  +
   22: [subs="+quotes,+attributes"]
   23  ----
   24  $ oc new-project {prod-id-short}
   ..
   27  . Run the following command to create the {prod-short} instance:
   28  +
   29: [subs="+quotes,+attributes",options="nowrap"]
   30  ----
   31  $ {prod-cli} server:start --platform=openshift --installer=operator \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-storage-classes.adoc:
   23  * To provide storage class name for Postgres PVC, use the `{prod-cli}` `server:start` command with the `--postgres-pvc-storage-class-name` flag:
   24  +
   25: [subs="+quotes,+attributes"]
   26  ----
   27  $ {prod-cli} server:start -m -p minikube -a operator --postgres-pvc-storage-class-name=postgress-storage
   ..
   30  * To provide storage class name for {prod-short} workspaces, use the `server:start` command with the `--workspace-pvc-storage-class-name` flag:
   31  +
   32: [subs="+quotes,+attributes"]
   33  ----
   34  $ {prod-cli} server:start -m -p minikube -a operator --workspace-pvc-storage-class-name=workspace-storage
   ..
   70  . Start the {prod-id-short} server with your custom resources:
   71  +
   72: [subs="+quotes,+attributes"]
   73  ----
   74  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml
   ..
  124  
  125  . Bind the two Persisted Volumes:
  126: [subs="+quotes,+attributes"]
  127  ----
  128  $ kubectl apply -f che-workspace-pv.yaml -f che-postgres-pv.yaml
  ...
  176  . Start the {prod-id-short} server with your custom resources:
  177  +
  178: [subs="+quotes,+attributes"]
  179  ----
  180  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-the-che-operator-in-openshift-4-web-console.adoc:
   32  . The `eclipse-che` cluster is created.
   33  +
   34: image::installation/eclipse-che-cluster-create-che-cluster.png[link="{imagesdir}/installation/eclipse-che-cluster-create-che-cluster.png"]
   35  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-dns-on-google-cloud-platform.adoc:
    6  . Using the Cloud DNS, create a zone called *eclipse-che* and, for example, a DNS name *gcp.my-ide.cloud*. Click the btn:[Create] button.
    7  +
    8: image::installation/creating-dns-zone-on-gcp.png[link="{imagesdir}/installation/creating-dns-zone-on-gcp.png"]
    9  +
   10  The Cloud DNS zone is created.
   11  +
   12: image::installation/cloud-dns-zone-on-gcp.png[link="{imagesdir}/installation/cloud-dns-zone-on-gcp.png"]
   13  
   14  . Click the *Registrar Setup* link in the top-right corner of the window. The name servers (NS) to be added to the registrar are displayed.
   15  +
   16: image::installation/registrar-setup-gcp.png[link="{imagesdir}/installation/registrar-setup-gcp.png"]
   17  
   18  . Update the DNS zone (example: `ovh` domain).
   19  . Add the `*.gcp.my-ide.cloud` entry to the external Ingress IP on the cloud DNS.
   20  +
   21: image::installation/dns-settings-gcp.png[link="{imagesdir}/installation/dns-settings-gcp.png"]
   22  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-codeready-containers-using-chectl.adoc:
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minikube-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minishift-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-linux-or-macos.adoc:
   18  . Run the following command in the terminal (this downloads and executes the `install.sh` script):
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ bash <(curl -sL  https://www.eclipse.org/che/{prod-cli}/)
   ..
   25  . Run the following command to verify that the `{prod-cli}` binary used is `/usr/local/bin/{prod-cli}`:
   26  +
   27: [subs="+attributes"]
   28  ----
   29  $ which {prod-cli}
   ..
   34  . Run the following command to verify that the version of {prod-cli} that is the expected one.
   35  +
   36: [subs="+attributes"]
   37  ----
   38  $ {prod-cli} --version
   ..
   46  . Read the installation logs.
   47  +
   48: [subs="+attributes"]
   49  ----
   50  $ cat {prod-cli}-install.log

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-windows.adoc:
    9  * Run the following command in the PowerShell terminal:
   10  +
   11: [subs="+attributes"]
   12  ----
   13  C:\Users> Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://www.eclipse.org/che/{prod-cli}/win/'))

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-openshift-3-for-installing-che.adoc:
   15  . Log in to OpenShift. See link:https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html#basic-setup-and-login[Basic Setup and Login].
   16  +
   17: [subs="+attributes,+quotes",options="nowrap"]
   18  ----
   19  $ oc login
   ..
   22  . Run the following command to verify that the version of the `oc` OpenShift CLI management tool is 3.11:
   23  +
   24: [subs="+attributes,+quotes",options="nowrap"]
   25  ----
   26  $ oc version
   ..
   30  . Run the following commands to create a dummy project to find the URL that this OpenShift instance is using to deploy applications.
   31  +
   32: [subs="+attributes,+quotes",options="nowrap"]
   33  ----
   34  $ oc new-project hello-world
   ..
   44  . Remove the dummy project:
   45  +
   46: [subs="+attributes,+quotes",options="nowrap"]
   47  ----
   48  $ oc delete project hello-world

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-the-aws-system-for-installing-che.adoc:
   35  . Create the zone on AWS:
   36  +
   37: [subs="+quotes",options="nowrap"]
   38  ----
   39  $ aws route53 create-hosted-zone --name aws.my-ide.cloud --caller-reference 1
   ..
   97  . After the cluster is ready, validate it:
   98  +
   99: [subs="+quotes",options="nowrap"]
  100  ----
  101  $ kops validate cluster
  ...
  121  . Check the cluster using the `kubectl` command. The `kubectl` context is also configured automatically by the kops tool:
  122  +
  123: [subs="+quotes",options="nowrap"]
  124  ----
  125  $ kubectl config current-context
  ...
  138  . Install the default configuration.
  139  +
  140: [subs="+quotes",options="nowrap"]
  141  ----
  142  $ kubectl apply \
  ...
  146  . Install the configuration for AWS.
  147  +
  148: [subs="+quotes",options="nowrap"]
  149  ----
  150  $ kubectl apply \
  ...
  156  The following output confirms that the Ingress controller is running.
  157  +
  158: [subs="+quotes",options="nowrap"]
  159  ----
  160  $ kubectl get pods --namespace ingress-nginx
  ...
  165  . Find the external IP of ingress-nginx.
  166  +
  167: [subs="+quotes",options="nowrap"]
  168  ----
  169  $ kubectl get services --namespace ingress-nginx -o jsonpath='{.items[].status.loadBalancer.ingress[0].hostname}'
  ...
  179  Output similar to the following means a needed role must be created manually:
  180  +
  181: [subs="+quotes",options="nowrap"]
  182  ----
  183  arn:aws:sts::269287474311:assumed-role...4bff is not authorized to perform: iam:CreateServiceLinkedRole on resource: arn:aws:iam::269287474311:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing
  ...
  186  Run the following command to create the role:
  187  +
  188: [subs="+quotes",options="nowrap"]
  189  ----
  190  $ aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"
  ...
  194  . Create the wildcard DNS `*` (for `*.aws-my-ide.cloud`) with the previous hostname and ensure to add the dot (`.`) at the end of the hostname. In the *Type* drop-down list, select *CNAME*.
  195  +
  196: image::installation/create-record-set.png[link="{imagesdir}/installation/create-record-set.png"]
  197  +
  198  The following is an example of the resulting window after adding all the values.
  199  +
  200: image::installation/create-record-set-all-values.png[link="{imagesdir}/installation/create-record-set-all-values.png"]
  201  +
  202  The `che.aws.my-ide.cloud` address must resolve to an IP address.
  203  +
  204: [subs="+quotes",options="nowrap"]
  205  ----
  206  $ host che.aws.my-ide.cloud
  ...
  219  . Use the following command to obtain the zone ID:
  220  +
  221: [subs="+quotes",options="nowrap"]
  222  ----
  223  $ aws route53 list-hosted-zones
  ...
  239  . Copy the following content and replace `INSERT_ZONE_ID` with the route53 zone ID:
  240  +
  241: [subs="+quotes",options="nowrap"]
  242  ----
  243  {
  ...
  269  . In the *EC2 Dashboard*, identify the *IAM role* used by the master node.
  270  +
  271: image::installation/aws-lauch-instance.png[link="{imagesdir}/installation/aws-lauch-instance.png"]
  272  +
  273  It is located under the *Description* tab, in the *IAM role* field.
  274  +
  275: image::installation/describtion-tab-iam-role.png[link="{imagesdir}/installation/describtion-tab-iam-role.png"]
  276  
  277  . Click the *IAM role* link (`masters.eu.aws.my-ide.cloud`, in this case).
  278  . Click the *Add inline policy* link at the bottom of the window.
  279  +
  280: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  281  
  282  . In the *Create policy* window, on the *JSON* tab, paste the content of the JSON file created earlier and click the *Review policy* button.
  283  +
  284: image::installation/aws-create-policy.png[link="{imagesdir}/installation/aws-create-policy.png"]
  285  
  286  . In the *Name* field, type `eclipse-che-route53` and click *Create Policy*.
  287  +
  288: image::installation/create-policy-review-policy.png[link="{imagesdir}/installation/create-policy-review-policy.png"]
  289  
  290  
  ...
  293  . To install cert-manager, run the following commands (for details, see link:https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html[Installing Cert on Kubernetes]):
  294  +
  295: [subs="+quotes",options="nowrap"]
  296  ----
  297  $ kubectl create namespace cert-manager
  ...
  303  . Set `validate=false`. If set to `true`, it will only work with the latest Kubernetes:
  304  +
  305: [subs="+quotes",options="nowrap"]
  306  ----
  307  $ kubectl apply \
  ...
  312  . Create the {prod-short} namespace if it does not already exist:
  313  +
  314: [subs="+quotes",options="nowrap"]
  315  ----
  316  $ kubectl create namespace che
  ...
  320  . Create the *cert-manager* user:
  321  +
  322: [subs="+quotes",options="nowrap"]
  323  ----
  324  $ aws iam create-user --user-name cert-manager
  ...
  336  . Create the access key:
  337  +
  338: [subs="+quotes",options="nowrap"]
  339  ----
  340  $ aws iam create-access-key --user-name cert-manager
  ...
  354  . Create a secret from the `SecretAccessKey` content.
  355  +
  356: [subs="+quotes",options="nowrap"]
  357  ----
  358  $ kubectl create secret generic aws-cert-manager-access-key \
  ...
  362  . Use the *Add inline policy* link to add the inline policy to link:https://console.aws.amazon.com/iam/home#/users/cert-manager[AWS Cert-Manager].
  363  +
  364: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  365  
  366  . Paste the following inline policy in the *JSON* tab:
  367  +
  368: [subs="+quotes",options="nowrap"]
  369  ----
  370  {
  ...
  391  
  392  +
  393: image::installation/json-review-policy.png[link="{imagesdir}/installation/json-review-policy.png"]
  394  
  395  . Click *Review policy*.
  396  +
  397: image::installation/create-policy-review.png[link="{imagesdir}/installation/create-policy-review.png"]
  398  
  399  . In the *Name* field, type `route53`, and click *Create policy*.
  ...
  451  . Check if the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is being added to the DNS zone for _Let’s encrypt_.
  452  +
  453: image::installation/aws-hosted-zones-dns.png[link="{imagesdir}/installation/aws-hosted-zones-dns.png"]
  454  +
  455  The cert-manager logs should contain information about the DNS challenge.
  ...
  457  . Obtain the name of the pods:
  458  +
  459: [subs="+quotes",options="nowrap"]
  460  ----
  461  $ kubectl get pods --namespace cert-manager
  ...
  469  . Obtain the logs using the following command (here, `cert-manager-8d478bb45-sdfmz` is the name of the cert-manager pod):
  470  +
  471: [subs="+quotes",options="nowrap"]
  472  ----
  473  $ kubectl logs -f cert-manager-8d478bb45-sdfmz -n cert-manager
  ...
  484  . Ensure that the certificate is ready:
  485  +
  486: [subs="+quotes",options="nowrap"]
  487  ----
  488  $ kubectl describe certificate/che-tls -n che
  ...
  502  . Wait for the status to become `OK` and ensure that the log contains the following entry:
  503  +
  504: [subs="+quotes",options="nowrap"]
  505  ----
  506  I0729 13:56:26.140886       1 conditions.go:143] Found status change for Certificate "che-tls" condition "Ready": "False" -> "True"; setting lastTransitionTime to 2019-07-29 13:56:26.140866531 +0000 UTC m=+4557.134131468
  ...
  509  . Ensure that the status is up-to-date using the following command:
  510  +
  511: [subs="+quotes",options="nowrap"]
  512  ----
  513  $ kubectl describe certificate/che-tls -n che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_upgrading-the-chectl-management-tool.adoc:
   16  * Run the following command in the terminal to update `{prod-cli}` to the latest version.
   17  +
   18: [subs="+attributes"]
   19  ----
   20  # {prod-cli} update
   ..
   34  To move to a different channel, invoke the update with the name of the channel as an optional argument.
   35  
   36: [subs="+attributes"]
   37  ----
   38  # {prod-cli} update [next|stable]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-in-openshift-4-web-console.adoc:
    9  
   10  * A {prod-short} is being deployed on this instance of OpenShift 4.
   11: ifeval::["{context}" == "installing-che-on-openshift-4-from-operatorhub"]
   12  See xref:installing-{prod-id-short}-using-the-{prod-id-short}-operator-in-openshift-4-web-console_{context}[].
   13  endif::[]
   ..
   33  The screen displays the state of the resources assigned to the {prod-short} deployment.
   34  +
   35: image::installation/eclipse-che-resources-tab.png[link="{imagesdir}/installation/eclipse-che-resources-tab.png"]
   36  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools.adoc:
   15  . Run the following commands to select the `{project-context}` project:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ oc project _<project_name>_
   ..
   46  Example output of the command:
   47  +
   48: [options="nowrap",role="white-space-pre",subs="+quotes,+attributes"]
   49  ----
   50  include::examples/{project-context}-cluster-deployment-openshift-logs.adoc[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-7-known-issues.adoc:
    1: [id="{prod-id-short}-known-issues"]
    2  = {prod-short} {prod-ver} known issues
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-deployment-options-using-chectl.adoc:
    2  = {prod-short} deployment options using {prod-cli}
    3  
    4: [options="nowrap",subs="+attributes"]
    5  ----
    6  {prod-cli} server:start --help

387 matches across 139 files


Searching 538 files for "[a-z]*\"\]" (regex)

C:\Users\yanar_000\Documents\che-docs\src\main\_includes\initialize_shuffle.html:
   24      // instantiate the plugin
   25      $grid.shuffle({
   26:       itemSelector: '[class*="col-"]',
   27        sizer: $sizer    
   28      });

C:\Users\yanar_000\Documents\che-docs\src\main\_layouts\default.html:
   37      <script>
   38          $(function () {
   39:             $('[data-toggle="tooltip"]').tooltip()
   40          })
   41      </script>

C:\Users\yanar_000\Documents\che-docs\src\main\css\asciidoc.css:
    6    width: 80px;
    7  }
    8: .admonitionblock td.icon [class^="fa icon-"] {
    9    font-size: 2.5em;
   10    text-shadow: 1px 1px 2px rgba(0,0,0,.5);

C:\Users\yanar_000\Documents\che-docs\src\main\css\bootstrap.min.css:
  252          content: " (" attr(title) ")"
  253      }
  254:     a[href^="javascript:"]:after,
  255:     a[href^="#"]:after {
  256          content: ""
  257      }

C:\Users\yanar_000\Documents\che-docs\src\main\css\customstyles.css:
  241  }
  242  
  243: table col[class*="col-"] {
  244      position: static;
  245      display: table-column;
  246      float: none;
  247  }
  248: table td[class*="col-"],
  249: table th[class*="col-"] {
  250      position: static;
  251      display: table-cell;
  ...
  768  }
  769  
  770: a[data-toggle="tooltip"] {
  771      color: #649345;
  772      font-style: italic;
  ...
 1018  
 1019  /* this part adds an icon after external links, using FontAwesome
 1020: a[href^="http://"]:after, a[href^="https://"]:after {
 1021      content: "\f08e";
 1022      font-family: FontAwesome;
 ....
 1240   */
 1241  /* 1 */
 1242: .ie9 img[src$=".svg"] {
 1243      width: 100%;
 1244  }
 1245  /* 2 */
 1246  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
 1247:     img[src$=".svg"] {
 1248          width: 100%;
 1249      }

C:\Users\yanar_000\Documents\che-docs\src\main\css\printstyles.css:
   18  }
   19  
   20: a[href^="http:"]::after, a[href^="https:"]::after {
   21      content: "";
   22  }
   ..
   25      color: blue !important;
   26  }
   27: a[href*="mailto"]::after, a[data-toggle="tooltip"]::after, a[href].noCrossRef::after {
   28      content: "";
   29  }

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-blue.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-che.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-green.css:
   40  }
   41  
   42: a[data-toggle="tooltip"] {
   43      color: #649345;
   44      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\fonts\fontawesome-webfont.woff:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\css\fonts\fontawesome-webfont.woff2:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\css\fonts\FontAwesome.otf:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\fonts\fontawesome-webfont.woff:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\js\customscripts.js:
   12      }
   13      // activate tooltips. although this is a bootstrap js function, it must be activated this way in your theme.
   14:     $('[data-toggle="tooltip"]').tooltip({
   15          placement : 'top'
   16      });
   ..
   27  $(function() {
   28      var json, tabsState;
   29:     $('a[data-toggle="pill"], a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
   30          var href, json, parentId, tabsState;
   31  
   ..
   43  
   44      $.each(json, function(containerId, href) {
   45:         return $("#" + containerId + " a[href=" + href + "]").tab('show');
   46      });
   47  

C:\Users\yanar_000\Documents\che-docs\src\main\js\jekyll-search.js:
    1: !function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module){module.exports=function(){function receivedResponse(xhr){return 200==xhr.status&&4==xhr.readyState}function handleResponse(xhr,callback){xhr.onreadystatechange=function(){if(receivedResponse(xhr))try{callback(null,JSON.parse(xhr.responseText))}catch(err){callback(err,null)}}}var self=this;self.load=function(location,callback){var xhr=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");xhr.open("GET",location,!0),handleResponse(xhr,callback),xhr.send()}}},{}],2:[function(require,module){function FuzzySearchStrategy(){function createFuzzyRegExpFromString(string){return new RegExp(string.split("").join(".*?"),"gi")}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),!!string.match(createFuzzyRegExpFromString(crit)))}}module.exports=new FuzzySearchStrategy},{}],3:[function(require,module){function LiteralSearchStrategy(){function doMatch(string,crit){return string.toLowerCase().indexOf(crit.toLowerCase())>=0}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),doMatch(string,crit))}}module.exports=new LiteralSearchStrategy},{}],4:[function(require,module){module.exports=function(){function findMatches(store,crit,strategy){for(var data=store.get(),i=0;i<data.length&&matches.length<limit;i++)findMatchesInObject(data[i],crit,strategy);return matches}function findMatchesInObject(obj,crit,strategy){for(var key in obj)if(strategy.matches(obj[key],crit)){matches.push(obj);break}}function getSearchStrategy(){return fuzzy?fuzzySearchStrategy:literalSearchStrategy}var self=this,matches=[],fuzzy=!1,limit=10,fuzzySearchStrategy=require("./SearchStrategies/fuzzy"),literalSearchStrategy=require("./SearchStrategies/literal");self.setFuzzy=function(_fuzzy){fuzzy=!!_fuzzy},self.setLimit=function(_limit){limit=parseInt(_limit,10)||limit},self.search=function(data,crit){return crit?(matches.length=0,findMatches(data,crit,getSearchStrategy())):[]}}},{"./SearchStrategies/fuzzy":2,"./SearchStrategies/literal":3}],5:[function(require,module){module.exports=function(_store){function isObject(obj){return!!obj&&"[object Object]"==Object.prototype.toString.call(obj)}function isArray(obj){return!!obj&&"[object Array]"==Object.prototype.toString.call(obj)}function addObject(data){return store.push(data),data}function addArray(data){for(var added=[],i=0;i<data.length;i++)isObject(data[i])&&added.push(addObject(data[i]));return added}var self=this,store=[];isArray(_store)&&addArray(_store),self.clear=function(){return store.length=0,store},self.get=function(){return store},self.put=function(data){return isObject(data)?addObject(data):isArray(data)?addArray(data):void 0}}},{}],6:[function(require,module){module.exports=function(){var self=this,templatePattern=/\{(.*?)\}/g;self.setTemplatePattern=function(newTemplatePattern){templatePattern=newTemplatePattern},self.render=function(t,data){return t.replace(templatePattern,function(match,prop){return data[prop]||match})}}},{}],7:[function(require){!function(window){"use strict";function SimpleJekyllSearch(){function initWithJSON(){store.put(opt.dataSource),registerInput()}function initWithURL(url){jsonLoader.load(url,function(err,json){err?throwError("failed to get JSON ("+url+")"):(store.put(json),registerInput())})}function throwError(message){throw new Error("SimpleJekyllSearch --- "+message)}function validateOptions(_opt){for(var i=0;i<requiredOptions.length;i++){var req=requiredOptions[i];_opt[req]||throwError("You must specify a "+req)}}function assignOptions(_opt){for(var option in opt)opt[option]=_opt[option]||opt[option]}function isJSON(json){try{return json instanceof Object&&JSON.parse(JSON.stringify(json))}catch(e){return!1}}function emptyResultsContainer(){opt.resultsContainer.innerHTML=""}function appendToResultsContainer(text){opt.resultsContainer.innerHTML+=text}function registerInput(){opt.searchInput.addEventListener("keyup",function(e){if (e.keyCode == 38 || e.keyCode == 40) return false;return 0==e.target.value.length?void emptyResultsContainer():void render(searcher.search(store,e.target.value))})}function render(results){if(emptyResultsContainer(),0==results.length)return appendToResultsContainer(opt.noResultsText);for(var i=0;i<results.length;i++)appendToResultsContainer(templater.render(opt.searchResultTemplate,results[i]))}var self=this,requiredOptions=["searchInput","resultsContainer","dataSource"],opt={searchInput:null,resultsContainer:null,dataSource:[],searchResultTemplate:'<li><a href="{url}" title="{desc}">{title}</a></li>',noResultsText:"No results found",limit:10,fuzzy:!1};self.init=function(_opt){validateOptions(_opt),assignOptions(_opt),isJSON(opt.dataSource)?initWithJSON(opt.dataSource):initWithURL(opt.dataSource)}}var Searcher=require("./Searcher"),Templater=require("./Templater"),Store=require("./Store"),JSONLoader=require("./JSONLoader"),searcher=new Searcher,templater=new Templater,store=new Store,jsonLoader=new JSONLoader;window.SimpleJekyllSearch=new SimpleJekyllSearch}(window,document)},{"./JSONLoader":1,"./Searcher":4,"./Store":5,"./Templater":6}]},{},[7]);
    2  
    3  var currentSelection = 0;

C:\Users\yanar_000\Documents\che-docs\src\main\js\jquery.navgoco.min.js:
    6   * BSD - https://github.com/tefra/navgoco/blob/master/LICENSE-BSD
    7   */
    8: !function(a){"use strict";var b=function(b,c,d){return this.el=b,this.$el=a(b),this.options=c,this.uuid=this.$el.attr("id")?this.$el.attr("id"):d,this.state={},this.init(),this};b.prototype={init:function(){var b=this;b._load(),b.$el.find("ul").each(function(c){var d=a(this);d.attr("data-index",c),b.options.save&&b.state.hasOwnProperty(c)?(d.parent().addClass(b.options.openClass),d.show()):d.parent().hasClass(b.options.openClass)?(d.show(),b.state[c]=1):d.hide()});var c=a("<span></span>").prepend(b.options.caretHtml),d=b.$el.find("li > a");b._trigger(c,!1),b._trigger(d,!0),b.$el.find("li:has(ul) > a").prepend(c)},_trigger:function(b,c){var d=this;b.on("click",function(b){b.stopPropagation();var e=c?a(this).next():a(this).parent().next(),f=!1;if(c){var g=a(this).attr("href");f=void 0===g||""===g||"#"===g}if(e=e.length>0?e:!1,d.options.onClickBefore.call(this,b,e),!c||e&&f)b.preventDefault(),d._toggle(e,e.is(":hidden")),d._save();else if(d.options.accordion){var h=d.state=d._parents(a(this));d.$el.find("ul").filter(":visible").each(function(){var b=a(this),c=b.attr("data-index");h.hasOwnProperty(c)||d._toggle(b,!1)}),d._save()}d.options.onClickAfter.call(this,b,e)})},_toggle:function(b,c){var d=this,e=b.attr("data-index"),f=b.parent();if(d.options.onToggleBefore.call(this,b,c),c){if(f.addClass(d.options.openClass),b.slideDown(d.options.slide),d.state[e]=1,d.options.accordion){var g=d.state=d._parents(b);g[e]=d.state[e]=1,d.$el.find("ul").filter(":visible").each(function(){var b=a(this),c=b.attr("data-index");g.hasOwnProperty(c)||d._toggle(b,!1)})}}else f.removeClass(d.options.openClass),b.slideUp(d.options.slide),d.state[e]=0;d.options.onToggleAfter.call(this,b,c)},_parents:function(b,c){var d={},e=b.parent(),f=e.parents("ul");return f.each(function(){var b=a(this),e=b.attr("data-index");return e?void(d[e]=c?b:1):!1}),d},_save:function(){if(this.options.save){var b={};for(var d in this.state)1===this.state[d]&&(b[d]=1);c[this.uuid]=this.state=b,a.cookie(this.options.cookie.name,JSON.stringify(c),this.options.cookie)}},_load:function(){if(this.options.save){if(null===c){var b=a.cookie(this.options.cookie.name);c=b?JSON.parse(b):{}}this.state=c.hasOwnProperty(this.uuid)?c[this.uuid]:{}}},toggle:function(b){var c=this,d=arguments.length;if(1>=d)c.$el.find("ul").each(function(){var d=a(this);c._toggle(d,b)});else{var e,f={},g=Array.prototype.slice.call(arguments,1);d--;for(var h=0;d>h;h++){e=g[h];var i=c.$el.find('ul[data-index="'+e+'"]').first();if(i&&(f[e]=i,b)){var j=c._parents(i,!0);for(var k in j)f.hasOwnProperty(k)||(f[k]=j[k])}}for(e in f)c._toggle(f[e],b)}c._save()},destroy:function(){a.removeData(this.$el),this.$el.find("li:has(ul) > a").unbind("click"),this.$el.find("li:has(ul) > a > span").unbind("click")}},a.fn.navgoco=function(c){if("string"==typeof c&&"_"!==c.charAt(0)&&"init"!==c)var d=!0,e=Array.prototype.slice.call(arguments,1);else c=a.extend({},a.fn.navgoco.defaults,c||{}),a.cookie||(c.save=!1);return this.each(function(f){var g=a(this),h=g.data("navgoco");h||(h=new b(this,d?a.fn.navgoco.defaults:c,f),g.data("navgoco",h)),d&&h[c].apply(h,e)})};var c=null;a.fn.navgoco.defaults={caretHtml:"",accordion:!1,openClass:"open",save:!0,cookie:{name:"navgoco",expires:!1,path:"/"},slide:{duration:400,easing:"swing"},onClickBefore:a.noop,onClickAfter:a.noop,onToggleBefore:a.noop,onToggleAfter:a.noop}}(jQuery);

C:\Users\yanar_000\Documents\che-docs\src\main\js\jquery.shuffle.min.js:
   10   * Build: http://modernizr.com/download/#-csstransforms-csstransforms3d-csstransitions-cssclasses-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes
   11   */
   12: window.Modernizr=function(a,b,c){function z(a){j.cssText=a}function A(a,b){return z(m.join(a+";")+(b||""))}function B(a,b){return typeof a===b}function C(a,b){return!!~(""+a).indexOf(b)}function D(a,b){for(var d in a){var e=a[d];if(!C(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function E(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:B(f,"function")?f.bind(d||b):f}return!1}function F(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+o.join(d+" ")+d).split(" ");return B(b,"string")||B(b,"undefined")?D(e,b):(e=(a+" "+p.join(d+" ")+d).split(" "),E(e,b,c))}var d="2.6.2",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m=" -webkit- -moz- -o- -ms- ".split(" "),n="Webkit Moz O ms",o=n.split(" "),p=n.toLowerCase().split(" "),q={},r={},s={},t=[],u=t.slice,v,w=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},x={}.hasOwnProperty,y;!B(x,"undefined")&&!B(x.call,"undefined")?y=function(a,b){return x.call(a,b)}:y=function(a,b){return b in a&&B(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=u.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(u.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(u.call(arguments)))};return e}),q.csstransforms=function(){return!!F("transform")},q.csstransforms3d=function(){var a=!!F("perspective");return a&&"webkitPerspective"in g.style&&w("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(b,c){a=b.offsetLeft===9&&b.offsetHeight===3}),a},q.csstransitions=function(){return F("transition")};for(var G in q)y(q,G)&&(v=G.toLowerCase(),e[v]=q[G](),t.push((e[v]?"":"no-")+v));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)y(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},z(""),i=k=null,e._version=d,e._prefixes=m,e._domPrefixes=p,e._cssomPrefixes=o,e.testProp=function(a){return D([a])},e.testAllProps=F,e.testStyles=w,e.prefixed=function(a,b,c){return b?F(a,b,c):F(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+t.join(" "):""),e}(this,this.document);
   13  
   14  (function (factory) {

C:\Users\yanar_000\Documents\che-docs\src\main\js\toc.js:
   10          var $cache = $('#toc ul');
   11          $('#toc ul li a').removeClass('active');
   12:         $(' a[href="#' + id + '"]').addClass('active');
   13        }
   14  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authenticating-in-a-che-workspace.adoc:
    5  :parent-context-of-authenticating-in-a-che-workspace: {context}
    6  
    7: [id="authenticating-in-a-{prod-id-short}-workspace_{context}"]
    8  = Authenticating in a {prod-short} workspace
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authenticating-to-the-che-server.adoc:
    5  :parent-context-of-authenticating-to-the-che-server: {context}
    6  
    7: [id="authenticating-to-the-{prod-id-short}-server_{context}"]
    8  = Authenticating to the {prod-short} server
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authenticating-users.adoc:
   15  :parent-context-of-authenticating-users: {context}
   16  
   17: [id="authenticating-users_{context}"]
   18  = Authenticating users
   19  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authorizing-users.adoc:
   15  :parent-context-of-authorizing-users: {context}
   16  
   17: [id="authorizing-users_{context}"]
   18  = Authorizing users
   19  
   ..
   40  include::ref_monitorsystem-permission.adoc[leveloffset=+1]
   41  
   42: ifeval::["{project-context} == "che"]
   43  include::con_super-privileged-mode.adoc[leveloffset=+1]
   44  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_backup-and-disaster-recovery.adoc:
   11  :parent-context-of-backup-and-disaster-recovery: {context}
   12  
   13: [id="backup-and-disaster-recovery_{context}"]
   14  = Backup and Disaster Recovery
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_building-and-running-a-custom-registry-image.adoc:
   11  :parent-context-of-building-and-running-a-custom-registry-image: {context}
   12  
   13: [id="building-and-running-a-custom-registry-image_{context}"]
   14  = Building and running a custom registry image
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_caching-images-for-faster-workspace-start.adoc:
   11  :parent-context-of-caching-images-for-faster-workspace-start: {context}
   12  
   13: [id="caching-images-for-faster-workspace-start_{context}"]
   14  = Caching images for faster workspace start
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_collecting-logs-using-chectl.adoc:
   11  :parent-context-of-collecting-logs-using-chectl: {context}
   12  
   13: [id="collecting-logs-using-{prod-cli}_{context}"]
   14  = Collecting logs using {prod-cli}
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_configuring-authorization.adoc:
   11  :parent-context-of-configuring-authorization: {context}
   12  
   13: [id="configuring-authorization_{context}"]
   14  = Configuring authorization
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_customizing-the-devfile-and-plug-in-registries.adoc:
   11  :parent-context-of-customizing-the-devfile-and-plug-in-registries: {context}
   12  
   13: [id="customizing-the-devfile-and-plug-in-registries_{context}"]
   14  = Customizing the devfile and plug-in registries
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_deploying-the-registries.adoc:
    1  :parent-context-of-deploying-the-registries: {context}
    2  
    3: [id="deploying-the-registries_{context}"]
    4  = Deploying the registries
    5  
    .
   14  Otherwise, these images can be pushed to a container registry (public, such as `quay.io`, or the DockerHub, or a private registry).
   15  
   16: ifeval::["{project-context}" == "che"]
   17  include::proc_deploying-registries-in-kubernetes.adoc[leveloffset=+1]
   18  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_editing-a-devfile-and-plug-in-at-runtime.adoc:
   11  :parent-context-of-editing-a-devfile-and-plug-in-at-runtime: {context}
   12  
   13: [id="editing-a-devfile-and-plug-in-at-runtime_{context}"]
   14  = Editing a devfile and plug-in at runtime
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_installing-the-jaeger-tracing-tool.adoc:
    1  // tracing-che
    2  
    3: [id="installing-the-jaeger-tracing-tool_{context}"]
    4  = Installing the Jaeger tracing tool
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_managing-users.adoc:
   11  :parent-context-of-managing-users: {context}
   12  
   13: [id="managing-users_{context}"]
   14  = Managing users
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_modifying-the-registries.adoc:
    3  :parent-context-of-modifying-the-registries: {context}
    4  
    5: [id="modifying-the-registries_{context}"]
    6  = Modifying the registries
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_monitoring-che.adoc:
   11  :parent-context-of-monitoring-che: {context}
   12  
   13: [id="monitoring-{prod-id-short}_{context}"]
   14  = Monitoring {prod-short}
   15  
   ..
   22  include::proc_collecting-che-metrics-with-prometheus.adoc[leveloffset=+1]
   23  
   24: ifeval::["{project-context}" == "che"]
   25  
   26  include::proc_viewing-che-metrics-on-grafana-dashboards.adoc[leveloffset=+1]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_removing-user-data.adoc:
   11  :parent-context-of-removing-user-data: {context}
   12  
   13: [id="removing-user-data_{context}"]
   14  = Removing user data
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_retrieving-che-logs.adoc:
   11  :parent-context-of-retrieving-che-logs: {context}
   12  
   13: [id="retrieving-{prod-id-short}-logs_{context}"]
   14  = Retrieving {prod-short} logs
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_securing-che.adoc:
   11  :parent-context-of-securing-che: {context}
   12  
   13: [id="securing-{prod-id-short}_{context}"]
   14  = Securing {prod-short}
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_tracing-che.adoc:
   11  :parent-context-of-tracing-che: {context}
   12  
   13: [id="tracing-{prod-id-short}_{context}"]
   14  = Tracing {prod-short}
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_troubleshooting-for-che-administrators.adoc:
   11  :parent-context-of-troubleshooting-for-che-administrators: {context}
   12  
   13: [id="troubleshooting-for-{prod-id-short}-administrators_{context}"]
   14  = Troubleshooting for {prod-short} administrators
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_using-organizations.adoc:
   12  :parent-context-of-using-organizations: {context}
   13  
   14: [id="using-organizations_{context}"]
   15  = Using organizations
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-che-server-logs.adoc:
   15  :parent-context-of-viewing-che-server-logs: {context}
   16  
   17: [id="viewing-{prod-id-short}-server-logs_{context}"]
   18  = Viewing {prod-short} server logs
   19  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-che-theia-ide-logs.adoc:
    1  :parent-context-of-viewing-che-theia-ide-logs: {context}
    2  
    3: [id="viewing-che-theia-ide-logs_{context}"]
    4  = Viewing Che-Theia IDE logs
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-che-workspaces-logs.adoc:
   11  :parent-context-of-viewing-che-workspaces-logs: {context}
   12  
   13: [id="viewing-{prod-id-short}-workspaces-logs_{context}"]
   14  = Viewing {prod-short} workspaces logs
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-external-service-logs.adoc:
   11  :parent-context-of-viewing-external-service-logs: {context}
   12  
   13: [id="viewing-external-service-logs_{context}"]
   14  = Viewing external service logs
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-keycloak-logs.adoc:
    3  :parent-context-of-viewing-keycloak-logs: {context}
    4  
    5: [id="viewing-keycloak-logs_{context}"]
    6  = Viewing Keycloak logs
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-camel.adoc:
    1  :parent-context-of-viewing-logs-for-camel: {context}
    2  
    3: [id="viewing-logs-for-camel_{context}"]
    4  = Viewing logs for Camel
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-dotnet-with-netcoredebugoutput-plug-in.adoc:
    1  :parent-context-of-viewing-logs-for-dotnet-with-netcoredebugoutput-plug-in: {context}
    2  
    3: [id="viewing-logs-for-dotnet-with-netcoredebugoutput-plug-in_{context}"]
    4  = Viewing logs for Dotnet with NetcoredebugOutput plug-in
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-dotnet-with-omnisharp-theia-plug-in.adoc:
    1  :parent-context-of-viewing-logs-for-dotnet-with-omnisharp-theia-plug-in: {context}
    2  
    3: [id="viewing-logs-for-dotnet-with-omnisharp-theia-plug-in_{context}"]
    4  = Viewing logs for Dotnet with Omnisharp-Theia plug-in
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-go.adoc:
    1  :parent-context-of-viewing-logs-for-go: {context}
    2  
    3: [id="viewing-logs-for-go_{context}"]
    4  = Viewing logs for Go
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-intelephense.adoc:
    1  :parent-context-of-viewing-logs-for-intelephense: {context}
    2  
    3: [id="viewing-logs-for-intelephense_{context}"]
    4  = Viewing logs for Intelephense
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-java.adoc:
    1  :parent-context-of-viewing-logs-for-java: {context}
    2  
    3: [id="viewing-logs-for-java_{context}"]
    4  = Viewing logs for Java
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-typescript.adoc:
    1  :parent-context-of-viewing-logs-for-typescript: {context}
    2  
    3: [id="viewing-logs-for-typescript_{context}"]
    4  = Viewing logs for Typescript
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-xml.adoc:
    1  :parent-context-of-viewing-logs-for-xml: {context}
    2  
    3: [id="viewing-logs-for-xml_{context}"]
    4  = Viewing logs for XML
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-for-yaml.adoc:
    1  :parent-context-of-viewing-logs-for-yaml: {context}
    2  
    3: [id="viewing-logs-for-yaml_{context}"]
    4  = Viewing logs for YAML
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_viewing-logs-from-language-servers-and-debug-adapters.adoc:
    1  :parent-context-of-viewing-logs-from-language-servers-and-debug-adapters: {context}
    2  
    3: [id="viewing-logs-from-language-servers-and-debug-adapters_{context}"]
    4  = Viewing logs from language servers and debug adapters
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_authorization-and-user-management.adoc:
    1  
    2: [id="authorization-and-user-management_{context}"]
    3  = Authorization and user management
    4  
    .
   13  To find your Keycloak URL:
   14  
   15: ifeval::["{project-context}" == "che"]
   16  If {prod-short} is running on Kubernetes:
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_che-organization-permissions.adoc:
    3  // authorizing-users
    4  
    5: [id="{prod-id-short}-organization-permissions_{context}"]
    6  = {prod-short} organization permissions
    7  
    .
    9  
   10  .{prod-short} organization permissions
   11: [options="header",cols="2"]
   12  |===
   13  | Permission

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_che-system-permissions.adoc:
    3  // authorizing-users
    4  
    5: [id="{prod-id-short}-system-permissions_{context}"]
    6  = {prod-short} system permissions
    7  
    .
    9  
   10  .{prod-short} system permission
   11: [options="header",cols="2"]
   12  |===
   13  | Permission

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_che-workspace-permissions.adoc:
    4  
    5  
    6: [id="{prod-id-short}-workspace-permissions_{context}"]
    7  = {prod-short} workspace permissions
    8  
    .
   12  
   13  .{prod-short} workspace permissions
   14: [options="header",cols="2"]
   15  |===
   16  | Permission

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_database-setup.adoc:
   11  :parent-context-of-database-setup: {context}
   12  
   13: [id="database-setup_{context}"]
   14  = Database setup
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_kubernetes-image-puller-overview.adoc:
    1: [id="kubernetes-image-puller-overview_{context}"]
    2  = Kubernetes Image Puller overview
    3  
    .
   10  The Kubernetes Image Puller pulls its configuration from a `ConfigMap` with the following available parameters:
   11  
   12: [id="kubernetes-image-puller-configuration"]
   13  .Kubernetes Image Puller parameters
   14: [options="header"]
   15  |===
   16  |Parameter |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_machine-token-validation.adoc:
    3  // authenticating-in-a-che-workspace
    4  
    5: [id="machine-token-validation_{context}"]
    6  = Machine token validation
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_organization-and-sub-organization-administration.adoc:
    5  :context: organization-and-sub-organization-administration
    6  
    7: [id="organization-and-sub-organization-administration_{context}"]
    8  = Organization and sub-organization administration
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_organizations-in-eclipse-che.adoc:
    5  :context: organizations-in-eclipse-che
    6  
    7: [id="organizations-in-eclipse-{prod-id-short}"]
    8  = Organizations in {prod}
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_persistent-volumes-backups.adoc:
   11  :parent-context-of-persistent-volumes-backups: {context}
   12  
   13: [id="persistent-volumes-backups_{context}"]
   14  = Persistent Volumes backups
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_roles-in-an-organization.adoc:
    5  :context: roles-in-an-organization
    6  
    7: [id="roles-in-an-organization"]
    8  = Roles in an organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_root-organizations-and-sub-organizations.adoc:
    5  :context: root-organizations-and-sub-organizations
    6  
    7: [id="root-organizations-and-sub-organizations_{context}"]
    8  = Root organizations and sub-organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_super-privileged-mode.adoc:
    3  // user-authorization
    4  
    5: [id="super-privileged-mode_{context}"]
    6  = super-privileged mode
    7  
    .
   10  The *super-privileged* mode is disabled by default. To change to the *super-privileged* mode, set the `CHE_SYSTEM_SUPER__PRIVILEGED__MODE` variable to `true` in the `che.env` file. The following is a list of services that are enabled for users with the *manageSystems* permissions and with *super-privileged* mode on.
   11  
   12: [options="header"]
   13  |====
   14  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_workspace-jwt-token.adoc:
    3  // authenticating-in-a-che-workspace
    4  
    5: [id="workspace-jwt-token_{context}"]
    6  = Workspace JWT token
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_workspaces-in-organizations.adoc:
    5  :context: workspaces-in-organizations
    6  
    7: [id="workspaces-in-organizations_{context}"]
    8  = Workspaces in organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_adding-a-devfile-at-runtime.adoc:
    1: [id="adding-a-devfile-at-runtime_{context}"]
    2  = Adding a devfile at runtime
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_adding-a-plug-in-at-runtime.adoc:
    1: [id="adding-a-plug-in-at-runtime_{context}"]
    2  = Adding a plug-in at runtime
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_adding-members-to-organizations.adoc:
    5  :context: roles-in-an-organization
    6  
    7: [id="adding-members-to-organizations_{context}"]
    8  = Adding members to organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_adding-members-to-sub-organizations.adoc:
    5  :context: adding-members-to-sub-organizations
    6  
    7: [id="adding-members-to-sub-organizations_{context}"]
    8  = Adding members to sub-organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_allocating-resources-for-organizations.adoc:
    5  :context: allocating-resources-for-organizations
    6  
    7: [id="allocating-resources-for-organizations_{context}"]
    8  = Allocating resources for organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_assigning-che-permissions.adoc:
    3  // authorizing-users
    4  
    5: [id="assigning-{prod-id-short}-permissions_{context}"]
    6  = Assigning {prod-short} permissions
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_authenticating-to-the-che-server-using-oauth.adoc:
    3  // user-authentication
    4  
    5: [id="authenticating-to-the-{prod-id-short}-server-using-oauth_{context}"]
    6  = Authenticating to the {prod-short} server using OAuth
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_authenticating-to-the-che-server-using-openid.adoc:
    1: [id="authenticating-to-the-{prod-id-short}-server-using-openid_{context}"]
    2  = Authenticating to the {prod-short} server using OpenID
    3  
    .
   62  
   63  
   64: [id="obtaining-the-token-from-keycloak_{context}"]
   65  == Obtaining the token from credentials through Keycloak
   66  
   ..
   69  To obtain the token, send a request to the token endpoint with the username and password credentials. This request can be schematically described as the following cURL request:
   70  
   71: [subs="+quotes"]
   72  ----
   73  $ curl --data "grant_type=password&client_id=__<client_name>__&username=__<username>__&password=__<password>__" \
   ..
   80  . Obtaining the token using this authorization code.
   81  
   82: [id="obtaining-the-token-from-openshift-token-through-keycloak_{context}"]
   83  == Obtaining the token from the OpenShift token through Keycloak
   84  
   ..
   88  To do this, send a request to the token endpoint that can be schematically described as the following cURL request:
   89  
   90: [subs="+quotes"]
   91  ----
   92  $ curl -X POST -d "client_id=__<client_name>__" \
   ..
  104  
  105  `_<user_openshift_token>_` is the token retrieved by the end-user with the command:
  106: [subs="+quotes"]
  107  ----
  108  $ oc whoami --show-token

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_authenticating-to-the-che-server-using-other-authentication-implementations.adoc:
    3  // user-authentication
    4  
    5: [id="authenticatinng-to-the-{prod-id-short}-server-using-other-authentication-implementations_{context}"]
    6  = Authenticating to the {prod-short} server using other authentication implementations
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-devfile-registry.adoc:
    1: [id="building-a-custom-devfile-registry_{context}"]
    2  = Building a custom devfile registry
    3  
    .
   19  +
   20  .File organization for a devfile
   21: [subs="+quotes"]
   22  ----
   23  ./che-devfile-registry/devfiles/
   ..
   32  +
   33  .Parameters for a devfile `meta.yaml`
   34: [%header,format=csv,cols="1m,3"]
   35  |===
   36  Attribute, Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-plug-in-registry.adoc:
    1: [id="building-a-custom-plug-in-registry_{context}"]
    2  = Building a custom plug-in registry
    3  
    .
   19  +
   20  .File organization for a plugin
   21: [subs="+quotes"]
   22  ----
   23  ./che-plugin-registry/v3/plugins/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_checking-important-logs.adoc:
    1: [id="checking-important-logs_{context}"]
    2  = Checking important logs
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_checking-omnisharp-theia-plug-in-language-server-features.adoc:
    1: [id="checking-omnisharp-theia-plug-in-language-server-features_{context}"]
    2  = Checking Omnisharp Che-Theia plug-in language server features
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_checking-xml-language-server-feature-flags.adoc:
    1: [id="checking-xml-language-server-feature-flags_{context}"]
    2  = Checking XML language server feature flags
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_checking-yaml-language-server-feature-flags.adoc:
    1: [id="checking-the-yaml-language-server-feature-flags_{context}"]
    2  = Checking the YAML language server feature flags
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_collecting-che-metrics-with-prometheus.adoc:
    1: [id="collecting-{prod-id-short}-metrics-with-prometheus_{context}"]
    2  = Collecting {prod-short} metrics with Prometheus
    3  
    .
   15  +
   16  .Prometheus configuration example
   17: [source,yaml,subs="+attributes"]
   18  ----
   19  include::examples/prometheus-config.yaml[]
   20  ----
   21  +
   22: ifeval::["{project-context}" == "che"]
   23  Latest version: link:https://+github.com/eclipse/che/blob/master/deploy/openshift/templates/monitoring/prometheus-config.yaml[example `prometheus-config.yaml` on GitHub].
   24  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-che-to-work-with-keycloak.adoc:
    1: [id="configuring-{prod-id-short}-to-work-with-keycloak_{context}"]
    2  = Configuring {prod-short} to work with Keycloak
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-keycloak-tokens.adoc:
    1: [id="configuring-keycloak-tokens_{context}"]
    2  = Configuring Keycloak tokens
    3  
    .
    6  You can change the following Keycloak token settings:
    7  
    8: image::keycloak/keycloak_realm.png[link="{imagesdir}/keycloak/keycloak_realm.png"]
    9  
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-smtp-and-email-notifications.adoc:
    5  :context: configuring-smtp-and-email-notifications
    6  
    7: [id="configuring-smtp-and-email-notifications"]
    8  = Configuring SMTP and email notifications
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_creating-an-organization.adoc:
    5  :context: creating-an-organization
    6  
    7: [id="creating-an-organization_{context}"]
    8  = Creating an organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_creating-secure-servers.adoc:
    3  // authentication-inside-the-workspace
    4  
    5: [id="creating-secure-servers_{context}"]
    6  = Creating secure servers
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_creating-sub-organizations.adoc:
    5  :context: creating-sub-organizations
    6  
    7: [id="creating-sub-organizations_{context}"]
    8  = Creating sub-organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deleting-an-organization-or-sub-organization.adoc:
    5  :context: deleting-an-organization-or-sub-organization
    6  
    7: [id="deleting-an-organization-or-sub-organization_{context}"]
    8  = Deleting an organization or sub-organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-helm.adoc:
    1: [id="deploying-the-kubernetes-image-puller-using-helm_{context}"]
    2  = Deploying the Kubernetes Image Puller using Helm
    3  
    .
    8  * The `helm` binary
    9  
   10: ifeval::["{project-context}" == "che"]
   11  * An OpenShift or Kubernetes cluster to install to
   12  * The `oc` or the `kubectl` binary
   ..
   15  endif::[]
   16  
   17: ifeval::["{project-context}" != "che"]
   18  * An OpenShift cluster to install to
   19  * The `oc` binary
   ..
   23  
   24  .Parameters for installing with Helm
   25: [options="header"]
   26  |===
   27  |Value |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-openshift-templates.adoc:
    1: [id="deploying-the-kubernetes-image-puller-using-openshift-templates_{context}"]
    2  = Deploying the Kubernetes Image Puller using OpenShift templates
    3  
    .
   12  
   13  .Parameters for installing with OpenShift templates
   14: [options="header"]
   15  |===
   16  |Value |Usage |Default
   ..
   40  . Log into the OpenShift cluster and create a namespace to deploy the puller into:
   41  +
   42: [subs="+quotes"]
   43  ----
   44  $ oc login -u username -p password https://openshift-cluster-api:6443
   ..
   61  To set different values than the defaults, use:
   62  +
   63: [subs="+quotes"]
   64  ----
   65  $ oc process -p __<parameterName>__=__<value>__ -f deploy/openshift/__<template>__ | oc apply -f -

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-kubernetes.adoc:
    1  // deploying-the-registries
    2  
    3: [id="deploying-registries-in-kubernetes_{context}"]
    4  = Deploying registries in Kubernetes
    5  
    .
   10  . To deploy the plug-in registry using the Helm chart, run the following command:
   11  +
   12: [subs="+quotes,+attributes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__     <1>
   ..
   28  . The devfile registry also has a Helm chart in the `deploy/kubernetes/che-devfile-registry/` directory of the GitHub repository. To deploy it, run the command:
   29  +
   30: [subs="+quotes,+attributes"]
   31  ----
   32  NAMESPACE=__<namespace-name>__     <1>
   ..
   46  . The Helm chart creates a pod, a service, and an Ingress. To get them, use `app=che-plugin-registry` (or `app=che-plugin-registry` for the devfile registry).
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ kubectl get -o custom-columns=TYPE:.kind,NAME:.metadata.name \
   ..
   58  . To verify that the new plug-in is correctly published to the plug-in registry, make a request to the registry path `/v3/plugins/index.json` (or `/devfiles/index.json` for the devfile registry).
   59  +
   60: [subs="+quotes,+attributes"]
   61  ----
   62  $ URL=$(kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
   ..
   90  . Verify that the {prod-short} server points to the URL of the registry. To do this, compare the value of the `pass:[CHE_WORKSPACE_PLUGIN__REGISTRY__URL]` parameter in the `che` ConfigMap (or `pass:[CHE_WORKSPACE_DEVFILE__REGISTRY__URL]` for the devfile registry):
   91  +
   92: [subs="+quotes,+attributes"]
   93  ----
   94  $ kubectl get \
   ..
  101  with the URL of the Ingress:
  102  +
  103: [subs="+quotes,+attributes"]
  104  ----
  105  $ kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
  ...
  110  . If they do not match, update the ConfigMap and restart the {prod-short} server.
  111  +
  112: [subs="+quotes,+attributes"]
  113  ----
  114  $ kubectl edit cm/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-openshift.adoc:
    1  // deploying-the-registries
    2  
    3: [id="deploying-registries-in-openshift_{context}"]
    4  = Deploying registries in OpenShift
    5  
    .
   10  . To deploy the plug-in registry using the OpenShift template, run the following command:
   11  +
   12: [subs="+quotes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__  <1>
   ..
   25  . The devfile registry has an OpenShift template in the `deploy/openshift/` directory of the GitHub repository. To deploy it, run the command:
   26  +
   27: [subs="+quotes"]
   28  ----
   29  NAMESPACE=__<namespace-name>__  <1>
   ..
   39  
   40  . Check if the registries are deployed successfully on OpenShift.
   41: ifeval::["{project-context}" == "crw"]
   42  For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[Deploying registries in Kubernetes] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   43  endif::[]
   44: ifeval::["{project-context}" == "che"]
   45  The steps to check are similar to the Kubernetes steps. For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   46  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_detecting-memory-problems.adoc:
    1: [id="detecting-memory-problems_{context}"]
    2  = Detecting memory problems
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_developing-grafana-dashboards.adoc:
    1: [id="developing-grafana-dashboards_{context}"]
    2  = Developing Grafana dashboards
    3  
    .
   12  +
   13  .New Grafana dashboard: Queries to
   14: image::monitoring/monitoring-che-new-grafana-dashboard-queries.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-queries.png"]
   15  
   16  . In the *Visualisation* section, choose a metric to be shown in the following visual in the form of a graph, gauge, heatmap, or others.
   17  +
   18  .New Grafana dashboard: Visualization
   19: image::monitoring/monitoring-che-new-grafana-dashboard-visualization.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-visualization.png"]
   20  
   21  . Save changes to the dashboard by clicking the btn:[Save] button, and copy and paste the JSON code to the deployment.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_displaying-the-list-of-organization.adoc:
    5  :context: displaying-the-list-of-organizations
    6  
    7: [id="displaying-the-list-of-organizations_{context}"]
    8  = Displaying the list of organizations
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-and-exposing-che-metrics.adoc:
    1  // monitoring-che
    2  
    3: [id="enabling-and-exposing-{prod-id-short}-metrics_{context}"]
    4  = Enabling and exposing {prod-short} metrics
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-authentication-with-social-accounts-and-brokering.adoc:
    5  :context: enabling-authentication-with-social-accounts-and-brokering
    6  
    7: [id="enabling-authentication-with-social-accounts-and-brokering_{context}"]
    8  = Enabling authentication with social accounts and brokering
    9  
   ..
   18  . Set store tokens and stored tokens readable to *ON*.
   19  +
   20: image::git/kc_provider.png[link="{imagesdir}/git/kc_provider.png"]
   21  
   22  . Add a default read-token role.
   23  +
   24: image::git/kc_roles.png[link="{imagesdir}/git/kc_roles.png"]
   25  
   26  This is the default `delegated` OAuth service mode for multi-user {prod-short}. You can configure the OAuth service mode with the property `che.oauth.service_mode`.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-che-metrics-collections.adoc:
    1  // tracing-che
    2  
    3: [id="enabling-{prod-id-short}-metrics-collections_{context}"]
    4  = Enabling {prod-short} metrics collections
    5  
    .
   12  For Jaeger tracing to work, enable the following environment variables in your {prod-short} deployment:
   13  
   14: [source,bash,subs="+quotes,+attributes"]
   15  ----
   16  # Activating {prod-short} tracing modules

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-the-label-switched-protocol-lsp-tracing.adoc:
    1: [id="enabling-the-label-switched-protocol-lsp-tracing_{context}"]
    2  = Enabling the label switched protocol (LSP) tracing
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-xml-language-server-protocol-lsp-tracing.adoc:
    1: [id="enabling-xml-language-server-protocol-lsp-tracing_{context}"]
    2  = Enabling XML Language Server Protocol (LSP) tracing
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-yaml-language-server-protocol-lsp-tracing.adoc:
    1: [id="enabling-yaml-language-server-protocol-lsp-tracing_{context}"]
    2  = Enabling YAML Language Server Protocol (LSP) tracing
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_extending-che-monitoring-metrics.adoc:
    1: [id="extending-{prod-id-short}-monitoring-metrics_{context}"]
    2  = Extending {prod-short} monitoring metrics
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_finding-the-gopath.adoc:
    1: [id="finding-the-gopath_{context}"]
    2  = Finding the gopath
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_including-the-plug-in-binaries-in-the-registry-image.adoc:
    9  ---
   10  
   11: [id="including-the-plug-in-binaries-in-the-registry-image_{context}"]
   12  = Including the plug-in binaries in the registry image
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_installing-jaeger-locally-using-a-pre-built-container-image.adoc:
    1  // installing-the-jaeger-tracing-tool
    2  
    3: [id="installing-jaeger-locally-using-a-pre-built-container-image_{context}"]
    4  = Installing Jaeger locally using a pre-built container image
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_installing-jaeger-using-operatorhub-on-openshift-4.adoc:
    1  // installing-the-jaeger-tracing-tool
    2  
    3: [id="installing-jaeger-using-operatorhub-on-openshift-4_{context}"]
    4  = Installing Jaeger using OperatorHub on OpenShift 4
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_installing-the-jaeger-tracing-tool-for-che-on-openshift-4.adoc:
    1  // installing-the-jaeger-tracing-tool
    2  
    3: [id="installing-the-jaeger-tracing-tool-for-{prod-id-short}-on-openshift-4_{context}"]
    4  = Installing the Jaeger tracing tool for {prod-short} on OpenShift 4
    5  
    .
   15  . In the {prod-short} installation namespace of the {ocp} cluster,  use the `oc` client to create a new application for the Jaeger deployment.
   16  +
   17: [subs="+quotes,attributes"]
   18  ----
   19  $ oc new-app -f / ${CHE_LOCAL_GIT_REPO}/deploy/openshift/templates/jaeger-all-in-one-template.yml:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_leaving-an-organization-or-sub-organization.adoc:
    5  :context: leaving-an-organization-or-sub-organization
    6  
    7: [id="leaving-an-organization-or-sub-organization_{context}"]
    8  = Leaving an organization or sub-organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_listing-che-permissions.adoc:
    3  // authorizing-users
    4  
    5: [id="listing-{prod-id-short}-permissions_{context}"]
    6  = Listing {prod-short} permissions
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_logging-the-client-server-traffic-for-debug-adapters.adoc:
    1: [id="logging-the-client-server-traffic-for-debug-adapters_{context}"]
    2  = Logging the client-server traffic for debug adapters
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_logging-the-intelephense-client-server-communication.adoc:
    1: [id="logging-the-intelephense-client-server-communication_{context}"]
    2  = Logging the Intelephense client-server communication
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_logging-the-java-language-server-protocol-lsp-messages.adoc:
    1: [id="logging-the-java-language-server-protocol-lsp-messages_{context}"]
    2  = Logging the Java language server protocol (LSP) messages
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_managing-limits.adoc:
    5  :context: managing-limits
    6  
    7: [id="managing-limits_{context}"]
    8  = Managing limits
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_managing-users-using-keycloak.adoc:
    3  // assembly_configuring-authorization.adoc
    4  
    5: [id="managing-users-using-keycloak_{context}"]
    6  = Managing users using Keycloak
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_removing-organization-and-sub-organization-members.adoc:
    5  :context: removing-organization-and-sub-organization-members
    6  
    7: [id="removing-organization-and-sub-organization-members_{context}"]
    8  = Removing members from an organization and sub-organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_renaming-an-organization-or-sub-organization.adoc:
    6  
    7  
    8: [id="renaming-an-organization-or-sub-organization_{context}"]
    9  = Renaming an organization or sub-organization
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_setting-up-user-federation.adoc:
    5  :context: setting-up-user-federation
    6  
    7: [id="setting-up-user-federation_{context}"]
    8  = Setting up user federation
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_sharing-che-permissions.adoc:
    3  // authorizing-users
    4  
    5: [id="sharing-{prod-id-short}-permissions_{context}"]
    6  = Sharing {prod-short} permissions
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_updating-organization-and-sub-organization-member-roles.adoc:
    5  :context: updating-organization-and-sub-organization-member-roles
    6  
    7: [id="updating-organization-and-sub-organization-member-roles_{context}"]
    8  = Updating organization and sub-organization member roles
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_using-protocol-based-providers.adoc:
    5  :context: using-protocol-based-providers
    6  
    7: [id="using-protocol-based-providers_{context}"]
    8  == Using protocol-based providers
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_using-swagger-or-rest-clients-to-execute-queries.adoc:
    3  // user-authentication
    4  
    5: [id="using-swagger-or-rest-clients-to-execute-queries_{context}"]
    6  = Using Swagger or REST clients to execute queries
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-eclipse-jdt-language-server-features.adoc:
    1: [id="verifying-the-eclipse-jdt-language-server-features_{context}"]
    2  = Verifying the Eclipse JDT Language Server features
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-state-of-the-camel-language-server.adoc:
    1: [id="verifying-the-state-of-the-camel-language-server_{context}"]
    2  = Verifying the state of the Camel language server
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-state-of-the-eclipse-jdt-language-server.adoc:
    1: [id="verifying-the-state-of-the-eclipse-jdt-language-server_{context}"]
    2  = Verifying the state of the Eclipse JDT Language Server
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-state-of-the-netcoredebugoutput-plug-in.adoc:
    1: [id="verifying-the-state-of-the-netcoredebugoutput-plug-in_{context}"]
    2  = Verifying the state of the NetcoredebugOutput plug-in
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-state-of-the-omnisharp-theia-plug-in-language-server.adoc:
    1: [id="verifying-the-state-of-the-omnisharp-theia-plug-in-language-server_{context}"]
    2  = Verifying the state of the Omnisharp-Theia plug-in language server
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-state-of-the-xml-language-server.adoc:
    1: [id="verifying-the-state-of-the-xml-language-server_{context}"]
    2  = Verifying the state of the XML language server
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_verifying-the-state-of-the-yaml-language-server.adoc:
    1: [id="verifying-the-state-of-the-yaml-language-server_{context}"]
    2  = Verifying the state of the YAML language server
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-camel-logs-in-the-output-panel.adoc:
    1: [id="viewing-camel-logs-in-the-output-panel_{context}"]
    2  = Viewing Camel logs in the Output panel
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-metrics-on-grafana-dashboards.adoc:
    1: [id="viewing-{prod-id-short}-metrics-on-grafana-dashboards_{context}"]
    2  = Viewing {prod-short} metrics on Grafana dashboards
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-server-logs-in-the-web-console.adoc:
    3  // viewing-che-server-logs
    4  
    5: [id="viewing-{prod-id-short}-server-logs-in-the-web-console_{context}"]
    6  = Viewing the {prod-short} server logs in the web console
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-server-logs-on-the-cli.adoc:
    1  // viewing-che-server-logs
    2  
    3: [id="viewing-{prod-id-short}-server-logs-on-the-cli_{context}"]
    4  = Viewing the {prod-short} server logs using the OpenShift CLI
    5  
    .
   15  +
   16  .Example
   17: [subs="+attributes"]
   18  ----
   19  $ oc get pods
   ..
   24  . To get the logs for a deployment, run the following command:
   25  +
   26: [subs="+quotes"]
   27  ----
   28  $ oc logs _<name-of-pod>_
   ..
   30  +
   31  .Example
   32: [subs="+attributes"]
   33  ----
   34  $ oc logs {prod-deployment}-11-j4w2b

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-theia-ide-logs-in-the-web-console.adoc:
    1: [id="viewing-che-theia-ide-logs-in-the-web-console_{context}"]
    2  = Viewing Che-Theia IDE logs in the web console
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-theia-ide-logs-on-the-cli.adoc:
    1: [id="viewing-che-theia-ide-logs-on-the-cli_{context}"]
    2  = Viewing Che-Theia editor logs using the OpenShift CLI
    3  
    .
    6  .Prerequisites
    7  
    8: ifeval::["{project-context}" == "che"]
    9  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{site-baseurl}che-7/installing-che-on-openshift-4-from-operatorhub/#viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools_installing-che-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   10  endif::[]
   11: ifeval::["{project-context}" == "crw"]
   12  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{prod-ig-url}installing-{prod-id-short}-on-ocp-4_crw#viewing-the-state-of-the-{prod-id-short}-cluster-deployment-using-openshift-4-cli-tools_installing-{prod-id-short}-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   13  endif::[]
   ..
   49  . Get logs from the `theia/ide` container:
   50  +
   51: [subs="+quotes"]
   52  ----
   53  $ oc logs --follow _<name-of-pod>_ --container _<name-of-container>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-traces-in-jaeger-ui.adoc:
    1: [id="viewing-{prod-id-short}-traces-in-jaeger-ui_{context}"]
    2  = Viewing {prod-short} traces in Jaeger UI
    3  
    .
   13  +
   14  .Using Jaeger UI to trace {prod-short}
   15: image::tracing/trace-search.png[link="{imagesdir}/tracing/trace-search.png"]
   16  
   17  . Select the trace to expand it and show the tree of nested spans, as well as additional information about the highlighted span, such as tags or durations.
   18  +
   19  .Expanded tracing tree
   20: image::tracing/trace-tree-expanded.png[link="{imagesdir}/tracing/trace-tree-expanded.png"]
   21  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-chectl-logs.adoc:
    1: [id="viewing-{prod-cli}-logs_{context}"]
    2  = Viewing {prod-cli} logs
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-debug-console-log-for-go.adoc:
    1: [id="viewing-debug-console-log-for-go_{context}"]
    2  = Viewing the Debug Console log for Go
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-go-logs-output-in-the-output-panel.adoc:
    1: [id="viewing-go-logs-output-in-the-output-panel_{context}"]
    2  = Viewing the Go logs output in the Output panel
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-grafana-logs.adoc:
    1: [id="viewing-grafana-logs_{context}"]
    2  = Viewing the Grafana logs
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-intelephense-events-in-the-output-panel.adoc:
    1: [id="viewing-intelephense-events-in-the-output-panel_{context}"]
    2  = Viewing Intelephense events in the Output panel
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-java-language-server-log.adoc:
    1: [id="viewing-java-language-server-log_{context}"]
    2  = Viewing the Java language server log
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-keycloak-client-logs-on-firefox.adoc:
    1: [id="viewing-keycloak-client-logs-on-firefox_{context}"]
    2  = Viewing the Keycloak client logs on Firefox
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-keycloak-client-logs-on-google-chrome.adoc:
    1: [id="viewing-keycloak-client-logs-on-google-chrome_{context}"]
    2  = Viewing the Keycloak client logs on Google Chrome
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-keycloak-server-logs.adoc:
    1  :page-liquid:
    2  
    3: [id="viewing-keycloak-server-logs_{context}"]
    4  = Viewing the Keycloak server logs
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-kubernetes-events.adoc:
    9  ---
   10  
   11: [id="viewing-kubernetes-events_{context}"]
   12  = Accessing Kubernetes events on OpenShift
   13  
   ..
   29  ////
   30  +
   31: image::logs/kubernetes-events.png[link="{imagesdir}/logs/kubernetes-events.png"]
   32  ////
   33  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-logs-for-php-debug.adoc:
    1: [id="viewing-logs-for-php-debug"]
    2  = Viewing logs for PHP-Debug
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-logs-for-python.adoc:
    1: [id="viewing-logs-for-python_{context}"]
    2  = Viewing logs for Python
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-logs-for-the-nodedebug-nodedebug2-adapter.adoc:
    1: [id="viewing-logs-for-the-nodedebug-nodedebug2-adapter_{context}"]
    2  = Viewing logs for the NodeDebug NodeDebug2 adapter
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-netcoredebugoutput-plug-in-logs-in-the-output-panel.adoc:
    1: [id="viewing-netcoredebugoutput-plug-in-logs-in-the-output-panel_{context}"]
    2  = Viewing NetcoredebugOutput plug-in logs in the Output panel
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-omnisharp-theia-plug-in-logs-in-the-output-panel.adoc:
    1: [id="viewing-omnisharp-theia-plug-in-logs-in-the-output-panel_{context}"]
    2  = Viewing Omnisharp-Theia plug-in logs in the Output panel
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-plug-in-broker-logs.adoc:
   10  
   11  
   12: [id="viewing-plug-in-broker-logs_{context}"]
   13  = Viewing the plug-in broker logs
   14  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-postgresql-server-logs.adoc:
    1  :page-liquid:
    2  
    3: [id="viewing-postgresql-server-logs_{context}"]
    4  = Viewing the PostgreSQL server logs
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-prometheus-logs.adoc:
    1: [id="viewing-prometheus-logs_{context}"]
    2  = Viewing the Prometheus logs
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-typescript-language-server-log.adoc:
    1: [id="viewing-typescript-language-server-log_{context}"]
    2  = Viewing the Typescript language server log
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-typescript-logs-output-in-the-output-panel.adoc:
    1: [id="viewing-typescript-logs-output-in-the-output-panel_{context}"]
    2  = Viewing the Typescript logs output in the Output panel
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-xml-language-server-log.adoc:
    1: [id="viewing-xml-language-server-log_{context}"]
    2  = Viewing the XML language server log
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_che-tracing-codebase-overview-and-extension-guide.adoc:
    1: [id="{prod-id-short}-tracing-codebase-overview-and-extension-guide_{context}"]
    2  = {prod-short} tracing codebase overview and extension guide
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_configuring-system-variables.adoc:
   10  
   11  
   12: [id="configuring-system-variables"]
   13  = Configuring system properties for {prod-short}
   14  
   ..
   20  .Example of changing the default value of `+++CHE_WORKSPACE_DEFAULT__MEMORY__LIMIT__MB+++` to 2048:
   21  
   22: [source,yaml,subs="+attributes"]
   23  ----
   24  include::examples/changing-system-variables.yaml[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_creating-a-bug-report.adoc:
    1: [id="creating-a-bug-report_{context}"]
    2  = Creating a bug report
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_grafana-dashboards-for-che.adoc:
    1: [id="grafana-dashboards-for-{prod-id-short}_{context}"]
    2  = Grafana dashboards for {prod-short}
    3  
    .
   10  
   11  .The *Workspaces* panel
   12: image::monitoring/monitoring-che-che-server-dashboard-workspace-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-panel.png"]
   13  
   14  * *Workspace start rate* -- the ratio between successful and failed started workspaces
   ..
   24  
   25  .The *Users* panel
   26: image::monitoring/monitoring-che-che-server-dashboard-users-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-users-panel.png"]
   27  
   28  * *Number of Users* -- the number of users known to {prod-short} over time
   ..
   30  
   31  .The *Tomcat* panel
   32: image::monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png"]
   33  
   34  * *Max number of active sessions* -- the max number of active sessions that have been active at the same time
   ..
   40  
   41  .The *Request* panel
   42: image::monitoring/monitoring-che-che-server-dashboard-requests-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-requests-panel.png"]
   43  
   44  The *Requests* panel displays HTTP requests in a graph that shows the average number of requests per minute.
   45  
   46  .The *Executors* panel, part 1
   47: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png"]
   48  
   49  * *Threads running* - the number of threads that are not terminated aka alive. May include threads that are in a waiting or blocked state. 
   ..
   53  
   54  .The *Executors* panel, part 2
   55: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png"]
   56  
   57  * *Executor threads active* - number of threads that actively execute tasks.
   ..
   61  
   62  .The *Executors* panel, part 3
   63: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png"]
   64  
   65  * *Rejected task* - the number of tasks that were rejected from execution.
   ..
   69  
   70  .The *Executors* panel, part 4
   71: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png"]
   72  
   73  * *Task execution seconds max* - 5min moving maximum of task execution
   ..
   77  
   78  .The *Traces* panel, part 1
   79: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png"]
   80  
   81  * *Workspace start Max* - maximum workspace start time
   ..
   85  
   86  .The *Traces* panel, part 2
   87: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png"]
   88  
   89  * *OpenShiftInternalRuntime#start Max* - maximum time of OpenShiftInternalRuntime#start operation
   ..
   93  
   94  .The *Traces* panel, part 3
   95: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png"]
   96  
   97  * *OpenShiftEnvironmentProvisioner#provision Max* - maximum time of OpenShiftEnvironmentProvisioner#provision operation
   ..
  101  
  102  .The *Traces* panel, part 4
  103: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png"]
  104  
  105  * *WaitMachinesStart Max* - maximim time of WaitMachinesStart operations
  ...
  109  
  110  .The *Workspace detailed* panel
  111: image::monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png"]
  112  
  113  The *Workspace Detailed* panel contains heat maps, which illustrate the average time of workspace starts or fails. The row shows some period of time.
  ...
  119  
  120  .{prod-short} server JVM dashboard
  121: image::monitoring/monitoring-che-che-server-jvm-dashboard.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard.png"]
  122  
  123  .Quick Facts
  124: image::monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png"]
  125  
  126  .JVM Memory
  127: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png"]
  128  
  129  .JVM Misc
  130: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png"]
  131  
  132  .JVM Memory Pools (heap)
  133: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png"]
  134  
  135  .JVM Memory Pools (Non-Heap)
  136: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png"]
  137  
  138  .Garbage Collection
  139: image::monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png"]
  140  
  141  .Classloading
  142: image::monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png"]
  143  
  144  .Buffer Pools
  145: image::monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png"]
  146  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_managesystem-permission.adoc:
    3  // user-authorization
    4  
    5: [id="managesystem-permission_{context}"]
    6  = manageSystem permission
    7  
    8  Users with the *manageSystem* permission have access to the following services:
    9  
   10: [options="header"]
   11  |====
   12  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_monitorsystem-permission.adoc:
    4  
    5  
    6: [id="monitorsystem-permission_{context}"]
    7  = monitorSystem permission
    8  
    9  Users with the *monitorSystem* permission have access to the following services.
   10  
   11: [options="header"]
   12  |====
   13  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_netcoredebugoutput-plug-in.adoc:
    1: [id="netcoredebugoutput-plug-in_{context}"]
    2  = NetcoredebugOutput plug-in
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_omnisharp-theia-plug-in.adoc:
    1: [id="omnisharp-theia-plug-in_{context}"]
    2  = Omnisharp-Theia plug-in
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\examples\che-devfile-meta.yml:
    1  displayName: Rust
    2  description: Rust Stack with Rust 1.39
    3: tags: ["Rust"]
    4  icon: https://www.eclipse.org/che/images/logo-eclipseche.svg
    5  globalMemoryLimit: 1686Mi

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_branding-che-theia.adoc:
   12  :parent-context-of-branding-che-theia: {context}
   13  
   14: [id="branding-che-theia"]
   15  = Branding Che-Theia
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_che-extensibility-reference.adoc:
   12  :parent-context-of-che-extensibility-reference: {context}
   13  
   14: [id="{prod-id-short}-extensibility-reference"]
   15  = {prod-short} extensibility reference
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_developing-che-theia-plug-ins.adoc:
   12  :parent-context-of-developing-che-theia-plug-ins: {context}
   13  
   14: [id="developing-che-theia-plug-ins"]
   15  = Developing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_publishing-che-theia-plug-ins.adoc:
   12  :parent-context-of-publishing-che-theia-plug-ins: {context}
   13  
   14: [id="publishing-che-theia-plug-ins"]
   15  = Publishing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_setup-che-in-tls-mode-with-self-signed-certificate.adoc:
   12  :parent-context-of-setup-che-in-tls-mode: {context}
   13  
   14: [id="setup-{prod-id-short}-in-tls-mode_{context}"]
   15  = Setup {prod-short} in TLS mode with self-signed certificates
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_testing-che-theia-plug-ins.adoc:
   12  :parent-context-of-testing-che-theia-plug-ins: {context}
   13  
   14: [id="testing-che-theia-plug-ins"]
   15  = Testing Che-Theia plug-ins
   16  
   ..
   42  When you run a hosted instance, the main Che-Theia instance opens the *Output* view. This view contains all the output from the `yarn` backend process. It also contains the output of the backend plug-in that is being developed.
   43  
   44: image::extensibility/hosted-instance-output.png[link="{imagesdir}/extensibility/hosted-instance-output.png"]
   45  
   46  == Controlling a hosted Che-Theia instance
   ..
   59  Your plug-in will handle the opening of a document and displaying a notification message when the document is opened.
   60  
   61: image:extensibility/code-completion-example.gif[link="{imagesdir}/extensibility/code-completion-example.gif"]
   62  ====
   63  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\con_che-extension-points.adoc:
    9  ---
   10  
   11: [id="{prod-id-short}-extension-points_{context}"]
   12  = {prod-short} extension points
   13  
   ..
   17  
   18  
   19: [id="syntax-highlighting-grammars_{context}"]
   20  == Syntax-highlighting grammars
   21  
   ..
   40  
   41  
   42: [id="preferences-configuration_{context}"]
   43  == Preferences (configuration)
   44  
   ..
  109  
  110  
  111: [id="view-containers_{context}"]
  112  == View containers
  113  
  ...
  146  
  147  
  148: [id="views_{context}"]
  149  == Views
  150  
  ...
  185  
  186  
  187: [id="menus_{context}"]
  188  == Menus
  189  
  ...
  227  
  228  
  229: [id="key-bindings_{context}"]
  230  == Key bindings
  231  
  ...
  254  
  255  
  256: [id="debuggers_{context}"]
  257  == Debuggers
  258  
  ...
  264  
  265  
  266: [id="languages-language-servers_{context}"]
  267  == Languages (language servers)
  268  
  ...
  319  
  320  
  321: [id="web-view-api_{context}"]
  322  == Web view API
  323  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\con_che-theia-plug-in-development-flow.adoc:
    1: [id="che-theia-plug-in-development-flow_{context}"]
    2  = Che-Theia plug-in development flow
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\con_che-theia-plug-in-registries.adoc:
    1: [id="che-theia-plug-in-registries_{context}"]
    2  = Che-Theia plug-in registries
    3  
    .
   52  
   53  
   54: [id="official-plug-in-registry_{context}"]
   55  == Official plug-in registry
   56  
   ..
   60  
   61  
   62: [id="custom-plug-in-registries_{context}"]
   63  == Custom plug-in registries
   64  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-a-che-theia-plug-in-into-a-workspace.adoc:
    1: [id="adding-a-che-theia-plug-in-into-a-workspace_{context}"]
    2  = Adding a Che-Theia plug-in into a workspace
    3  
    .
    9  
   10  
   11: [id="adding-a-plug-in-through-the-dashboard_{context}"]
   12  == Adding a plug-in through the dashboard
   13  
   ..
   17  +
   18  .Adding plug-ins through the dashboard
   19: image::extensibility/adding-plug-ins-in-dashboard.png[link="{imagesdir}/extensibility/adding-plug-ins-in-dashboard.png"]
   20  
   21  
   22: [id="adding-a-plug-in-by-configuring-a-workspace_{context}"]
   23  == Adding a plug-in by configuring a devfile
   24  
   ..
   30  +
   31  .Adding plug-ins by configuring a component
   32: image::extensibility/adding-plug-ins-in-workspace-devfile.png[link="{imagesdir}/extensibility/adding-plug-ins-in-workspace-devfile.png"]
   33  
   34  +
   ..
   48  
   49  
   50: [id="adding-a-plug-in-at-runtime_{context}"]
   51  == Adding a plug-in at runtime
   52  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-a-che-theia-plug-in-to-the-che-plug-in-registry.adoc:
    1: [id="adding-a-che-theia-plug-in-to-the-{prod-id-short}-plug-in-registry_{context}"]
    2  = Adding a Che-Theia plug-in to the {prod-short} plug-in registry
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-support-for-a-new-debugger.adoc:
    9  ---
   10  
   11: [id="adding-support-for-a-new-debugger"]
   12  = Adding support for a new debugger
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-support-for-a-new-language.adoc:
    9  ---
   10  
   11: [id="adding-support-for-a-new-language_{context}"]
   12  = Adding support for a new language
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_bootstrapping-che-theia-plug-in-development-with-yeoman.adoc:
    1: [id="bootstrapping-che-theia-plug-in-development-with-yeoman_{context}"]
    2  = Bootstrapping a Che-Theia plug-in development with Yeoman
    3  
    .
    8  
    9  
   10: [id="list-of-available-plug-in-samples_{context}"]
   11  == List of available plug-in samples
   12  
   ..
   28  
   29  
   30: [id="generating-plug-ins-overview_{context}"]
   31  == Overview of generating plug-ins
   32  
   ..
   48  
   49  
   50: [id="installing-the-plug-in-generator_{context}"]
   51  == Installing the plug-in generator
   52  
   ..
   66  
   67  
   68: [id="generating-a-new-plug-in-in-the-console_{context}"]
   69  == Generating a new plug-in in the console
   70  
   ..
   77  Alternatively, run `yo` without any parameters and select the `@theia/plugin` generator from the list of available generators.
   78  +
   79: image::extensibility/yo-select-plug-in-generator.png[link="{imagesdir}/extensibility/yo-select-plug-in-generator.png"]
   80  
   81  . Enter the information to configure the plug-in. For example:
   82  +
   83: image::extensibility/launching-console-plug-in-generator.png[link="{imagesdir}/extensibility/launching-console-plug-in-generator.png"]
   84  
   85  When the plug-in is generated, it appears in the *Files* panel. The sample is already compiled and contains the plug-in binary. In this example, the plug-in binary is named `my_first_plugin.theia`.
   86  
   87  
   88: [id="generating-a-new-plug-in-using-the-yeoman-wizard_{context}"]
   89  == Generating a new plug-in using the Yeoman wizard
   90  
   ..
   95  . Type `Yeom` to filter the commands. Select the `Yeoman Wizard` command.
   96  +
   97: image::extensibility/yeoman-wizard-launching.png[link="{imagesdir}/extensibility/yeoman-wizard-launching.png"]
   98  +
   99  Note that launching the wizard may take a few seconds.
  ...
  101  . Enter the new project name.
  102  +
  103: image::extensibility/yeoman-wizard-choosing-plug-in-name.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-name.png"]
  104  
  105  . Select the desired plug-in type (client-side or server-side).
  106  +
  107: image::extensibility/yeoman-wizard-choosing-plug-in-type.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-type.png"]
  108  
  109  . Select the plug-in sample to use.
  110  +
  111: image::extensibility/yeoman-wizard-choosing-plug-in-sample.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-sample.png"]
  112  
  113  When the plug-in is generated, the *Yeoman wizard* displays a notification.
  114  
  115: image::extensibility/yeoman-wizard-plug-in-generated.png[link="{imagesdir}/extensibility/yeoman-wizard-plug-in-generated.png"]
  116  
  117  The plug-in sample displays in the *Files* panel. Use the *Output* tab in the botton panel to access logs for plug-in generation.
  118  
  119: image::extensibility/yeoman-wizard-logs.png[link="{imagesdir}/extensibility/yeoman-wizard-logs.png"]
  120  
  121  NOTE: The *Yeoman wizard* only works when a workspace is opened in Che-Theia.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_building-a-che-theia-container-image-with-custom-branding.adoc:
    1: [id="building-a-che-theia-container-image-with-custom-branding_{context}"]
    2  = Building a Che-Theia container image with custom branding
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_che-usage-with-tls.adoc:
    1: [id="{prod-id-short}-usage-with-tls_{context}"]
    2  = {prod-short} usage with TLS
    3  
    .
   10  
   11  +
   12: image::contributor/che-tls-chrome-import_1.png[link="{imagesdir}/contributor/che-tls-chrome-import_1.png"]
   13  
   14  . Select `Trust this certificate for identifying websites` and click OK.
   15  
   16  +
   17: image::contributor/che-tls-chrome-import_2.png[link="{imagesdir}/contributor/che-tls-chrome-import_2.png"]
   18  
   19  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   20  
   21  +
   22: image::contributor/che-tls-chrome-import_3.png[link="{imagesdir}/contributor/che-tls-chrome-import_3.png"]
   23  
   24  
   ..
   29  
   30  +
   31: image::contributor/che-tls-firefox-import_1.png[link="{imagesdir}/contributor/che-tls-firefox-import_1.png"]
   32  
   33  . Go to `Authorities` tab, click `Import` and find your generated `rootCA.crt` (or `ca.crt` for OpenShift 4) file.
   34  
   35  +
   36: image::contributor/che-tls-firefox-import_2.png[link="{imagesdir}/contributor/che-tls-firefox-import_2.png"]
   37  
   38  . Select `Trust this CA to identify websites` and click OK.
   39  
   40  +
   41: image::contributor/che-tls-firefox-import_3.png[link="{imagesdir}/contributor/che-tls-firefox-import_3.png"]
   42  
   43  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   44  
   45  +
   46: image::contributor/che-tls-firefox-import_4.png[link="{imagesdir}/contributor/che-tls-firefox-import_4.png"]
   47  
   48  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_defining-custom-branding-values-for-che-theia.adoc:
    1: [id="defining-custom-branding-values-for-che-theia_{context}"]
    2  = Defining custom branding values for Che-Theia
    3  
    .
    8  Create a `product.json` file with a new name of the product, logo, description, and list of hyperlinks on the *Welcome* page (an example of link:https://github.com/che-samples/che-theia-branding-example/blob/master/branding/product.json[`product.json`]:
    9  
   10: [source,json,attrs="nowrap"]
   11  ----
   12  {
   ..
   19      "welcome": {                             <4>
   20          "title": "Welcome to Your Workspace",
   21:         "links": ["website", "documentation"]
   22      },
   23      "links": {                               <5>
   ..
   43  To use only one logo image for both dark and light themes:
   44  
   45: [source,json,attrs="nowrap"]
   46  ----
   47  {

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-kubernetes.adoc:
    1: [id="deploy-{prod-id-short}-with-self-signed-tls-on-kubernetes_{context}"]
    2  = Deploy {prod-short} with self signed TLS certificates on Kubernetes
    3  
    .
   18  
   19  +
   20: [subs="+quotes"]
   21  ----
   22  $ kubectl create namespace che
   ..
   27  
   28  +
   29: [subs="+quotes"]
   30  ----
   31  $ kubectl create secret tls che-tls --key=domain.key --cert=domain.crt -n che
   ..
   36  
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ cp rootCA.crt ca.crt
   ..
   46  
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ {prod-cli} server:start --platform=minikube --installer=helm --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift-using-operator.adoc:
    1: [id="deploy-{prod-id-short}-with-self-signed-tls-on-openshift-using-operator_{context}"]
    2  = Deploy {prod-short} with self signed TLS certificates on OpenShift using operator
    3  
    .
   17  
   18  +
   19: [subs="+quotes"]
   20  ----
   21  $ oc login -u system:admin --insecure-skip-tls-verify=true
   ..
   27  
   28  +
   29: [subs="+quotes,+attributes"]
   30  ----
   31  $ oc delete secret router-certs
   ..
   38  
   39  +
   40: [subs="+quotes,+attributes"]
   41  ----
   42  $ oc create namespace che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ cp rootCA.crt ca.crt
   ..
   57  
   58  +
   59: [subs="+quotes,+attributes"]
   60  ----
   61  $ {prod-cli} server:start --platform=minishift --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift4-using-operator.adoc:
    1: [id="deploy-{prod-id-short}-with-self-signed-tls-on-openshift4-using-operator_{context}"]
    2  = Deploy {prod-short} with self signed TLS certificates on OpenShift 4 using operator
    3  
    .
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  $ oc login -u kubeadmin -p <password>
   ..
   20  
   21  +
   22: [subs="+quotes"]
   23  ----
   24  $ oc get secret router-ca -n openshift-ingress-operator -o jsonpath="{.data.tls\.crt}" | base64 -d > ca.crt
   ..
   29  
   30  +
   31: [subs="+quotes"]
   32  ----
   33  $ oc create namespace che
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ oc create secret generic self-signed-certificate --from-file=ca.crt -n=che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ {prod-cli} server:start --platform=crc --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_developing-che-theia-plug-ins-using-che.adoc:
    1: [id="developing-che-theia-plug-ins-using-che_{context}"]
    2  = Developing a Che-Theia plug-in using {prod-short}
    3  
    .
   13  +
   14  .Adding a workspace
   15: image::extensibility/adding-workspace.png[link="{imagesdir}/extensibility/adding-workspace.png"]
   16  
   17  . Select the *{prod-short} {prod-ver} Dev* stack, and click the btn:[CREATE & OPEN] button.
   18  +
   19  .Choosing the '{prod-short} {prod-ver} Dev' stack
   20: image::extensibility/choosing-che-7-dev-stack.png[link="{imagesdir}/extensibility/choosing-che-7-dev-stack.png"]
   21  
   22  . *Generate a plug-in scaffold.* The workspace created from this stack provides an easy way to scaffold a new plug-in. When the workspace is started and fully ready, execute the *Yeoman Wizard* from the command palette:
   ..
   25  +
   26  .Launching the Yeoman Wizard
   27: image::extensibility/launching-yeoman-wizard.png[link="{imagesdir}/extensibility/launching-yeoman-wizard.png"]
   28  +
   29  .. Fill in the following fields about the plug-in that you want to create: 
   ..
   36  +
   37  .Yeoman successfully generated a new plug-in
   38: image::extensibility/yeoman-successful.png[link="{imagesdir}/extensibility/yeoman-successful.png"]
   39  
   40  . Open the *Files* panel, to see the sources of the generated plug-in in the `src` directory.
   ..
   45  +
   46  .Opening a new terminal in the development container
   47: image::extensibility/open-terminal-in-container.png[link="{imagesdir}/extensibility/open-terminal-in-container.png"]
   48  +
   49  .. In the terminal, go to the plug-in directory, and run the `yarn` command:
   ..
   55  +
   56  .Building a Che-Theia plug-in using `yarn`
   57: image::extensibility/building-plug-in-using-yarn.png[link="{imagesdir}/extensibility/building-plug-in-using-yarn.png"]
   58  +
   59  NOTE: The plug-in generator automatically builds the plug-in after its generation.
   ..
   67  +
   68  .Running a Che-Theia plug-in in Hosted mode
   69: image::extensibility/running-plug-in-hosted-mode.gif[link="{imagesdir}/extensibility/running-plug-in-hosted-mode.gif"]
   70  
   71  . *Debug the plug-in.*
   ..
   78  +
   79  .Debugging a Che-Theia plug-in
   80: image::extensibility/debugging-plug-ins.gif[link="{imagesdir}/extensibility/debugging-plug-ins.gif"]
   81  +
   82  NOTE: When developing a frontend plug-in, debug it using your browser’s Developer Tools option.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_generating-self-signed-certificates.adoc:
    1: [id="generating-self-signed-certificates_{context}"]
    2  = Generating self-signed TLS certificates
    3  
    .
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  # default for minishift
   ..
   26  
   27  +
   28: [subs="+quotes"]
   29  ----
   30  # Fedora 31
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ CA_CN=eclipse-che-signer
   ..
   46  
   47  +
   48: [subs="+quotes"]
   49  ----
   50  # Example with minikube on Fedora 31
   ..
   62  
   63  +
   64: [subs="+quotes"]
   65  ----
   66  $ openssl genrsa -out rootCA.key 4096
   ..
   71  
   72  +
   73: [subs="+quotes"]
   74  ----
   75  $ openssl req -x509 \
   ..
   91  
   92  +
   93: [subs="+quotes"]
   94  ----
   95  $ openssl genrsa -out domain.key 2048
   ..
   99  
  100  +
  101: [subs="+quotes"]
  102  ----
  103  $ openssl req -new -sha256 \
  ...
  114  
  115  +
  116: [subs="+quotes"]
  117  ----
  118  $ openssl x509 \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_overriding-ram-of-a-che-theia-plug-in.adoc:
    1: [id="overriding-ram-of-a-che-theia-plug-in_{context}"]
    2  = Overriding RAM of a Che-Theia plug-in
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_packaging-a-visual-studio-code-plug-in-for-che.adoc:
    1: [id="packaging-a-visual-studio-code-plug-in-for-che_{context}"]
    2  = Packaging a Visual Studio Code plug-in for {prod-short}
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_sharing-access-to-a-workspace.adoc:
    1: [id="sharing-access-to-a-workspace_{context}"]
    2  = Sharing access to a workspace
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_sharing-your-che-theia-plug-in-with-a-factory.adoc:
    1: [id="sharing-your-che-theia-plug-in-with-a-factory_{context}"]
    2  = Sharing your Che-Theia plug-in with a factory
    3  
    .
    5  
    6  
    7: [id="sharing-a-factory-with-a-plug-in-development-environment_{context}"]
    8  == Sharing a factory with a plug-in development environment
    9  
   ..
   18  
   19  
   20: [id="sharing-a-factory-with-plug-in-configuration_{context}"]
   21  == Sharing a factory with plug-in configuration
   22  
   ..
   28  . Add the plug-in to the `workspace.attributes.plugins` field.
   29  +
   30: image::extensibility/sharing-plug-in-with-factory.png[link="{imagesdir}/extensibility/sharing-plug-in-with-factory.png"]
   31  
   32  . Share the factory link.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_testing-che-theia-with-custom-branding.adoc:
    1: [id="testing-che-theia-with-custom-branding_{context}"]
    2  = Testing Che-Theia with custom branding
    3  
    .
   18  . Create a workspace using the sample https://github.com/che-samples/che-theia-branding-example/blob/master/devfile.yaml[che-theia-branding-example devfile] to apply the changes:
   19  +
   20: image::https://che.openshift.io/factory/resources/factory-contribute.svg[link="https://che.openshift.io/f?url=https://raw.githubusercontent.com/che-samples/che-theia-branding-example/master/devfile.yaml"]
   21  +
   22: [source,yaml,attrs="nowrap"]
   23  ----
   24  metadata:
   ..
   41  * The dark theme of Che-Theia:
   42  +
   43: image::branding/welcome-dark.png[link="{imagesdir}/branding/welcome-dark.png"]
   44  +
   45: image::branding/about-dark.png[link="{imagesdir}/branding/about-dark.png"]
   46  
   47  * The light theme of Che-Theia:
   48  +
   49: image::branding/welcome-light.png[link="{imagesdir}/branding/welcome-light.png"]
   50  +
   51: image::branding/about-light.png[link="{imagesdir}/branding/about-light.png"]
   52  
   53  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\ref_che-theia-plug-in-api.adoc:
   10  
   11  
   12: [id="che-theia-plug-in-api_{context}"]
   13  = Che-Theia plug-in API
   14  
   15  The Che-Theia plug-in API consists of two namespaces:
   16  
   17: [options="header"]
   18  |===
   19  | Namespace | Description
   ..
   23  
   24  
   25: [id="theia-namespace_{context}"]
   26  == `theia` namespace
   27  
   ..
   41  
   42  
   43: [id="{prod-id-short}-namespace_{context}"]
   44  == `che` namespace
   45  
   ..
   58  
   59  
   60: [id="using-the-{prod-id-short}-namespace-in-plug-ins_{context}"]
   61  == Using the `che` namespace in plug-ins
   62  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\ref_debug-adapter-protocol.adoc:
    9  ---
   10  
   11: [id="debug-adapter-protocol_{context}"]
   12  = Debug Adapter Protocol
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\ref_language-server-protocol.adoc:
    9  ---
   10  
   11: [id="language-server-protocol_{context}"]
   12  = Language Server Protocol
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_adding-che-plug-in-registry-vs-code-extension-to-a-workspace.adoc:
    1  :parent-context-of-adding-che-plug-in-registry-vs-code-extension-to-a-workspace: {context}
    2  
    3: [id="adding-{prod-id-short}-plug-in-registry-vs-code-extension-to-a-workspace_{context}"]
    4  = Adding a plug-in registry VS Code extension to a workspace
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_adding-tools-to-che-after-creating-a-workspace.adoc:
   11  ifdef::context[:parent-context-of-adding-tools-to-che-after-creating-a-workspace: {context}]
   12  
   13: [id="adding-tools-to-{prod-id-short}-after-creating-a-workspace_{context}"]
   14  = Adding tools to {prod-short} after creating a workspace
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-ide-basics.adoc:
   12  :parent-context-of-che-theia-ide-basics: {context}
   13  
   14: [id="che-theia-ide-basics"]
   15  = Che-Theia IDE basics
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-remote-plugin-image.adoc:
    5  :parent-context-of-remote-plug-in-endpoint: {context}
    6  
    7: [id="remote-plug-in-endpoint_{context}"]
    8  = Remote plug-in endpoint
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-troubleshooting.adoc:
   11  :parent-context-of-che-theia-troubleshooting: {context}
   12  
   13: [id="che-theia-troubleshooting"]
   14  = Che-Theia Troubleshooting
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-a-workspace-using-a-devfile.adoc:
   12  :parent-context-of-configuring-a-workspace-using-a-devfile: {context}
   13  
   14: [id="configuring-a-workspace-using-a-devfile_{context}"]
   15  = Configuring a workspace using a devfile
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-github-oauth.adoc:
    9  ---
   10  
   11: [id="configuring-github-oauth_{context}"]
   12  = Configuring GitHub OAuth
   13  
   ..
   27  image::git/github_oauth.png[]
   28  
   29: ifeval::["{project-context}" == "che"]
   30  . On OpenShift or Kubernetes, update the deployment configuration (see link:{site-baseurl}che-7/openshift-config.html[OpenShift configuration]).
   31  +
   ..
   43  * Substitute `_<your-github-client-id>_` and `_<your-github-secret>_` with your GitHub client ID and secret.
   44  
   45: ifeval::["{project-context}" == "che"]
   46  * This configuration only applies to single-user deployments of {prod-short}.
   47  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-oauth-authorization.adoc:
   12  :parent-context-of-configuring-oauth-authorization: {context}
   13  
   14: [id="configuring-oauth-authorization"]
   15  = Configuring OAuth authorization
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-openshift-oauth.adoc:
    9  ---
   10  
   11: [id="configuring-openshift-oauth_{context}"]
   12  = Configuring OpenShift OAuth
   13  
   ..
   18  . Register {prod-short} OAuth client in OpenShift (see link:https://docs.openshift.com/container-platform/4.3/authentication/configuring-internal-oauth.html#oauth-register-additional-client_configuring-internal-oauth[Register an OAuth client in OpenShift]).
   19  +
   20: [subs="+quotes,+attributes"]
   21  ----
   22  $ oc create -f <(echo '

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-workspace-exposure-strategies.adoc:
   13  :parent-context-of-configuring-workspace-exposure-strategies: {context}
   14  
   15: [id="configuring-workspace-exposure-strategies_{context}"]
   16  = Configuring workspace exposure strategies
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_converting-a-che-6-workspace-to-a-che-7-devfile.adoc:
   15  :parent-context-of-converting-a-che-6-workspace-to-a-che-7-devfile: {context}
   16  
   17: [id="converting-a-{prod-id-short}-{prod-prev-ver}-workspace-to-a-{prod-id-short}-{prod-ver}-devfile"]
   18  = Converting a {prod-short} {prod-prev-ver} workspace to a {prod-short} {prod-ver} devfile
   19  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_creating-a-workspace-from-code-sample.adoc:
   12  :parent-context-of-creating-a-workspace-from-code-sample: {context}
   13  
   14: [id="creating-a-workspace-from-code-sample_{context}"]
   15  = Creating a workspace from code sample
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_creating-and-configuring-a-new-che-7-workspace.adoc:
   13  :parent-context-of-creating-and-configuring-a-new-che-7-workspace: {context}
   14  
   15: [id="creating-and-configuring-a-new-{prod-id-short}-{prod-ver}-workspace"]
   16  = Creating and configuring a new {prod-short} {prod-ver} workspace
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_customizing-developer-environments.adoc:
   12  :parent-context-of-customizing-developer-environments: {context}
   13  
   14: [id="customizing-developer-environments"]
   15  = Customizing developer environments
   16  
   ..
   28  
   29  .{prod-short} extensibility
   30: image::extensibility/extending-che.png[link="{imagesdir}/extensibility/extending-che.png"]
   31  
   32  Extending {prod} can be done entirely using {prod}. Since version 7, {prod} provides a self-hosting mode.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_defining-custom-commands-for-che-theia.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="defining-custom-commands-for-che-theia"]
   17  = Defining custom commands for Che-Theia
   18  
   ..
   46                  "options": {"cwd": "/projects/theia"},
   47                  "command": "yarn",
   48:                 "args": ["watch"]
   49                }
   50               ]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_importing-a-kubernetes-application-into-a-workspace.adoc:
   12  :parent-context-of-importing-a-kubernetes-application-into-a-workspace: {context}
   13  
   14: [id="importing-a-kubernetes-application-into-a-workspace"]
   15  = Importing a Kubernetes application into a workspace
   16  
   ..
   27  To run the application on a Kubernetes cluster:
   28  
   29: [subs="+attributes"]
   30  ----
   31  $ node=https://raw.githubusercontent.com/redhat-developer/devfile/master/samples/web-nodejs-with-db-sample/nodejs-app.yaml && \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_making-a-workspace-portable-using-a-devfile.adoc:
   12  :parent-context-of-making-a-workspace-portable-using-a-devfile: {context}
   13  
   14: [id="making-a-workspace-portable-using-a-devfile_{context}"]
   15  = Making a workspace portable using a devfile
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_navigating-che-using-the-dashboard.adoc:
   11  :parent-context-of-navigating-che-using-the-dashboard: {context}
   12  
   13: [id="navigating-{prod-id-short}-using-the-dashboard_{context}"]
   14  = Navigating {prod-short} using the Dashboard
   15  
   ..
   18  The *Dashboard* is accessible on your cluster from a URL like `http://__<che-instance>__.__<IP-address>__.nip.io/dashboard/`.
   19  This section describes how to access this URL on
   20: ifeval::["{project-context}" == "che"]
   21  Minishift and
   22  endif::[]
   23  OpenShift.
   24  
   25: ifeval::["{project-context}" == "che"]
   26  include::proc_navigating-che-using-the-dashboard-on-minishift.adoc[leveloffset=+1]
   27  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_publishing-a-vs-code-extension-into-the-che-plug-in-registry.adoc:
    1  :parent-context-of-publishing-a-vs-code-extension-into-the-che-plug-in-registry: {context}
    2  
    3: [id="publishing-a-vs-code-extension-into-the-{prod-id-short}-plug-in-registry_{context}"]
    4  = Publishing a VS Code extension into the {prod-short} plug-in registry
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_remotely-accessing-workspaces.adoc:
   11  :parent-context-of-remotely-accessing-workspaces: {context}
   12  
   13: [id="remotely-accessing-workspaces_{context}"]
   14  = Remotely accessing workspaces
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_running-an-existing-workspace-from-the-user-dashboard.adoc:
    1  :parent-context-of-running-an-existing-workspace-from-the-user-dashboard: {context}
    2  
    3: [id="running-an-existing-workspace-from-the-user-dashboard_{context}"]
    4  = Running an existing workspace from the User Dashboard
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_troubleshooting-for-che-end-users.adoc:
   12  :parent-context-of-troubleshooting-for-che-end-users: {context}
   13  
   14: [id="troubleshooting-for-{prod-id-short}-end-users_{context}"]
   15  = Troubleshooting for {prod-short} end users
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_using-a-visual-studio-code-extension-in-che.adoc:
   12  :parent-context-of-using-a-visual-studio-code-extension-in-che: {context}
   13  
   14: [id="using-a-visual-studio-code-extension-in-{prod-id-short}"]
   15  = Using a Visual Studio Code extension in {prod-short}
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_using-alternative-ides-in-che.adoc:
   12  :parent-context-of-using-alternative-ides-in-che: {context}
   13  
   14: [id="using-alternative-ides-in-{prod-id-short}"]
   15  = Using alternative IDEs in {prod-short}
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_version-control.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="version-control"]
   17  = Version Control
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_what-is-a-che-theia-plug-in.adoc:
   12  :parent-context-of-what-is-a-che-theia-plug-in: {context}
   13  
   14: [id="what-is-a-che-theia-plug-in"]
   15  = What is a Che-Theia plug-in
   16  
   ..
   31  == Features and benefits of Che-Theia plug-ins
   32  
   33: [options="header"]
   34  |===
   35  | *Features*            | *Description* | *Benefits*

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_a-minimal-devfile.adoc:
    1  // making-a-workspace-portable-using-a-devfile
    2  
    3: [id="a-minimal-devfile_{context}"]
    4  = A minimal devfile
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_additional-tools-in-the-che-workspace.adoc:
    1  // adding-tools-to-che-after-creating-a-workspace
    2  
    3: [id="additional-tools-in-the-{prod-id-short}-workspace_{context}"]
    4  = Additional tools in the {prod-short} workspace
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_che-theia-plug-in-concept-in-detail.adoc:
    1: [id="che-theia-plug-in-concept-in-detail_{context}"]
    2  = Che-Theia plug-in concept in detail
    3  
    .
    7  
    8  
    9: [id="client-side-and-server-side-che-theia-plug-ins_{context}"]
   10  == Client-side and server-side Che-Theia plug-ins
   11  
   ..
   20  
   21  
   22: [id="che-theia-plug-in-apis_{context}"]
   23  == Che-Theia plug-in APIs
   24  
   ..
   30  
   31  
   32: [id="che-theia-plug-in-capabilities_{context}"]
   33  == Che-Theia plug-in capabilities
   34  
   35  Che-Theia plug-ins have the following capabilities:
   36  
   37: [options="header",cols="3"]
   38  |===
   39  | *Plug-in*
   ..
   69  
   70  
   71: [id="vs-code-extensions-and-eclipse-theia-plug-ins_{context}"]
   72  == VS Code extensions and Eclipse Theia plug-ins
   73  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_che-theia-plug-in-lifecycle.adoc:
    1: [id="che-theia-plug-in-lifecycle_{context}"]
    2  = Che-Theia plug-in lifecycle
    3  
    .
   14  
   15  .Che-Theia plug-in lifecycle
   16: image::extensibility/che-theia-plug-in-lifecycle.png[link="{imagesdir}/extensibility/che-theia-plug-in-lifecycle.png"]
   17  
   18  Before a {prod-short} workspace is launched, {prod-short} master starts containers for the workspace:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_che-theia-task-types.adoc:
    1: [id="che-theia-task-types_{context}"]
    2  = Che-Theia task types
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_disambiguation-between-stacks-and-devfiles.adoc:
    1  // making-a-workspace-portable-using-a-devfile
    2  
    3: [id="disambiguation-between-stacks-and-devfiles_{context}"]
    4  = Disambiguation between stacks and devfiles
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_embedded-and-remote-che-theia-plug-ins.adoc:
    1: [id="embedded-and-remote-che-theia-plug-ins_{context}"]
    2  = Embedded and remote Che-Theia plug-ins
    3  
    .
    7  
    8  
    9: [id="embedded-or-local-plug-ins_{context}"]
   10  == Embedded (or local) plug-ins
   11  
   ..
   26  
   27  
   28: [id="remote-plug-ins_{context}"]
   29  == Remote plug-ins
   30  
   ..
   53  
   54  .Che-Theia plug-in comparison matrix: embedded vs remote
   55: [options="header",cols="h,,,"]
   56  |===
   57  | {nbsp}

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_factory-json-reference.adoc:
    3  // * assembly_automating-workspace-generation-using-factories
    4  
    5: [id="factory-json-reference_{context}"]
    6  = Factory JSON reference
    7  
    .
   36  The `factory.policies`, `factory.ide`, and `factory.creator` objects are unique to factories. They provide meta information to the automation engine that alter the presentation of the factory URL or the behavior of the provisioning.
   37  
   38: [id="mixins"]
   39  == Mixins
   40  
   ..
   52  * Learn more about other link:TODO: link to project API docs[mixins]
   53  
   54: [id="pull-request-mixin-attributes"]
   55  == Pull Request mixin attributes
   56  
   ..
   89  ----
   90  
   91: [id="policies"]
   92  == Policies
   93  
   ..
  108  <4> Create one workpace per click, user, or account.
  109  
  110: [id="factories_json_reference-limitations"]
  111  == Limitations
  112  
  113  You can use `since : EPOCHTIME`, `until : EPOCHTIME`, and `referer` as a way to prevent the factory from executing under certain conditions. `since` and `until` represent a valid time window that allows the factory to activate. The `referrer` checks the hostname of the acceptor and only allows the factory to execute if there is a match.
  114  
  115: [id="factories_json_reference-multiplicity"]
  116  == Multiplicity
  117  
  118  Using `create : perClick` causes every click of the factory URL to generate a new workspace, each with its own identifier, name, and resources. Using `create : perUser` causes only one workspace to be generated for each unique user that clicks on the factory URL. If the workspace has previously been generated, the existing workspace is reopened.
  119  
  120: [id="factories_json_reference-ide-customization"]
  121  == Customizing the IDE
  122  
  ...
  220  |===
  221  
  222: [id="action-open-file"]
  223  == Action: Open File
  224  
  ...
  236  ----
  237  
  238: [id="action-find-and-replace"]
  239  == Action: Find and Replace
  240  
  ...
  276  Use https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions.html[regular expressions] in `sed`, both in find-replace and file-file type patterns.
  277  
  278: [id="creator"]
  279  == Creator
  280  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_security-considerations.adoc:
    1  // configuring-workspace-exposure-strategies
    2  
    3: [id="security-considerations_{context}"]
    4  = Security considerations
    5  
    .
    8  All the security-related considerations below are only applicable to {prod-short} in multi-user mode. The single user mode does not impose any security restrictions.
    9  
   10: [id="json-web-token-jwt-proxy_{context}"]
   11  == JSON web token (JWT) proxy
   12  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_what-is-a-devfile.adoc:
    1  // making-a-workspace-portable-using-a-devfile
    2  
    3: [id="what-is-a-devfile_{context}"]
    4  = What is a devfile
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_workspace-exposure-strategies.adoc:
    1  // configuring-workspace-exposure-strategies
    2  
    3: [id="workspace-exposure-strategies_{context}"]
    4  = Workspace exposure strategies
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_workspaces-overview.adoc:
   13  :page-liquid:
   14  
   15: [id="workspaces-overview"]
   16  = Workspaces overview
   17  
   ..
   28  
   29  IMPORTANT: By default, it is possible to run only one workspace at a time. 
   30: ifeval::["{project-context}" == "che"]
   31  To change the default value, see link:{site-baseurl}che-7/advanced-configuration-options/#limits-for-the-workspaces-of-an-user[Limits for the workspaces of a user].
   32  endif::[]
   33: ifeval::["{project-context}" == "crw"]
   34  To change the default value, see link:{prod-ig-url}[the {prod-ig}].
   35  endif::[]
   36  
   37  .Features and benefits
   38: [options="header",cols="h,,"]
   39  |===
   40  | Features

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_accessing-a-git-repository-via-https.adoc:
    1  // version-control
    2  
    3: [id="accessing-a-git-repository-via-https_{context}"]
    4  = Accessing a Git repository via HTTPS
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_accessing-a-git-repository-via-ssh.adoc:
    1  // version-control
    2  
    3: [id="accessing-a-git-repository-via-ssh_{context}"]
    4  = Accessing a Git repository via SSH
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_accessing-che-6-workspace-configuration.adoc:
    1  // converting-a-che-6-workspace-to-a-che-7-devfile
    2  
    3: [id="accessing-{prod-id-short}-{prod-prev-ver}-workspace-configuration_{context}"]
    4  = Accessing a {prod-short} {prod-prev-ver} workspace configuration
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-a-kubernetes-application-to-an-existing-workspace-using-the-dashboard.adoc:
    1  // importing-a-kubernetes-application-into-a-che-workspace
    2  
    3: [id="adding-a-kubernetes-application-to-an-existing-workspace-using-the-dashboard_{context}"]
    4  = Adding a Kubernetes application to an existing workspace using the dashboard
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-language-support-plug-in-to-the-che-workspace.adoc:
    1  // adding-tools-to-che-after-creating-a-workspace
    2  
    3: [id="adding-language-support-plug-in-to-the-{prod-id-short}-workspace_{context}"]
    4  = Adding language support plug-in to the {prod-short} workspace
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-projects-to-your-workspace.adoc:
    1  // creating-and-configuring-a-new-che-7-workspace
    2  
    3: [id="adding-projects-to-your-workspace_{context}"]
    4  = Adding projects to your workspace
    5  
    .
   18  . Fill in the required details for the project type that you selected, and click the btn:[Add] button.
   19  +
   20: image::workspaces/projects-add-project.png[link="{imagesdir}/workspaces/projects-add-project.png"]
   21  
   22  . To add another project to the workspace, click the btn:[Add Project] button.
   ..
   24  . After configuring the project for the workspace, check the change in the devfile, which is the configuration file of the workspace, by opening the *Devfile* tab.
   25  +
   26: image::workspaces/devfile-tab-to-view.png[link="{imagesdir}/workspaces/devfile-tab-to-view.png"]
   27  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-che-plugins-panel.adoc:
    1: [id="adding-the-vs-code-extension-using-the-{prod-id-short}-plugins-panel_{context}"]
    2  = Adding a VS Code extension using the {prod-short} Plugins panel
    3  
    .
   16  . In the search bar, click the *Menu* button and then click *Change Registry* to choose the registry from the list. If the required registry is not in the list, add it using the *Add Registry* menu option. The registry link should point to the `plugins` segment of the registry. For example: `https://my-registry.com/v3/plugins/index.json`.
   17  +
   18: image::extensibility/vs-code-extension-change-registry.png[link="{imagesdir}/extensibility/vs-code-extension-change-registry.png"]
   19  
   20  . Search for the required plug-in using the filter, and then click the btn:[Install] button.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-workspace-configuration.adoc:
    1: [id="adding-the-vs-code-extension-using-the-workspace-configuration_{context}"]
    2  = Adding a VS Code extension using the workspace configuration
    3  
    .
   18  . Locate the *components* section, and add a new entry with the following structure:
   19  +
   20: [source,yaml,subs="+quotes"]
   21  ----
   22   - type: chePlugin
   ..
   29  Alternatively, you can link to a `meta.yaml` file hosted on GitHub, via the reference field.
   30  +
   31: [source,yaml,subs="+quotes"]
   32  ----
   33   - type: chePlugin

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_changing-the-configuration-of-an-existing-workspace-from-the-user-dashboard.adoc:
    1: [id="changing-the-configuration-of-an-existing-workspace-from-the-user-dashboard_{context}"]
    2  = Changing the configuration of an existing workspace from the User Dashboard
    3  
    .
   59  ====
   60  
   61: [id="configure-devfile"]
   62  [start=5]
   63  . From the *Devfile* tab, edit the workspace's YAML configuration. See link:{site-baseurl}che-7/making-a-workspace-portable-using-a-devfile/#devfile-reference_making-a-workspace-portable-using-a-devfile[Devfile reference].

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_choosing-the-sidecar-image.adoc:
    1: [id="choosing-the-sidecar-image_{context}"]
    2  = Choosing the sidecar image
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-a-new-workspace-from-user-dashboard.adoc:
    1: [id="configuring-a-new-workspace-from-user-dashboard_{context}"]
    2  = Configuring a new workspace from User Dashboard
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-the-workspace-and-adding-tooling.adoc:
    1  // creating-and-configuring-a-new-che-7-workspace
    2  
    3: [id="configuring-the-workspace-and-adding-tooling_{context}"]
    4  = Configuring the workspace and adding tooling
    5  
    .
   10  
   11  .{prod-short} {prod-ver} plug-ins that have replaced {prod-short} {prod-prev-ver} installers
   12: [options="header"]
   13  |===
   14  | {prod-short} {prod-prev-ver} installer | {prod-short} {prod-ver} plug-in
   ..
  114  .. Click the *Containers* tab (*Workspace* -> *Details* -> *Containers*).
  115  +
  116: image::workspaces/edit-the-container.png[link="{imagesdir}/workspaces/edit-the-container.png"]
  117  
  118  .. Copy the {prod-short} {prod-prev-ver} recipe, and paste it into the separate {prod-short} {prod-ver} component as a *referenceContent*.
  119  +
  120: image::workspaces/component_as_a_referenceContent.png[link="{imagesdir}/workspaces/component_as_a_referenceContent.png"]
  121  
  122  .. Set the type from the original {prod-short} {prod-prev-ver} configuration. The following is an example of the resulting file:
  ...
  147  +
  148  .Сhe 6 and Сhe 7 equivalence table
  149: [options="header"]
  150  |===
  151  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  191  
  192  .Сhe 6 and Сhe 7 equivalence table
  193: [options="header"]
  194  |===
  195  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  233  . Save changes and start the new {prod-short} {prod-ver} workspace.
  234  +
  235: image::workspaces/save-and-start-the-new-che-workspace.png[link="{imagesdir}/workspaces/save-and-start-the-new-che-workspace.png"]
  236  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-workspace-exposure-strategies-using-the-helm-chart-and-the-operator.adoc:
    1  // configuring-workspace-exposure-strategies
    2  
    3: [id="configuring-workspace-exposure-strategies-using-a-helm-chart-and-a-operator_{context}"]
    4  = Configuring workspace exposure strategies using a Helm chart and an Operator
    5  The following section describes how to configure workspace exposure strategies of a {prod-short} server using the Helm chart and the Operator.
    .
   12  When deploying {prod-short} using the Helm chart, configure the workspace exposure strategy using the `global.serverStrategy` property. To do so, add the following option to the `helm install` or `helm upgrade` command:
   13  
   14: [subs="+quotes"]
   15  ----
   16  $ helm install --set global.serverStrategy=__<single-host>__
   ..
   19  or:
   20  
   21: [subs="+quotes"]
   22  ----
   23  $ helm upgrade --set global.serverStrategy=__<single-host>__
   ..
   36  * Create a new cluster by executing the `kubectl apply` command. For example:
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ kubectl apply -f _<my-cluster.yaml>_
   ..
   43  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
   44  +
   45: [subs="+quotes"]
   46  ----
   47  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/k8s/ingressStrategy", "value": "__single-host__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_converting-a-che-6-workspace-to-a-basic-che-7-devfile.adoc:
    1  // converting-a-che-6-workspace-to-a-che-7-devfile
    2  
    3: [id="converting-a-{prod-id-short}-{prod-prev-ver}-workspace-to-a-basic-{prod-id-short}-{prod-ver}-devfile_{context}"]
    4  = Converting a {prod-short} {prod-prev-ver} workspace to a basic {prod-short} {prod-ver} devfile
    5  
    .
   20  +
   21  .{prod-short} {prod-ver} devfile corresponding to the respective {prod-short} {prod-prev-ver} stacks.
   22: [options="header",cols="2"]
   23  |===
   24  | {prod-short} {prod-prev-ver} stacks
   ..
   68  .. By default, the example project is added to the workspace. To remove the default project, click the btn:[Remove] button:
   69  +
   70: image::workspaces/remove-default-project.png[link="{imagesdir}/workspaces/remove-default-project.png"]
   71  
   72  .. To import a custom project that was used in {prod-short} {prod-prev-ver} workspace, click the *Add or Import Project* and select *Git* or *GitHub* option:
   73  +
   74: image::workspaces/add-custom-project.png[link="{imagesdir}/workspaces/add-custom-project.png"]
   75  
   76  .. Various commands can be added to devfiles of imported projects, for example, `run`, `build`, and  `test`. The commands are then accessible from the IDE when a workspace is started. Custom commands and other devfile components can be added in the *Devfile* configuration.
   ..
   78  .. Click the btn:[Create & Proceed Editing] button.
   79  +
   80: image::workspaces/create-and-edit.png[link="{imagesdir}/workspaces/create-and-edit.png"]
   81  +
   82  Select the *Devfile* tab to update the configuration. Machine servers in {prod-short} {prod-prev-ver} workspaces can be specified as components endpoints in a Devfile and {prod-short} {prod-prev-ver} installers as components of type chePlugin. See the link:https://redhat-developer.github.io/devfile/devfile[Devfile specification] for the detailed information about the supported properties and attributes.
   83  +
   84: image::workspaces/update-devfile-configuration.png[link="{imagesdir}/workspaces/update-devfile-configuration.png"]
   85  .. Once the *Devfile* configuration is completed, click the btn:[Open] button to start a newly created {prod-short} {prod-ver} workspace.
   86  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-new-workspace-from-the-dashboard.adoc:
    1  // creating-and-configuring-a-new-che-7-workspace
    2  
    3: [id="creating-a-new-workspace-from-the-dashboard_{context}"]
    4  = Creating a new workspace from the dashboard
    5  
    .
   17  . In the *SELECT STACK* list, select one of the default stacks.
   18  +
   19: image::workspaces/{project-context}-stack-list.png[link="{imagesdir}/workspaces/{project-context}-stack-list.png"]
   20  
   21  . Click the btn:[Create & Proceed Editing] button. The *Workspaces -> Configs* page is shown.
   22  +
   23: image::workspaces/workspaces-config-page.png[link="{imagesdir}/workspaces/workspaces-config-page.png"]
   24  
   25  . Change the workspace name and click the *Devfile* tab.
   26  +
   27: image::workspaces/workspace-devfile-tab.png[link="{imagesdir}/workspaces/workspace-devfile-tab.png"]
   28  
   29  . Delete all the *components* and *commands* in the devfile to get an empty devfile.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-by-importing-source-code-of-a-project.adoc:
   11  :page-liquid:
   12  
   13: [id="creating-a-workspace-by-importing-source-code-of-a-project"]
   14  = Creating a workspace by importing the source code of a project
   15  
   ..
   33  * xref:#importing-to-a-running-workspace-with-git-clone-in-a-terminal[Import to a running workspace using `git clone` in a terminal]
   34  
   35: [id="importing-from-the-dashboard-into-an-existing-workspace"]
   36  == Importing from the Dashboard into an existing workspace
   37  
   ..
   96  image::workspaces/configure-command.png[Configure tasks]
   97  
   98: [id="importing-to-a-running-workspace-using-the-git-clone-command"]
   99  == Importing to a running workspace using the *Git: Clone* command
  100  
  ...
  113  image::workspaces/git-clone-command-2.png[Configure git clone command]
  114  
  115: [id="importing-to-a-running-workspace-with-git-clone-in-a-terminal"]
  116  == Importing to a running workspace with `git clone` in a terminal
  117  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-a-feature-branch-of-a-git-repository.adoc:
    1  // configuring-a-workspace-using-a-devfile
    2  
    3: [id="creating-a-workspace-from-a-feature-branch-of-a-git-repository_{context}"]
    4  = Creating a workspace from a feature branch of a Git repository
    5  
    .
   16  Use following URL format to open an experimental link:https://github.com/quarkusio/quarkus-quickstarts[quarkus-quickstarts] branch hosted on link:https://che.openshift.io[che.openshift.io].
   17  
   18: [subs="+quotes"]
   19  ----
   20  https://che.openshift.io/f?url=https://github.com/maxandersen/quarkus-quickstarts/tree/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-the-default-branch-of-a-git-repository.adoc:
    1  // configuring-a-workspace-using-a-devfile
    2  
    3: [id="creating-a-workspace-from-the-default-branch-of-a-git-repository_{context}"]
    4  = Creating a workspace from the default branch of a Git repository
    5  
    .
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://github.com/eclipse/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-user-dashboard.adoc:
    1: [id="creating-a-workspace-from-user-dashboard_{context}"]
    2  = Creating a workspace from User Dashboard
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-with-a-publicly-accessible-standalone-devfile-using-http.adoc:
    1  // configuring-a-workspace-using-a-devfile
    2  
    3: [id="creating-a-workspace-from-a-publicly-accessible-standalone-devfile-using-http_{context}"]
    4  = Creating a workspace from a publicly accessible standalone devfile using HTTP
    5  
    .
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-using-chectl-and-a-local-devfile.adoc:
    1  // configuring-a-workspace-using-a-devfile
    2  
    3: [id="creating-a-workspace-using-{prod-cli}-and-a-local-devfile_{context}"]
    4  = Creating a workspace using {prod-cli} and a local devfile
    5  
    .
   17  . Run a workspace from a devfile using the `workspace:start` parameter with the `{prod-cli}` tool as follows:
   18  
   19: [subs="+attributes,+quotes"]
   20  ----
   21  $ {prod-cli} workspace:start --devfile=devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_defining-a-launch-remote-plug-in-endpoint-in-a-meta-yaml-file.adoc:
    3  // assembly_che-theia-remote-plugin-image.adoc
    4  
    5: [id="defining-a-launch-remote-plug-in-endpoint-in-a-meta-yaml-file_{context}"]
    6  = Defining a launch remote plug-in endpoint in a `meta.yaml` file
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_defining-a-launch-remote-plug-in-endpoint-using-dockerfile.adoc:
    3  // assembly_che-theia-remote-plugin-image.adoc
    4  
    5: [id="defining-a-launch-remote-plug-in-endpoint-using-dockerfile_{context}"]
    6  = Defining a launch remote plug-in endpoint using Dockerfile
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_downloading-and-uploading-a-file-to-a-workspace-using-the-command-line-interface.adoc:
    1  // remote-access-to-che-workspaces
    2  
    3: [id="downloading-and-uploading-a-file-to-a-workspace-using-the-command-line-interface_{context}"]
    4  = Downloading and uploading a file to a workspace using the command-line interface
    5  
    .
   17  * To download a local file named `downloadme.txt` from a workspace container to the current home directory of the user, use the following in the {prod-short} remote shell.
   18  +
   19: [subs="+quotes",options="+nowrap"]
   20  ----
   21  $ REMOTE_FILE_PATH=/projects/downloadme.txt
   ..
   28  * To upload a local file named `uploadme.txt` to a workspace container in the `/projects` directory:
   29  
   30: [subs="+quotes",options="+nowrap"]
   31  ----
   32  $ LOCAL_FILE_PATH=./uploadme.txt

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_editing-a-task-and-a-launch-configuration.adoc:
    1  // defining-custom-commands-for-che-theia
    2  
    3: [id="editing-task-and-launch-configuration_{context}"]
    4  = Editing a task and launch configuration
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_generating-a-devfile-from-an-existing-kubernetes-application.adoc:
    3  // importing-a-kubernetes-application-into-a-che-workspace
    4  
    5: [id="generating-a-devfile-from-an-existing-kubernetes-application_{context}"]
    6  = Generating a devfile from an existing Kubernetes application
    7  
    .
   18  . Use the `{prod-cli} devfile:generate` command to generate a devfile:
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ {prod-cli} devfile:generate
   ..
   27  The following example generates a devfile that includes the `NodeJS` component:
   28  +
   29: [subs="+attributes"]
   30  ----
   31  $ {prod-cli} devfile:generate --selector="app=nodejs"
   ..
   55  * To include support for a language, use the `--language` parameter:
   56  +
   57: [subs="+attributes"]
   58  ----
   59  $ {prod-cli} devfile:generate --selector="app=nodejs" --language="typescript"

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_generating-workspace-names.adoc:
    1  // generate-name-of-a-workspace
    2  
    3: [id="generating-workspace-names_{context}"]
    4  = Generating workspace names
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_including-a-kubernetes-application-in-a-workspace-devfile-definition.adoc:
    1  // importing-a-kubernetes-application-into-a-che-workspace
    2  
    3: [id="including-a-kubernetes-application-in-a-workspace-devfile-definition_{context}"]
    4  = Including a Kubernetes application in a workspace devfile definition
    5  
    .
   72  Use this devfile to create and start a workspace with the `{prod-cli}` command:
   73  
   74: [subs="+attributes,+quotes"]
   75  ----
   76  $ {prod-cli} worspace:start --devfile _<devfile-path>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_managing-git-configuration-identity.adoc:
    1  // version-control
    2  
    3: [id="managing-git-configuration-identity_{context}"]
    4  = Managing Git configuration: identity
    5  
    .
   16  . Open *File > Settings > Open Preferences*:
   17  +
   18: image::git/git-config-identity.png[link="{imagesdir}/git/git-config-identity.png"]
   19  
   20  . In the opened window, navigate to the *Git* section, and find:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_managing-pull-requests-using-the-github-pr-plug-in.adoc:
    1  // version-control
    2  
    3: [id="managing-pull-requests-using-the-github-pr-plug-in_{context}"]
    4  = Managing pull requests using the GitHub PR plug-in
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_navigating-che-using-the-dashboard-on-minishift.adoc:
    1: [id="navigating-{prod-id-short}-using-the-dashboard-on-minishift_{context}"]
    2  = Navigating {prod-short} using the Dashboard on Minishift
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_navigating-che-using-the-dashboard-on-openshift.adoc:
    1: [id="navigating-{prod-id-short}-using-the-dashboard-on-openshift_{context}"]
    2  = Navigating {prod-short} using the Dashboard on OpenShift
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_overriding-devfile-values-using-factory-parameters.adoc:
    3  // * assembly_configuring-a-workspace-using-a-devfile.adoc
    4  
    5: [id="overriding-devfile-values-using-factory-parameters_{context}"]
    6  = Overriding devfile values using factory parameters
    7  
    .
   24  Consider the following initial devfile:
   25  
   26: [subs="+quotes"]
   27  ----
   28  ---
   ..
   36  To add or override `generateName` value, the following factory URL can be used:
   37  
   38: [subs="+quotes"]
   39  ----
   40  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.metadata.generateName=myprefix
   ..
   43  The resulting workspace will have the following devfile model:
   44  
   45: [subs="+quotes"]
   46  ----
   47  ---
   ..
   59  Consider the following initial devfile:
   60  
   61: [subs="+quotes"]
   62  ----
   63  ---
   ..
   75  To add or override source `branch` value, the following factory URL can be used:
   76  
   77: [subs="+quotes"]
   78  ----
   79  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.projects.web-java-spring-petclinic.source.branch=1.0.x
   ..
   82  The resulting workspace will have the following devfile model:
   83  
   84: [subs="+quotes"]
   85  ----
   86  apiVersion: 1.0.0
   ..
  102  Consider the following initial devfile:
  103  
  104: [subs="+quotes"]
  105  ----
  106  ---
  ...
  116  To add or override `persistVolumes` attribute value, the following factory URL can be used:
  117  
  118: [subs="+quotes"]
  119  ----
  120  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.persistVolumes=true
  ...
  124  The resulting workspace will have the following devfile model:
  125  
  126: [subs="+quotes"]
  127  ----
  128  ---
  ...
  141  possible to use dot-separated names:
  142  
  143: [subs="+quotes"]
  144  ----
  145  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.dot.name.format.attribute=true
  ...
  149  The resulting workspace will have the following devfile model:
  150  
  151: [subs="+quotes"]
  152  ----
  153  ---

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_remotely-accessing-workspaces-using-kubectl.adoc:
    1  // remote-access-to-che-workspaces
    2  
    3: [id="remotely-accessing-workspaces-using-the-kubernetes-command-line-tool_{context}"]
    4  = Remotely accessing workspaces using the Kubernetes command-line tool
    5  
    .
   13  * Verify the installation of `kubectl` using the `kubectl version` command:
   14  +
   15: [subs="+quotes",options="+nowrap"]
   16  ----
   17  $ kubectl version
   ..
   29  . To find the name of the Kubernetes namespace and pod that runs the {prod-short} workspace:
   30  +
   31: [subs="+quotes",options="+nowrap"]
   32  ----
   33  $ kubectl get pod -l che.workspace_id --all-namespaces
   ..
   40  . To find the name of the container:
   41  +
   42: [subs="+quotes",options="+nowrap"]
   43  ----
   44  $ NAMESPACE=che
   ..
   51  . When you have the namespace, pod name, and the name of the container, use the `kubectl` command to open a remote shell:
   52  +
   53: [literal,subs="+quotes",options="nowrap"]
   54  --
   55  $ NAMESPACE=che
   ..
   62  . From the container, execute the `build` and `run` commands (as if from the {prod-short} workspace terminal):
   63  +
   64: [subs="+quotes",options="+nowrap"]
   65  ----
   66  user@workspace7b2wemdf3hx7s3ln $ mvn clean install

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_running-an-existing-workspace-from-the-user-dashboard-using-the-open-button.adoc:
    1: [id="running-an-existing-workspace-from-the-user-dashboard-with-the-open-button_{context}"]
    2  = Running an existing workspace from the User Dashboard using the Open button
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_running-an-existing-workspace-from-the-user-dashboard-using-the-recent-workspaces.adoc:
    1: [id="running-an-existing-workspace-from-the-user-dashboard-usinng-the-recent-workspaces_{context}"]
    2  = Running an existing workspace from the User Dashboard using the Recent Workspaces
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_running-an-existing-workspace-from-the-user-dashboard-using-the-run-button.adoc:
    1: [id="running-an-existing-workspace-from-the-user-dashboard-with-the-run-button_{context}"]
    2  = Running an existing workspace from the User Dashboard with the Run button
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_running-and-debugging.adoc:
    1  // defining-custom-commands-for-che-theia
    2  
    3: [id="running-and-debugging_{context}"]
    4  = Running and debugging
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_starting-a-new-workspace-from-user-dashboard.adoc:
    1: [id="starting-a-new-workspace-from-user-dashboard_{context}"]
    2  = Starting a new workspace from User Dashboard
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_verifying-the-vs-code-extension-api-compatibility-level.adoc:
    1: [id="verifying-the-vs-code-extension-api-compatibility-level_{context}"]
    2  = Verifying the VS Code extension API compatibility level
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_writing-a-devfile-for-your-project.adoc:
    1: [id="writing-a-devfile-for-your-project_{context}"]
    2  = Writing a devfile for a project
    3  
    4  This section describes how to create a minimal devfile for your project and how to include more than one projects in a devfile.
    5  
    6: [id="preparing-a-minimal-devfile_{context}"]
    7  == Preparing a minimal devfile
    8  
    .
   45  
   46  
   47: [id="specifying-multiple-projects-in-a-devfile_{context}"]
   48  == Specifying multiple projects in a devfile
   49  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_writing-a-meta-yaml-file-and-adding-it-to-a-plug-in-registry.adoc:
    1: [id="proc_writing-a-meta-yaml-file-and-adding-it-to-a-plug-in-registry_{context}"]
    2  = Writing a meta.yaml file and adding it to a plug-in registry
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_che-theia-plug-in-metadata.adoc:
    1: [id="che-theia-plug-in-metadata_{context}"]
    2  = Che-Theia plug-in metadata
    3  
    .
   96  
   97  .Example `meta.yaml` for a Che-Theia plug-in: the {prod-short} machine-exec Service
   98: [source,yaml,subs="+quotes,+attributes"]
   99  ----
  100  apiVersion: v2

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_devfile-reference.adoc:
    1: [id="devfile-reference_{context}"]
    2  = Devfile reference
    3  
    .
   91  ----
   92  
   93: [id="adding-components-to-a-devfile_{context}"]
   94  == Adding components to a devfile
   95  
   ..
  272  This parameter is also applicable for `chePlugin` type components.
  273  
  274: [id="component-type-dockerimage_{context}"]
  275  === Component type: dockerimage
  276  
  ...
  853  Devfile attributes can be used to configure various features.
  854  
  855: [id="attribute-editorfree_{context}"]
  856  === Attribute: editorFree
  857  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_objects-supported-in-eclipse-che.adoc:
    1: [id="objects-supported-in-eclipse-{prod-id-short}"]
    2  = Objects supported in {prod} {prod-ver}
    3  
    4  The following table lists the objects that are partially supported in {prod} {prod-ver}:
    5  
    6: [cols="1,1,1,1,5", options="header"]
    7  |===
    8  |Object 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\assembly_eclipse-che4z.adoc:
   11  :parent-context-of-eclipse-che4z: {context}
   12  
   13: [id="eclipse-che4z_{context}"]
   14  = Eclipse Che4z
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\assembly_openshift-connector-overview.adoc:
   14  
   15  
   16: [id="openshift-connector-overview_{context}"]
   17  = OpenShift Connector overview
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\con_features-of-openshift-connector.adoc:
   10  // using-openshift-connector-in-eclipse-che
   11  
   12: [id="features-of-openshift-connector_{context}"]
   13  
   14  = Features of OpenShift Connector

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_authenticating-with-openshift-connector-in-eclipse-che.adoc:
   10  // using-openshift-connector-in-eclipse-che
   11  
   12: [id="authenticating-with-openshift-connector-from-eclipse-che_{context}"]
   13  
   14  = Authenticating with OpenShift Connector from {prod-short}

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_connecting-source-code-from-guthub-to-a-openshift-component-using-openshift-connector.adoc:
   10  // using-openshift-connector-in-eclipse-che
   11  
   12: [id="connecting-source-code-from-github-to-a-openshift-component-using-openshift-connector_{context}"]
   13  = Connecting source code from GitHub to an OpenShift Component using OpenShift Connector
   14  
   ..
   32  For additional information about cloning Git repository, see:
   33  
   34: ifeval::["{project-context}" == "che"]
   35  link:https://www.eclipse.org/che/docs/che-7/version-control/#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   36  endif::[]
   37  
   38: ifeval::["{project-context}" == "crw"]
   39  link:https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html-single/end-user_guide/index#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   40  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_creating-components-with-openshift-connector-in-eclipse-che.adoc:
   10  // using-openshift-connector-in-eclipse-che
   11  
   12: [id="creating-components-with-openshift-connector-in-eclipse-che_{context}"]
   13  = Creating Components with OpenShift Connector in {prod-short}
   14  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_installing-openshift-connector-in-eclipse-che.adoc:
   10  // using-openshift-connector-in-eclipse-che
   11  
   12: [id="installing-openshift-connector-in-eclipse-che_{context}"]
   13  = Installing OpenShift Connector in {prod-short}
   14  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_advanced-configuration-options.adoc:
   12  :parent-context-of-advanced-configuration-options: {context}
   13  
   14: [id="advanced-configuration-options_{context}"]
   15  = Advanced configuration options
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_installing-che-in-restricted-environment.adoc:
   12  :parent-context-of-installing-che-in-restricted-environment: {context}
   13  
   14: [id="installing-{prod-id-short}-in-restricted-environment_{context}"]
   15  = Installing {prod-short} in offline mode
   16  
   ..
   37  Take into account the network topology of the environment to determine how best to accomplish this. For example, on a network owned by a company or an organization, the network administrators must ensure that traffic bound from the cluster can be routed to Ingress and Route hostnames. In other cases, for example, on AWS, create a proxy configuration allowing the traffic to leave the node to reach an external-facing Load Balancer.
   38  
   39: [id="building-offline-versions-of-the-plug-in-and-devfile-registry_{context}"]
   40  == Building offline versions of the plug-in and devfile registry
   41  
   ..
   47  
   48  
   49: [id="building-offline-plug-in-registry_{context}"]
   50  === Building offline plug-in registry
   51  
   ..
   65  . Build the plug-in registry image:
   66  +
   67: [subs="+quotes"]
   68  ----
   69  ./build.sh --organization _<my-org>_ \
   ..
   78  
   79  
   80: [id="building-offline-devfile-registry_{context}"]
   81  === Building offline devfile registry
   82  
   ..
   96  . Build the devfile registry image:
   97  +
   98: [subs="+quotes"]
   99  ----
  100  ./build.sh --organization _<my-org>_ \
  ...
  107  
  108  
  109: [id="pulling-images-used-by-{prod-id-short}-to-a-private-registry_{context}"]
  110  == Pulling images used by {prod-short} to a private registry
  111  
  ...
  118  
  119  .Images essential to starting workspaces
  120: [cols="2*"]
  121  |===
  122  | `docker.io/eclipse/che-server`
  ...
  155  To get a list of images required for plug-ins, display this file:
  156  
  157: [subs="+quotes"]
  158  ----
  159  $ docker run -it --rm \
  ...
  170  An offline devfile registry (see xref:building-offline-devfile-registry_{context}[]) contains a file with the list of all images referenced in its devfiles:
  171  
  172: [subs="+quotes"]
  173  ----
  174  $ docker run -it --rm \
  ...
  192  
  193  .Placeholders used in examples
  194: [cols="1,2"]
  195  |===
  196  | `<my-internal-registry>`
  ...
  210  The `CheCluster` Custom Resource, which is managed by the {prod-short} Operator, includes fields to facilitate deploying an instance of {prod-short} in a restricted environment:
  211  
  212: [source,yaml,subs="+quotes"]
  213  ----
  214  # [...]
  ...
  222  Setting these values uses `<my-internal-registry>` and `<my-organization>` for all images. This means that the Operator expects the offline plug-in and devfile registries to be available at:
  223  
  224: [subs="+quotes"]
  225  ----
  226  __<my-internal-registry>__/__<my-organization>__/che-plug-in-registry:__<ver>__

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_uninstalling-che.adoc:
   11  :parent-context-of-uninstalling-che: {context}
   12  
   13: [id="uninstalling-{prod-id-short}_{context}"]
   14  = Uninstalling {prod-short}
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_upgrading-che-on-openshift-4-using-the-openshift-web-console.adoc:
    1  :parent-context-of-upgrading-che-on-openshift-4-using-the-openshift-web-console: {context}
    2  
    3: [id="upgrading-{prod-id-short}-on-openshift-4-using-the-openshift-web-console_{context}"]
    4  = Upgrading {prod-short} on OpenShift 4 using the web console
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_upgrading-che.adoc:
   12  :parent-context-of-upgrading-che: {context}
   13  
   14: [id="upgrading-{prod-id-short}_{context}"]
   15  = Upgrading {prod-short}
   16  
   ..
   62  When making changes to the `checluster` custom resource, use patching to make updates to it. For example:
   63  
   64: ifeval::["{project-context}" == "che"]
   65  On Kubernetes, run:
   66  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\con_che-configmaps-and-their-behavior.adoc:
    1  // advanced-configuration-options
    2  
    3: [id="{prod-id-short}-configmaps-and-their-behavior_{context}"]
    4  = {prod-short} configMaps and their behavior
    5  
    .
   23  For example, to overrride the default memory limit for workspaces, add the `CHE_WORKSPACE_DEFAULT\__MEMORY__LIMIT__MB` property to `customCheProperties`:
   24  
   25: [subs="+attributes"]
   26  [source,yaml]
   27  ----
   ..
   46  Previous versions of the {prod-short} Operator had a configMap named `custom` to fulfill this role.  If the {prod-short} Operator finds a `configMap` with the name `custom`, it adds the data it contains into the `customCheProperties` field, redeploys {prod-short}, and deletes the `custom` `configMap`.
   47  
   48: ifeval::["{project-context}" == "che"]
   49  == {prod-short} installed using a Helm Chart
   50  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\con_deployment-architecture-diagram.adoc:
    1: [id="deployment-architecture-diagram_{context}"]
    2  = Deployment architecture diagram
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\con_target-platforms.adoc:
    1: [id="target-platforms_{context}"]
    2  = Target platforms
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_adding-custom-certificates-to-trust-store.adoc:
    1: [id="adding-custom-certificates-to-trust-store_{context}"]
    2  = Adding custom public SSL certificates to {prod-short} trust-store
    3  
    .
    8  . Create a new *configMap* with the certificate(s):
    9  +
   10: [subs="+quotes"]
   11  ----
   12  $ kubectl create configmap <config-map name> --from-file=<certificate file path> -n=che
   ..
   21  . Set the `global.tls.serverTrustStoreConfigMapName` property to previously created config-map name. To do that, add the following option to the `helm upgrade` command:
   22  +
   23: [subs="+quotes"]
   24  ----
   25  $ helm upgrade che -n che --set global.tls.serverTrustStoreConfigMapName=<config-map name> --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_configuring-che-persistent-volumes-strategy.adoc:
    1: [id="configuring-{prod-id-short}-persistent-volumes-strategy_{context}"]
    2  = Configuring {prod-short} Persistent Volumes strategy
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_configuring-che-with-and-without-keycloak.adoc:
    1: [id="configuring-{prod-id-short}-with-and-without-keycloak_{context}"]
    2  = Configuring {prod-short} with and without Keycloak
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_configuring-namespace-strategies.adoc:
    1  :parent-configuring-namespace-strategies: {context}
    2  
    3: [id="configuring-namespace-strategies_{context}"]
    4  = Configuring namespace strategies
    5  
    .
   20  To assign namespace names composed of a `che-ws` prefix and workspace id, set:
   21  
   22: [subs="+quotes"]
   23  ----
   24  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<workspaceid>__
   ..
   36  To have all workspaces created in `che-workspaces` namespace, set:
   37  
   38: [subs="+quotes"]
   39  ----
   40  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-workspaces
   ..
   54  To assign namespace names composed of a `che-ws` prefix and individual usernames (`che-ws-user1`, `che-ws-user2`), set:
   55  
   56: [subs="+quotes"]
   57  ----
   58  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<username>__
   ..
   79  disabled by default. To allow user-defined workspace namespaces, set:
   80  
   81: [subs="+quotes"]
   82  ----
   83  CHE_INFRA_KUBERNETES_NAMESPACE_ALLOW__USER__DEFINED=true

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_deploying-che-with-support-for-git-repositories-with-self-signed-certificates.adoc:
    1: [id="deploying-{prod-id-short}-with-support-for-git-repositories-with-self-signed-certificates_{context}"]
    2  = Deploying {prod-short} with support for Git repositories with self-signed certificates
    3  
    .
   15  . Create a new *configMap* with details about the Git server:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ kubectl create configmap che-git-self-signed-cert --from-file=ca.crt \
   ..
   34  . Update the `global.useGitSelfSignedCerts` property. To do that, add the following option to the `helm upgrade` command:
   35  +
   36: [subs="+quotes"]
   37  ----
   38  $ helm upgrade che -n che --set global.useGitSelfSignedCerts=true --set global.ingressDomain=__<kubernetes-cluster-domain>__ .
   ..
   56  +
   57  ----
   58: [http "https://10.33.177.118:3000"]
   59          sslCAInfo = /etc/che/git/cert/ca.crt
   60  ----

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_finishing-the-upgrade-of-che-on-openshift-using-the-operator.adoc:
    1: [id="finishing-the-upgrade-of-{prod-id-short}-on-openshift-using-the-operator_{context}"]
    2  = Finishing the upgrade of {prod-short} on OpenShift using the Operator
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_preparing-the-upgrade-of-che-on-openshift-using-the-operator.adoc:
    1: [id="preparing-the-upgrade-of-{prod-id-short}-on-openshift-using-the-operator_{context}"]
    2  = Preparing the upgrade of {prod-short} on OpenShift using the Operator
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-chectl-installation.adoc:
    1  // uninstalling-che
    2  
    3: [id="uninstalling-{prod-id-short}-after-{prod-cli}-installation_{context}"]
    4  = Uninstalling {prod-short} after {prod-cli} installation
    5  
    .
   10  * For {prod-short} installed using the `{prod-cli} server:start` command and the `-n` argument (custom namespace specified), use the `-n` argument also to uninstall the {prod-short} instance.
   11  
   12: ifeval::["{project-context}" == "che"]
   13  * For installations that did not use the `-n` argument, the created namespace is named `{prod-id-short}` by default.
   14  endif::[]
   15  
   16: ifeval::["{project-context}" == "crw"]
   17  * For installations that did not use the `-n` argument, the created namespace is named `workspaces` by default.
   18  endif::[]
   ..
   29  . Stop the {prod} Server:
   30  +
   31: [subs="+quotes,attributes"]
   32  ----
   33  $ {prod-cli} server:stop
   ..
   42  . Remove {prod-short} from the cluster:
   43  +
   44: [subs="+quotes,attributes"]
   45  ----
   46  $ {prod-cli} server:delete -n _<namespace>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-operatorhub-installation.adoc:
    1  // uninstalling-che
    2  
    3: [id="uninstalling-{prod-id-short}-after-operatorhub-installation_{context}"]
    4  = Uninstalling {prod-short} after OperatorHub installation
    5  
    .
   26  . In the row that displays information about the specific {prod-short} cluster, delete the {prod-short} Cluster deployment using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   27  //+
   28: //image::uninstall/che-delete-che-cluster.png[link="{imagesdir}/uninstall/che-delete-che-cluster.png"]
   29  . Alternatively, delete the {prod-short} deployment by clicking the displayed {prod} Cluster, `{prod-id}`, and select the *Delete cluster* option in the *Actions* drop-down menu on the top right.
   30  
   ..
   35  . In the row that displays information about the specific {prod} Operator, uninstall the {prod-short} Operator using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   36  //+
   37: //image::uninstall/che-uninstall-operator.png[link="{imagesdir}/uninstall/che-uninstall-operator.png"]
   38  . Accept the selected option, *Also completely remove the Operator from the selected namespace*.
   39  . Alternatively, uninstall the {prod} Operator by clicking the displayed {prod} Operator, `{prod}`, followed by selecting the *Uninstall Operator* option in the *Actions* drop-down menu on the top right.
   ..
   57  . Sign in to the cluster:
   58  +
   59: [subs="+quotes"]
   60  ----
   61  $ oc login -u _<username>_ -p _<password>_ _<cluster_URL>_
   ..
   64  . Switch to the project where the {prod-short} instance is deployed:
   65  +
   66: [subs="+quotes,attributes"]
   67  ----
   68  $ oc project _<{prod-id-short}_project>_
   ..
   71  . Obtain the {prod-short} cluster name. The following shows a cluster named `{prod-id}`:
   72  +
   73: [subs="+quotes,attributes"]
   74  ----
   75  $ oc get {prod-id-short}cluster
   ..
   80  . Delete the {prod-short} cluster:
   81  +
   82: [subs="+quotes,attributes"]
   83  ----
   84  $ oc delete {prod-id-short}cluster {prod-id}
   ..
   88  . Obtain the name of the {prod-short} cluster service version (CSV) module. The following detects a CSV module named `{prod-id}.v{prod-ver}`:
   89  +
   90: [subs="+quotes,attributes"]
   91  ----
   92  $ oc get csv
   ..
   97  . Delete the {prod-short} CSV:
   98  +
   99: [subs="+quotes,attributes"]
  100  ----
  101  $ oc delete csv {prod-id}.v{prod-ver}

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-3-using-the-cli-management-tool.adoc:
    1: [id="upgrading-{prod-id-short}-on-openshift-3-using-the-cli-management-tool_{context}"]
    2  = Upgrading {prod-short} on OpenShift 3 using the CLI management tool
    3  
    .
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-4-using-the-cli-management-tool.adoc:
    1: [id="upgrading-{prod-id-short}-on-openshift-4-using-the-cli-management-tool_{context}"]
    2  = Upgrading {prod-short} on OpenShift 4 using the CLI management tool
    3  
    .
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\ref_che-configmaps-fields-reference.adoc:
    3  // assembly_advanced-configuration-options.adoc
    4  
    5: [id="{prod-id-short}-configmaps-fields-reference_{context}"]
    6  
    7  = {prod-short} configMaps fields reference 
    .
    9  == `server` settings related to the {prod-short} server
   10  
   11: [cols="1,1,3", options="header"]
   12  :===
   13  Property: Default value: Description
   ..
   49  == `database` configuration settings related to the database used by {prod-short}
   50  
   51: [cols="1,1,3", options="header"]
   52  :===
   53  Property: Default value: Description
   ..
   65  == `auth` configuration settings related to authentication used by {prod-short} installation
   66  
   67: [cols="1,1,3", options="header"]
   68  :===
   69  Property: Default value: Description
   ..
   87  
   88  
   89: [cols="1,1,3", options="header"]
   90  :===
   91  Property: Default value: Description
   ..
  102  == `k8s` configuration settings specific to {prod-short} installations on Kubernetes
  103  
  104: [cols="1,1,3", options="header"]
  105  :===
  106  Property: Default value: Description
  ...
  116  == `installation` defines the observed state of {prod-short} installation
  117  
  118: [cols="1,3", options="header"]
  119  :===
  120  Property: Description
  ...
  136  == Limits for workspaces
  137  
  138: [cols="1,1,3", options="header"]
  139  :===
  140  Property: Default value: Description
  ...
  146  == Limits for the workspaces of an user
  147  
  148: [cols="1,1,3", options="header"]
  149  :===
  150  Property: Default value: Description
  ...
  158  
  159  
  160: [cols="1,1,3", options="header"]
  161  :===
  162  Property: Default value: Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_accessing-che-from-openshift-developer-perspective.adoc:
    9  ---
   10  
   11: [id="accessing-{prod-id-short}-from-openshift-developer-perspective_{context}"]
   12  = Accessing {prod-short} from OpenShift Developer Perspective
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-architecture.adoc:
   12  :parent-context-of-che-architectural-elements: {context}
   13  
   14: [id="{prod-id-short}-architectural-elements"]
   15  = {prod-short} architectural elements
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-quick-starts.adoc:
   14  :parent-context-of-che-quick-starts: {context}
   15  
   16: [id="{prod-id-short}-quick-starts_{context}"]
   17  = {prod-short} quick-starts
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-workspace-components.adoc:
    1  :parent-context-of-che-workspace-components: {context}
    2  
    3: [id="{prod-id-short}-workspace-components_{context}"]
    4  = {prod-short} workspace components
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-workspace-configuration.adoc:
    1  :parent-context-of-che-workspace-configuration: {context}
    2  
    3: [id="{prod-id-short}-workspace-configuration_{context}"]
    4  = {prod-short} workspace configuration
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-workspace-controller.adoc:
   12  :parent-context-of-che-workspace-controller: {context}
   13  
   14: [id="{prod-id-short}-workspace-controller_{context}"]
   15  = {prod-short} workspace controller
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-workspaces-architecture.adoc:
   12  :parent-context-of-che-workspaces-architecture: {context}
   13  
   14: [id="{prod-id-short}-workspaces-architecture_{context}"]
   15  = {prod-short} workspaces architecture
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_deploying-che-on-kubernetes-on-aws.adoc:
   13  :parent-context-of-deploying-che-on-kubernetes-on-aws: {context}
   14  
   15: [id="deploying-{prod-id-short}-on-kubernetes-on-aws_{context}"]
   16  = Deploying {prod-short} on Kubernetes on AWS
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_hosted-che.adoc:
   11  :parent-context-of-hosted-che: {context}
   12  
   13: [id="hosted-{prod-id-short}"]
   14  = Hosted {prod-short}
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_installing-che-on-google-cloud-platform.adoc:
   12  :parent-context-of-installing-che-on-google-cloud-platform: {context}
   13  
   14: [id="installing-{prod-id-short}-on-google-cloud-platform_{context}"]
   15  = Installing {prod-short} on Google Cloud Platform
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_installing-che-on-microsoft-azure.adoc:
   12  :parent-context-of-installing-che-on-microsoft-azure: {context}
   13  
   14: [id="installing-{prod-id-short}-on-microsoft-azure_{context}"]
   15  = Installing {prod-short} on Microsoft Azure
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_installing-che-on-openshift-3-using-the-operator.adoc:
   13  :parent-context-of-installing-che-on-openshift-3-using-the-operator: {context}
   14  
   15: [id="installing-{prod-id-short}-on-openshift-3-using-the-operator_{context}"]
   16  = Installing {prod-short} on OpenShift 3 using the Operator
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_installing-che-on-openshift-4-from-operatorhub.adoc:
   13  :parent-context-of-installing-che-on-openshift-4-from-operatorhub: {context}
   14  
   15: [id="installing-{prod-id-short}-on-openshift-4-from-operatorhub_{context}"]
   16  = Installing {prod-short} on OpenShift 4 from OperatorHub
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_installing-the-chectl-management-tool.adoc:
   12  :parent-context-of-installing-the-chectl-management-tool: {context}
   13  
   14: [id="installing-the-{prod-cli}-management-tool_{context}"]
   15  = Installing the {prod-cli} management tool
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_introduction-to-eclipse-che.adoc:
   15  :parent-context-of-introduction-to-eclipse-che: {context}
   16  
   17: [id="introduction-to-eclipse-che_{context}"]
   18  = Introduction to {prod}
   19  
   ..
   32  * An SDK for creating custom cloud developer platforms
   33  
   34: [id="getting-started-with-{prod-id-short}"]
   35  == Getting started with {prod-short}
   36  
   ..
   54  * *Roadmap:* See the development link:https://github.com/eclipse/che/wiki/Roadmap[roadmap] on the wiki.
   55  
   56: [id="what-is-eclipse-{prod-id-short}"]
   57  == What is {prod}
   58  
   ..
  145  include::ref_che-7-known-issues.adoc[leveloffset=+1]
  146  
  147: // [id="related-information-{context}"]
  148  // == Related information
  149  //

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_preparing-google-cloud-platform-for-installing-che.adoc:
    1  :parent-context-of-preparing-google-cloud-platform-for-installing-che: {context}
    2  
    3: [id="preparing-google-cloud-platform-for-installing-che_{context}"]
    4  = Preparing Google Cloud Platform for installing {prod-short}
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_running-che-locally.adoc:
   11  :parent-context-of-running-che-locally: {context}
   12  
   13: [id="running-{prod-id-short}-locally_{context}"]
   14  = Running {prod-short} locally
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-devfile-registry.adoc:
    1: [id="devfile-registry_{context}"]
    2  = Devfile registry
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-editor-plug-in.adoc:
    1: [id="{prod-id-short}-editor-plug-in_{context}"]
    2  = `Che Editor` plug-in
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-keycloak.adoc:
    1: [id="{prod-id-short}-keycloak_{context}"]
    2  = {prod-short} and Keycloak
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-plug-in-broker.adoc:
    1: [id="{prod-id-short}-plug-in-broker_{context}"]
    2  = {prod-short} plug-ins broker
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-plug-in-registry.adoc:
    1: [id="{prod-id-short}-plug-in-registry_{context}"]
    2  = {prod-short} plug-in registry
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-plug-ins.adoc:
    1: [id="{prod-id-short}-plug-ins_{context}"]
    2  = `Che Plugin` plug-ins
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-postgresql.adoc:
    1: [id="{prod-id-short}-postgresql_{context}"]
    2  = {prod-short} and PostgreSQL
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-server.adoc:
    1: [id="{prod-id-short}-server_{context}"]
    2  = {prod-short} server
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-user-dashboard.adoc:
    1: [id="{prod-id-short}-user-dashboard_{context}"]
    2  = {prod-short} user dashboard
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-user-runtimes.adoc:
    1: [id="{prod-id-short}-user-runtimes_{context}"]
    2  = {prod-short} user runtimes
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-workspace-creation-flow.adoc:
    1: [id="{prod-id-short}-workspace-creation-flow_{context}"]
    2  = {prod-short} workspace creation flow
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_che-workspace-jwt-proxy.adoc:
    1: [id="{prod-id-short}-workspace-jwt-proxy_{context}"]
    2  = {prod-short} workspace JWT proxy
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_features-and-benefits.adoc:
    1: [id="features-and-benefits_{context}"]
    2  = Features and benefits
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_high-level-che-architecture.adoc:
   11  :page-liquid:
   12  
   13: [id="high-level-{prod-id-short}-architecture_{context}"]
   14  = High-level {prod-short} architecture
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_introductory-videos.adoc:
    1: [id="introductory-videos_{context}"]
    2  = Introductory videos
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_openshift-developer-perspective-integration-with-che.adoc:
    1  // accessing-che-from-openshift-developer-perspective
    2  
    3: [id="openshift-developer-perspective-integration-with-che_{context}"]
    4  = OpenShift Developer Perspective integration with {prod-short}
    5  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_persistent-volume-configuration.adoc:
    1: [id="storage-strategies-for-{prod-id-short}-workspaces_{context}"]
    2  = Storage strategies for {prod-short} workspaces
    3  
    .
   18  |===
   19  
   20: [id="unique-pvc-strategy_{context}"]
   21  == Unique PVC strategy
   22  
   ..
   32  It is done to have the same data structure on PV on different PVC strategies(link:#how-the-subpaths-are-used[more]);
   33  
   34: [id="common-pvc-strategy_{context}"]
   35  == Common PVC Strategy
   36  
   ..
   54  - the only one workspace in the same namespace may be running. See how to configure link:#workspace-namespaces-configuration_che-workspace-configuration[namespace strategy] and link:#TODO[running workspace count]
   55  
   56: [id="per-workspace-pvc-strategy_{context}"]
   57  == Per workspace PVC strategy
   58  
   ..
   61  The `per-workspace` strategy works similarly to the `common` PVC strategy. The only difference is that all workspace volumes (but not all workspaces) use the same PVC to store data (projects and workspace logs by default and any additional volumes that a user can define).
   62  
   63: [id="how-the-subpaths-are-used_{context}"]
   64  == How the subpaths are used in PVCs
   65  
   ..
   80  
   81  
   82: [id="configuring-a-needed-workspace-strategy-using-the-helm-chart_{context}"]
   83  == Configuring a per-workspace strategy using the Helm chart
   84  
   ..
   91  When deploying {prod-short} using the Helm chart, configure the workspace PVC strategy by setting values for `global.pvcStrategy`. To do so, add the following option to the `helm install` or `helm upgrade` command:
   92  
   93: [subs="+quotes"]
   94  ----
   95  $ helm install --set global.pvcStrategy=__<common>__
   ..
   98  or:
   99  
  100: [subs="+quotes"]
  101  ----
  102  $ helm upgrade --set global.pvcStrategy=__<common>__
  ...
  106  
  107  
  108: [id="configuring-a-needed-workspace-strategy-using-the-operator_{context}"]
  109  == Configuring a per-workspace strategy using the Operator
  110  
  ...
  120  * Create a new cluster by executing the `kubectl apply` command. For example:
  121  +
  122: [subs="+quotes"]
  123  ----
  124  $ kubectl apply -f _<my-cluster.yaml>_
  ...
  127  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
  128  +
  129: [subs="+quotes"]
  130  ----
  131  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/storage/pvcStrategy", "value": "__common__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_workspaces-namespaces-configuration.adoc:
    1: [id="workspace-namespaces-configuration_{context}"]
    2  = Workspace namespaces configuration
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_accessing-che-from-red-hat-applications-menu.adoc:
    1  // accessing-che-from-openshift-developer-perspective
    2  
    3: [id="accessing-{prod-id-short}-from-red-hat-applications-menu_{context}"]
    4  = Accessing {prod-short} from Red Hat Applications menu
    5  
    .
   16  A drop-down menu with installed applications is displayed.
   17  +
   18: image::installation/{project-context}-red-hat-application-menu-che-odp.png[link="{imagesdir}/installation/{project-context}-red-hat-application-menu-che-odp.png"]
   19  
   20  . Click the *{prod-short}* link. This creates a new workspace or redirects to an existing one. For source links pointing to publicly accessible GitHub repositories that contain a `devfile.yaml` file, this file is be used to configure the workspace. Otherwise, a default workspace is created.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_configuring-dns-on-azure.adoc:
    1: [id="configuring-DNS-on-azure_{context}"]
    2  = Configuring DNS on Azure
    3  
    .
    8  . In the Azure web console, navigate to *Home* -> *DNS zones*.
    9  +
   10: image::installation/dns-zone-in-microsoft-azure.png[link="{imagesdir}/installation/dns-zone-in-microsoft-azure.png"]
   11  
   12  . Create a new zone.
   ..
   14  .. In the *Resource group* drop-down list, click *eclipseCheResourceGroup*.
   15  +
   16: image::installation/selecting-the-resource-group.png[link="{imagesdir}/installation/selecting-the-resource-group.png"]
   17  
   18  .. In the *Instance details* section, in the *Name* field, type the name of the domain (*azr.my-ide.cloud*, in this case).
   ..
   20  .. Click the btn:[Review + create] button.
   21  +
   22: image::installation/entering-the-name-fo-the-domain.png[link="{imagesdir}/installation/entering-the-name-fo-the-domain.png"]
   23  
   24  . Click the btn:[Create] button.
   25  +
   26: image::installation/completing-the-creation-of-the-zone.png[link="{imagesdir}/installation/completing-the-creation-of-the-zone.png"]
   27  +
   28  The created zone and the list of name servers (NS) are displayed in the *DNS Zones* section.
   29  +
   30: image::installation/list-of-created-zones-and-NS.png[link="{imagesdir}/installation/list-of-created-zones-and-NS.png"]
   31  +
   32  These servers must be configured with the registrar of the domain.
   ..
   40  .. In the *IP Address* field, select the external IP of Ingress-nginx controller that the user had obtained in the xref:installing-ingress-on-azure[] section (*40.89.129.194*, in this case).
   41  +
   42: image::installation/adding-a-record-set.png[link="{imagesdir}/installation/adding-a-record-set.png"]
   43  +
   44  The following is an example of an added DNS zone:
   45  +
   46: image::installation/example-of-an-added-dns-zone.png[link="{imagesdir}/installation/example-of-an-added-dns-zone.png"]
   47  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_contributing-to-github-projects-in-hosted-che.adoc:
    6  // include::proc_contributing-to-github-projects-in-hosted-che.adoc[leveloffset=+1]
    7  
    8: [id="contributing-to-github-projects-in-hosted-che_{context}"]
    9  = Contributing to GitHub projects in Hosted {prod-short}
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_creating-a-google-kubernetes-engine-instance.adoc:
    1: [id="creating-a-google-kubernetes-engine-instance_{context}"]
    2  = Creating a Google Kubernetes Engine instance
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_creating-a-service-account-secret-on-azure.adoc:
    1: [id="creating-a-service-account-secret-on-azure_{context}"]
    2  = Creating a Service Account Secret on Azure
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_creating-a-service-account-secret-on-google-cloud-platform.adoc:
    1: [id="creating-a-service-account-secret-on-google-cloud-platform_{context}"]
    2  = Creating a Service Account Secret on Google Cloud Platform
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_creating-a-workspace-from-template-in-hosted-che.adoc:
    6  // include::proc_creating-a-workspace-from-template-in-hosted-che.adoc[leveloffset=+1]
    7  
    8: [id="creating-a-workspace-from-template-in-hosted-che_{context}"]
    9  = Creating a workspace from a template in Hosted {prod-short}
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_creating-a-worskpace-from-the-user-dashboard.adoc:
    8  // include::<path>/proc_creating-a-worskpace-from-the-user-dashboard.adoc[leveloffset=+1]
    9  
   10: [id="creating-a-worskpace-from-the-user-dashboard_{context}"]
   11  = Creating a worskpace from the user dashboard
   12  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_creating-the-che-project-in-openshift-4-web-console.adoc:
    1: [id="creating-the-{prod-id-short}-project-in-openshift-4-web-console_{context}"]
    2  = Creating the {prod-short} project in OpenShift 4 web console
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_editing-the-code-of-applications-running-in-openshift-container-platform-using-che.adoc:
    1  // accessing-che-from-openshift-developer-perspective
    2  
    3: [id="editing-the-code-of-applications-running-in-openshift-container-platform-using-che_{context}"]
    4  = Editing the code of applications running in OpenShift Container Platform using {prod-short}
    5  
    .
   21  The deployments are displayed as graphical circles surrounded by circular buttons. One of these buttons is *Edit Source Code*.
   22  +
   23: image::installation/edit-source-code-button-che-odp.png[link="{imagesdir}/installation/edit-source-code-button-che-odp.png"]
   24  
   25  . To edit the code of an application using {prod-short}, click the *Edit Source Code* button. This redirects to a workspace with the cloned source code of the application component.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_enabling-ssl-on-openshift-4.adoc:
    1: [id="enabling-ssl-on-openshift-4_{context}"]
    2  = Enabling SSL on OpenShift 4
    3  
    .
   28  . Click *Confirm change*.
   29  +
   30: image::installation/tls-mode-true.png[link="{imagesdir}/installation/tls-mode-true.png"]
   31  
   32  . Navigate to the *Resources* tab.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_enabling-the-tls-dns-challenge-on-azure.adoc:
    1: [id="enabling-the-TLS-DNS-challenge-on-azure_{context}"]
    2  = Enabling the TLS and DNS challenge on Azure
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_enabling-the-tls-dns-challenge-on-google-cloud-platform.adoc:
    1: [id="enabling-the-tls-dns-challenge-on-google-cloud-platform_{context}"]
    2  = Enabling the TLS and DNS challenge on Google Cloud Platform
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_finding-che-cluster-url-in-openshift-4-web-console.adoc:
    1: [id="finding-{prod-id-short}-cluster-url-in-openshift-4-web-console_{context}"]
    2  = Finding {prod-short} instance URL in OpenShift 4 web console
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_finding-che-cluster-url-using-openshift-4-cli-tools.adoc:
    1: [id="finding-{prod-id-short}-cluster-url-using-openshift-4-cli-tools_{context}"]
    2  = Finding {prod-short} cluster URL using the OpenShift 4 CLI
    3  This section describes how to obtain the {prod-short} cluster URL using the OpenShift 4 CLI (command line interface). The URL can be retrieved from the OpenShift logs or from the `checluster` Custom Resource.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_finding-the-cluster-where-the-hosted-che-workspace-is-running.adoc:
    1: [id="finding-the-cluster-where-the-hosted-{prod-id-short}-workspace-is-running_{context}"]
    2  = Finding the cluster where the Hosted {prod-short} workspace is running
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_importing-projects-from-github-in-hosted-che.adoc:
    6  // include::<path>/proc_importing-projects-from-github-in-hosted-che.adoc[leveloffset=+1]
    7  
    8: [id="importing-projects-from-github-in-hosted-che_{context}"]
    9  = Importing projects from GitHub in Hosted {prod-short}
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager-on-kubernetes.adoc:
    1: [id="installing-cert-manager-on-kubernetes_{context}"]
    2  = Installing cert-manager on Kubernetes
    3  
    .
   76  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   77  +
   78: image::installation/dns-challenge-gcp.png[link="{imagesdir}/installation/dns-challenge-gcp.png"]
   79  
   80  . The cert-manager logs should contain information about the DNS challenge. To get the logs (here, `cert-manager-8d478bb45-2924h` is the name of the cert-manager pod):

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager.adoc:
    1: [id="installing-cert-manager-on-azure_{context}"]
    2  = Installing cert-manager on Azure
    3  
    .
   91  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   92  +
   93: image::installation/new-dns-challenge-added.png[link="{imagesdir}/installation/new-dns-challenge-added.png"]
   94  +
   95  The cert-manager logs should contain information about the DNS challenge.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-azure-using-the-chectl-command.adoc:
    1  :page-liquid:
    2  
    3: [id="installing-{prod-id-short}-on-azure-using-the-{prod-cli}-command_{context}"]
    4  = Installing {prod-short} on Azure using the {prod-cli} command
    5  
    .
   13  * To install {prod-short}, run the following `{prod-cli}` command:
   14  +
   15: [subs="+attributes"]
   16  ----
   17  $ {prod-cli} server:start --installer=helm --platform=k8s --tls \
   ..
   51  Keycloak and {prod-short} now have valid wildcard certificates.
   52  
   53: image::installation/wildcard-certificates-for-keycloak-che.png[link="{imagesdir}/installation/wildcard-certificates-for-keycloak-che.png"]
   54  
   55  .{prod-short} user dashboard
   56: image::installation/che-user-dashboard.png[link="{imagesdir}/installation/che-user-dashboard.png"]
   57  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-codeready-containers-using-chectl.adoc:
    1: [id="installing-{prod-id-short}-on-codeready-containers-using-{prod-cli}_{context}"]
    2  = Installing che on CodeReady Containers using {prod-cli}
    3  
    .
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-google-cloud-platform-using-chectl.adoc:
    1  :page-liquid:
    2  
    3: [id="installing-{prod-id-short}-on-google-cloud-platform-using-{prod-cli}_{context}"]
    4  = Installing {prod-short} on Google Cloud Platform using {prod-cli}
    5  
    .
   12  To install {prod-short} on Google Cloud Platform, run the following `{prod-cli}` command:
   13  +
   14: [subs="+attributes"]
   15  ----
   16  $ {prod-cli} server:start --installer=helm --platform=k8s --tls --domain=gcp.my-ide.cloud --multiuser
   ..
   48  
   49  .Keycloak and {prod-short} with valid wildcard certificates
   50: image::installation/keycloak-and-che-with-valid-wildcard-certs.gif[link="{imagesdir}/installation/keycloak-and-che-with-valid-wildcard-certs.gif"]
   51  
   52  .{prod-short} user dashboard
   53: image::installation/che-user-dashboard-gcp.png[link="{imagesdir}/installation/che-user-dashboard-gcp.png"]
   54  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kind-using-chectl.adoc:
    1: [id="installing-{prod-id-short}-on-kind-using-{prod-cli}_{context}"]
    2  = Installing che on kind using {prod-cli}
    3  
    .
   95  . Run `{prod-cli}`, using the external IP of the `ingress-nginx` Service, as an https://nip.io[nip.io] url.
   96  +
   97: [subs="+quotes,+attributes"]
   98  ----
   99  $ {prod-cli} server:start --installer operator --platform k8s --domain 172.17.250.1.nip.io

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kubernetes-using-the-chectl-command.adoc:
    3  // deploying-che-on-kubernetes-on-aws
    4  
    5: [id="installing-{prod-id-short}-on-kubernetes-using-the-{prod-cli}-command_{context}"]
    6  = Installing {prod-short} on Kubernetes using the {prod-cli} command
    7  
    .
   16  . Run the following command:
   17  +
   18: [subs="+quotes,+attributes",options="nowrap"]
   19  ----
   20  $ {prod-cli} server:start --platform=k8s --installer=helm --domain=aws.my-ide.cloud --multiuser --tls
   ..
   53  . The certificate generated by Let’s Encrypt is a valid certificate.
   54  +
   55: image::installation/certificate-generate-lets-encrypt.png[link="{imagesdir}/installation/certificate-generate-lets-encrypt.png"]
   56  +
   57: image::installation/eclipse-che-welcome-to-your-workspace.png[link="{imagesdir}/installation/eclipse-che-welcome-to-your-workspace.png"]
   58  
   59  // .Additional Resources

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minikube-using-chectl.adoc:
    1: [id="installing-{prod-id-short}-on-minikube-using-{prod-cli}_{context}"]
    2  = Installing che on Minikube using {prod-cli}
    3  
    .
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minishift-using-chectl.adoc:
    1: [id="installing-{prod-id-short}-on-minishift-using-{prod-cli}_{context}"]
    2  = Installing {prod-short} on Minishift using {prod-cli}
    3  
    .
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator-and-ssl.adoc:
    1  // installing-che-on-openshift-3-using-the-operator
    2  
    3: [id="installing-{prod-id-short}-on-openshift-3-using-the-operator-and-ssl_{context}"]
    4  = Installing {prod-short} on OpenShift 3 using the Operator and SSL
    5  
    .
   18  . Run the following command to create the {prod-short} instance:
   19  +
   20: [subs="+quotes,+attributes",options="nowrap"]
   21  ----
   22  $ {prod-cli} server:start -n _<project-name>_ --domain=<OPENSHIFT_APPS_URL> --tls 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator.adoc:
    3  // installing-che-on-openshift-3-using-the-operator
    4  
    5: [id="installing-{prod-id-short}-on-openshift-3-using-the-operator_{context}"]
    6  = Installing {prod-short} on OpenShift 3 using the Operator
    7  
    .
   20  . Create a new project called *{prod-id-short}*:
   21  +
   22: [subs="+quotes,+attributes"]
   23  ----
   24  $ oc new-project {prod-id-short}
   ..
   27  . Run the following command to create the {prod-short} instance:
   28  +
   29: [subs="+quotes,+attributes",options="nowrap"]
   30  ----
   31  $ {prod-cli} server:start --platform=openshift --installer=operator \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-storage-classes.adoc:
    1: [id="proc_installing-{prod-id-short}-using-storage-classes_{context}"]
    2  
    3  = Installing {prod} using storage classes
    .
   23  * To provide storage class name for Postgres PVC, use the `{prod-cli}` `server:start` command with the `--postgres-pvc-storage-class-name` flag:
   24  +
   25: [subs="+quotes,+attributes"]
   26  ----
   27  $ {prod-cli} server:start -m -p minikube -a operator --postgres-pvc-storage-class-name=postgress-storage
   ..
   30  * To provide storage class name for {prod-short} workspaces, use the `server:start` command with the `--workspace-pvc-storage-class-name` flag:
   31  +
   32: [subs="+quotes,+attributes"]
   33  ----
   34  $ {prod-cli} server:start -m -p minikube -a operator --workspace-pvc-storage-class-name=workspace-storage
   ..
   70  . Start the {prod-id-short} server with your custom resources:
   71  +
   72: [subs="+quotes,+attributes"]
   73  ----
   74  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml
   ..
  124  
  125  . Bind the two Persisted Volumes:
  126: [subs="+quotes,+attributes"]
  127  ----
  128  $ kubectl apply -f che-workspace-pv.yaml -f che-postgres-pv.yaml
  ...
  176  . Start the {prod-id-short} server with your custom resources:
  177  +
  178: [subs="+quotes,+attributes"]
  179  ----
  180  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-the-che-operator-in-openshift-4-web-console.adoc:
    1: [id="installing-{prod-id-short}-using-the-{prod-id-short}-operator-in-openshift-4-web-console_{context}"]
    2  = Installing {prod-short} using the {prod-short} Operator in OpenShift 4 web console
    3  
    .
   32  . The `eclipse-che` cluster is created.
   33  +
   34: image::installation/eclipse-che-cluster-create-che-cluster.png[link="{imagesdir}/installation/eclipse-che-cluster-create-che-cluster.png"]
   35  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-dns-on-google-cloud-platform.adoc:
    1: [id="installing-dns-on-google-cloud-platform_{context}"]
    2  = Installing DNS on Google Cloud Platform
    3  
    .
    6  . Using the Cloud DNS, create a zone called *eclipse-che* and, for example, a DNS name *gcp.my-ide.cloud*. Click the btn:[Create] button.
    7  +
    8: image::installation/creating-dns-zone-on-gcp.png[link="{imagesdir}/installation/creating-dns-zone-on-gcp.png"]
    9  +
   10  The Cloud DNS zone is created.
   11  +
   12: image::installation/cloud-dns-zone-on-gcp.png[link="{imagesdir}/installation/cloud-dns-zone-on-gcp.png"]
   13  
   14  . Click the *Registrar Setup* link in the top-right corner of the window. The name servers (NS) to be added to the registrar are displayed.
   15  +
   16: image::installation/registrar-setup-gcp.png[link="{imagesdir}/installation/registrar-setup-gcp.png"]
   17  
   18  . Update the DNS zone (example: `ovh` domain).
   19  . Add the `*.gcp.my-ide.cloud` entry to the external Ingress IP on the cloud DNS.
   20  +
   21: image::installation/dns-settings-gcp.png[link="{imagesdir}/installation/dns-settings-gcp.png"]
   22  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-ingress-on-kubernetes.adoc:
    1: [id="installing-ingress-on-kubernetes_{context}"]
    2  = Installing Ingress on Kubernetes
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-codeready-containers-using-chectl.adoc:
    1: [id="installing-multi-user-{prod-id-short}-on-codeready-containers-using-{prod-cli}_{context}"]
    2  = Installing multi-user {prod-short} on CodeReady Containers using {prod-cli}
    3  
    .
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minikube-using-chectl.adoc:
    1: [id="installing-multi-user-{prod-id-short}-on-minikube-using-{prod-cli}_{context}"]
    2  = Installing multi-user {prod-short} on Minikube using {prod-cli}
    3  
    .
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minishift-using-chectl.adoc:
    1: [id="installing-multi-user-{prod-id-short}-on-minishift-using-{prod-cli}_{context}"]
    2  = Installing multi-user {prod-short} on Minishift using {prod-cli}
    3  
    .
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-che-operator-in-openshift-4-web-console.adoc:
    1: [id="installing-the-{prod-id-short}-operator-in-openshift-4-web-console_{context}"]
    2  = Installing the {prod-short} Operator in OpenShift 4 web console
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-linux-or-macos.adoc:
    1: [id="installing-the-{prod-cli}-management-tool-on-linux-or-macos_{context}"]
    2  = Installing the {prod-cli} management tool on Linux or macOS
    3  
    .
   18  . Run the following command in the terminal (this downloads and executes the `install.sh` script):
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ bash <(curl -sL  https://www.eclipse.org/che/{prod-cli}/)
   ..
   25  . Run the following command to verify that the `{prod-cli}` binary used is `/usr/local/bin/{prod-cli}`:
   26  +
   27: [subs="+attributes"]
   28  ----
   29  $ which {prod-cli}
   ..
   34  . Run the following command to verify that the version of {prod-cli} that is the expected one.
   35  +
   36: [subs="+attributes"]
   37  ----
   38  $ {prod-cli} --version
   ..
   46  . Read the installation logs.
   47  +
   48: [subs="+attributes"]
   49  ----
   50  $ cat {prod-cli}-install.log

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-windows.adoc:
    1: [id="installing-the-{prod-cli}-management-tool-on-windows_{context}"]
    2  = Installing the {prod-cli} management tool on Windows
    3  
    .
    9  * Run the following command in the PowerShell terminal:
   10  +
   11: [subs="+attributes"]
   12  ----
   13  C:\Users> Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://www.eclipse.org/che/{prod-cli}/win/'))

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_logging-in-to-che-on-openshift-for-the-first-time-registering-as-a-new-user.adoc:
    1: [id="logging-in-to-{prod-id-short}-on-openshift-for-the-first-time-registering-as-a-new-user_{context}"]
    2  = Logging in to {prod-short} on OpenShift for the first time registering as a new user
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_logging-in-to-che-on-openshift-for-the-first-time-using-oauth.adoc:
    1: [id="logging-in-to-{prod-id-short}-on-openshift-for-the-first-time-using-oauth_{context}"]
    2  = Logging in to {prod-short} on OpenShift for the first time using OAuth
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-azure-for-installing-che.adoc:
    1: [id="preparing-azure-for-installing-che_{context}"]
    2  = Preparing Azure for installing {prod-short}
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-openshift-3-for-installing-che.adoc:
    1  // installing-che-on-openshift-3-using-the-operator
    2  
    3: [id="preparing-openshift-3-for-installing-che_{context}"]
    4  = Preparing OpenShift 3 for installing {prod-short}
    5  
    .
   15  . Log in to OpenShift. See link:https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html#basic-setup-and-login[Basic Setup and Login].
   16  +
   17: [subs="+attributes,+quotes",options="nowrap"]
   18  ----
   19  $ oc login
   ..
   22  . Run the following command to verify that the version of the `oc` OpenShift CLI management tool is 3.11:
   23  +
   24: [subs="+attributes,+quotes",options="nowrap"]
   25  ----
   26  $ oc version
   ..
   30  . Run the following commands to create a dummy project to find the URL that this OpenShift instance is using to deploy applications.
   31  +
   32: [subs="+attributes,+quotes",options="nowrap"]
   33  ----
   34  $ oc new-project hello-world
   ..
   44  . Remove the dummy project:
   45  +
   46: [subs="+attributes,+quotes",options="nowrap"]
   47  ----
   48  $ oc delete project hello-world

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-the-aws-system-for-installing-che.adoc:
    1  // deploying-che-on-kubernetes-on-aws
    2  
    3: [id="preparing-the-aws-system-for-installing-che_{context}"]
    4  = Preparing the AWS system for installing {prod-short}
    5  
    .
   35  . Create the zone on AWS:
   36  +
   37: [subs="+quotes",options="nowrap"]
   38  ----
   39  $ aws route53 create-hosted-zone --name aws.my-ide.cloud --caller-reference 1
   ..
   97  . After the cluster is ready, validate it:
   98  +
   99: [subs="+quotes",options="nowrap"]
  100  ----
  101  $ kops validate cluster
  ...
  121  . Check the cluster using the `kubectl` command. The `kubectl` context is also configured automatically by the kops tool:
  122  +
  123: [subs="+quotes",options="nowrap"]
  124  ----
  125  $ kubectl config current-context
  ...
  138  . Install the default configuration.
  139  +
  140: [subs="+quotes",options="nowrap"]
  141  ----
  142  $ kubectl apply \
  ...
  146  . Install the configuration for AWS.
  147  +
  148: [subs="+quotes",options="nowrap"]
  149  ----
  150  $ kubectl apply \
  ...
  156  The following output confirms that the Ingress controller is running.
  157  +
  158: [subs="+quotes",options="nowrap"]
  159  ----
  160  $ kubectl get pods --namespace ingress-nginx
  ...
  165  . Find the external IP of ingress-nginx.
  166  +
  167: [subs="+quotes",options="nowrap"]
  168  ----
  169  $ kubectl get services --namespace ingress-nginx -o jsonpath='{.items[].status.loadBalancer.ingress[0].hostname}'
  ...
  179  Output similar to the following means a needed role must be created manually:
  180  +
  181: [subs="+quotes",options="nowrap"]
  182  ----
  183  arn:aws:sts::269287474311:assumed-role...4bff is not authorized to perform: iam:CreateServiceLinkedRole on resource: arn:aws:iam::269287474311:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing
  ...
  186  Run the following command to create the role:
  187  +
  188: [subs="+quotes",options="nowrap"]
  189  ----
  190  $ aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"
  ...
  194  . Create the wildcard DNS `*` (for `*.aws-my-ide.cloud`) with the previous hostname and ensure to add the dot (`.`) at the end of the hostname. In the *Type* drop-down list, select *CNAME*.
  195  +
  196: image::installation/create-record-set.png[link="{imagesdir}/installation/create-record-set.png"]
  197  +
  198  The following is an example of the resulting window after adding all the values.
  199  +
  200: image::installation/create-record-set-all-values.png[link="{imagesdir}/installation/create-record-set-all-values.png"]
  201  +
  202  The `che.aws.my-ide.cloud` address must resolve to an IP address.
  203  +
  204: [subs="+quotes",options="nowrap"]
  205  ----
  206  $ host che.aws.my-ide.cloud
  ...
  219  . Use the following command to obtain the zone ID:
  220  +
  221: [subs="+quotes",options="nowrap"]
  222  ----
  223  $ aws route53 list-hosted-zones
  ...
  239  . Copy the following content and replace `INSERT_ZONE_ID` with the route53 zone ID:
  240  +
  241: [subs="+quotes",options="nowrap"]
  242  ----
  243  {
  ...
  269  . In the *EC2 Dashboard*, identify the *IAM role* used by the master node.
  270  +
  271: image::installation/aws-lauch-instance.png[link="{imagesdir}/installation/aws-lauch-instance.png"]
  272  +
  273  It is located under the *Description* tab, in the *IAM role* field.
  274  +
  275: image::installation/describtion-tab-iam-role.png[link="{imagesdir}/installation/describtion-tab-iam-role.png"]
  276  
  277  . Click the *IAM role* link (`masters.eu.aws.my-ide.cloud`, in this case).
  278  . Click the *Add inline policy* link at the bottom of the window.
  279  +
  280: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  281  
  282  . In the *Create policy* window, on the *JSON* tab, paste the content of the JSON file created earlier and click the *Review policy* button.
  283  +
  284: image::installation/aws-create-policy.png[link="{imagesdir}/installation/aws-create-policy.png"]
  285  
  286  . In the *Name* field, type `eclipse-che-route53` and click *Create Policy*.
  287  +
  288: image::installation/create-policy-review-policy.png[link="{imagesdir}/installation/create-policy-review-policy.png"]
  289  
  290  
  ...
  293  . To install cert-manager, run the following commands (for details, see link:https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html[Installing Cert on Kubernetes]):
  294  +
  295: [subs="+quotes",options="nowrap"]
  296  ----
  297  $ kubectl create namespace cert-manager
  ...
  303  . Set `validate=false`. If set to `true`, it will only work with the latest Kubernetes:
  304  +
  305: [subs="+quotes",options="nowrap"]
  306  ----
  307  $ kubectl apply \
  ...
  312  . Create the {prod-short} namespace if it does not already exist:
  313  +
  314: [subs="+quotes",options="nowrap"]
  315  ----
  316  $ kubectl create namespace che
  ...
  320  . Create the *cert-manager* user:
  321  +
  322: [subs="+quotes",options="nowrap"]
  323  ----
  324  $ aws iam create-user --user-name cert-manager
  ...
  336  . Create the access key:
  337  +
  338: [subs="+quotes",options="nowrap"]
  339  ----
  340  $ aws iam create-access-key --user-name cert-manager
  ...
  354  . Create a secret from the `SecretAccessKey` content.
  355  +
  356: [subs="+quotes",options="nowrap"]
  357  ----
  358  $ kubectl create secret generic aws-cert-manager-access-key \
  ...
  362  . Use the *Add inline policy* link to add the inline policy to link:https://console.aws.amazon.com/iam/home#/users/cert-manager[AWS Cert-Manager].
  363  +
  364: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  365  
  366  . Paste the following inline policy in the *JSON* tab:
  367  +
  368: [subs="+quotes",options="nowrap"]
  369  ----
  370  {
  ...
  391  
  392  +
  393: image::installation/json-review-policy.png[link="{imagesdir}/installation/json-review-policy.png"]
  394  
  395  . Click *Review policy*.
  396  +
  397: image::installation/create-policy-review.png[link="{imagesdir}/installation/create-policy-review.png"]
  398  
  399  . In the *Name* field, type `route53`, and click *Create policy*.
  ...
  451  . Check if the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is being added to the DNS zone for _Let’s encrypt_.
  452  +
  453: image::installation/aws-hosted-zones-dns.png[link="{imagesdir}/installation/aws-hosted-zones-dns.png"]
  454  +
  455  The cert-manager logs should contain information about the DNS challenge.
  ...
  457  . Obtain the name of the pods:
  458  +
  459: [subs="+quotes",options="nowrap"]
  460  ----
  461  $ kubectl get pods --namespace cert-manager
  ...
  469  . Obtain the logs using the following command (here, `cert-manager-8d478bb45-sdfmz` is the name of the cert-manager pod):
  470  +
  471: [subs="+quotes",options="nowrap"]
  472  ----
  473  $ kubectl logs -f cert-manager-8d478bb45-sdfmz -n cert-manager
  ...
  484  . Ensure that the certificate is ready:
  485  +
  486: [subs="+quotes",options="nowrap"]
  487  ----
  488  $ kubectl describe certificate/che-tls -n che
  ...
  502  . Wait for the status to become `OK` and ensure that the log contains the following entry:
  503  +
  504: [subs="+quotes",options="nowrap"]
  505  ----
  506  I0729 13:56:26.140886       1 conditions.go:143] Found status change for Certificate "che-tls" condition "Ready": "False" -> "True"; setting lastTransitionTime to 2019-07-29 13:56:26.140866531 +0000 UTC m=+4557.134131468
  ...
  509  . Ensure that the status is up-to-date using the following command:
  510  +
  511: [subs="+quotes",options="nowrap"]
  512  ----
  513  $ kubectl describe certificate/che-tls -n che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_registering-to-hosted-che.adoc:
    3  // assembly_hosted-che.adoc
    4  
    5: [id="registering-to-hosted-che_{context}"]
    6  = Registering to Hosted{nbsp}{prod-short}
    7  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_upgrading-the-chectl-management-tool.adoc:
    1: [id="upgrading-the-{prod-cli}-management-tool_{context}"]
    2  = Upgrading the {prod-cli} management tool
    3  
    .
   16  * Run the following command in the terminal to update `{prod-cli}` to the latest version.
   17  +
   18: [subs="+attributes"]
   19  ----
   20  # {prod-cli} update
   ..
   34  To move to a different channel, invoke the update with the name of the channel as an optional argument.
   35  
   36: [subs="+attributes"]
   37  ----
   38  # {prod-cli} update [next|stable]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_using-codeready-containers-to-set-up-openshift-4.adoc:
    1: [id="using-codeready-containers-to-set-up-openshift-4_{context}"]
    2  = Using CodeReady Containers to set up OpenShift 4
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_using-docker-desktop-to-set-up-kubernetes.adoc:
    1: [id="using-docker-desktop-to-set-up-kubernetes_{context}"]
    2  = Using Docker Desktop to set up Kubernetes
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_using-minikube-to-set-up-kubernetes.adoc:
    1: [id="using-minikube-to-set-up-kubernetes_{context}"]
    2  = Using Minikube to set up Kubernetes
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_using-minishift-to-set-up-openshift-3.adoc:
    1: [id="using-minishift-to-set-up-openshift-3_{context}"]
    2  = Using Minishift to set up OpenShift 3
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_using-the-ide.adoc:
    8  ---
    9  
   10: [id="using-the-ide_{context}"]
   11  = Using the IDE
   12  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-in-openshift-4-web-console.adoc:
    1: [id="viewing-the-state-of-the-{prod-id-short}-cluster-deployment-in-openshift-4-web-console_{context}"]
    2  = Viewing the state of the {prod-short} instance deployment in OpenShift 4 web console
    3  
    .
    9  
   10  * A {prod-short} is being deployed on this instance of OpenShift 4.
   11: ifeval::["{context}" == "installing-che-on-openshift-4-from-operatorhub"]
   12  See xref:installing-{prod-id-short}-using-the-{prod-id-short}-operator-in-openshift-4-web-console_{context}[].
   13  endif::[]
   ..
   33  The screen displays the state of the resources assigned to the {prod-short} deployment.
   34  +
   35: image::installation/eclipse-che-resources-tab.png[link="{imagesdir}/installation/eclipse-che-resources-tab.png"]
   36  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools.adoc:
    1: [id="viewing-the-state-of-the-{prod-id-short}-cluster-deployment-using-openshift-4-cli-tools_{context}"]
    2  = Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools
    3  
    .
   15  . Run the following commands to select the `{project-context}` project:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ oc project _<project_name>_
   ..
   46  Example output of the command:
   47  +
   48: [options="nowrap",role="white-space-pre",subs="+quotes,+attributes"]
   49  ----
   50  include::examples/{project-context}-cluster-deployment-openshift-logs.adoc[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_about-hosted-che.adoc:
    8  // include::proc_about-hosted-che.adoc[leveloffset=+1]
    9  
   10: [id="about-hosted-che_{context}"]
   11  = About Hosted {prod-short}
   12  
   ..
   14  A {prod-short} server is running on OpenShift{nbsp}Dedicated, and the user base is spread across multiple OpenShift{nbsp}Online clusters where workspaces are created.
   15  
   16: [id="terms-of-service_{context}"]
   17  == Terms of service
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-7-known-issues.adoc:
    1: [id="{prod-id-short}-known-issues"]
    2  = {prod-short} {prod-ver} known issues
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-deployment-options-using-chectl.adoc:
    1: [id="{prod-id-short}-deployment-options-using-{prod-cli}_{context}"]
    2  = {prod-short} deployment options using {prod-cli}
    3  
    4: [options="nowrap",subs="+attributes"]
    5  ----
    6  {prod-cli} server:start --help

826 matches across 400 files


Searching 538 files for "[a-z]+\"\]" (regex)

C:\Users\yanar_000\Documents\che-docs\src\main\_layouts\default.html:
   37      <script>
   38          $(function () {
   39:             $('[data-toggle="tooltip"]').tooltip()
   40          })
   41      </script>

C:\Users\yanar_000\Documents\che-docs\src\main\css\customstyles.css:
  768  }
  769  
  770: a[data-toggle="tooltip"] {
  771      color: #649345;
  772      font-style: italic;
  ...
 1240   */
 1241  /* 1 */
 1242: .ie9 img[src$=".svg"] {
 1243      width: 100%;
 1244  }
 1245  /* 2 */
 1246  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
 1247:     img[src$=".svg"] {
 1248          width: 100%;
 1249      }

C:\Users\yanar_000\Documents\che-docs\src\main\css\printstyles.css:
   25      color: blue !important;
   26  }
   27: a[href*="mailto"]::after, a[data-toggle="tooltip"]::after, a[href].noCrossRef::after {
   28      content: "";
   29  }

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-blue.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-che.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-green.css:
   40  }
   41  
   42: a[data-toggle="tooltip"] {
   43      color: #649345;
   44      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\fonts\fontawesome-webfont.woff2:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\js\customscripts.js:
   12      }
   13      // activate tooltips. although this is a bootstrap js function, it must be activated this way in your theme.
   14:     $('[data-toggle="tooltip"]').tooltip({
   15          placement : 'top'
   16      });
   ..
   27  $(function() {
   28      var json, tabsState;
   29:     $('a[data-toggle="pill"], a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
   30          var href, json, parentId, tabsState;
   31  

C:\Users\yanar_000\Documents\che-docs\src\main\js\jekyll-search.js:
    1: !function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module){module.exports=function(){function receivedResponse(xhr){return 200==xhr.status&&4==xhr.readyState}function handleResponse(xhr,callback){xhr.onreadystatechange=function(){if(receivedResponse(xhr))try{callback(null,JSON.parse(xhr.responseText))}catch(err){callback(err,null)}}}var self=this;self.load=function(location,callback){var xhr=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");xhr.open("GET",location,!0),handleResponse(xhr,callback),xhr.send()}}},{}],2:[function(require,module){function FuzzySearchStrategy(){function createFuzzyRegExpFromString(string){return new RegExp(string.split("").join(".*?"),"gi")}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),!!string.match(createFuzzyRegExpFromString(crit)))}}module.exports=new FuzzySearchStrategy},{}],3:[function(require,module){function LiteralSearchStrategy(){function doMatch(string,crit){return string.toLowerCase().indexOf(crit.toLowerCase())>=0}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),doMatch(string,crit))}}module.exports=new LiteralSearchStrategy},{}],4:[function(require,module){module.exports=function(){function findMatches(store,crit,strategy){for(var data=store.get(),i=0;i<data.length&&matches.length<limit;i++)findMatchesInObject(data[i],crit,strategy);return matches}function findMatchesInObject(obj,crit,strategy){for(var key in obj)if(strategy.matches(obj[key],crit)){matches.push(obj);break}}function getSearchStrategy(){return fuzzy?fuzzySearchStrategy:literalSearchStrategy}var self=this,matches=[],fuzzy=!1,limit=10,fuzzySearchStrategy=require("./SearchStrategies/fuzzy"),literalSearchStrategy=require("./SearchStrategies/literal");self.setFuzzy=function(_fuzzy){fuzzy=!!_fuzzy},self.setLimit=function(_limit){limit=parseInt(_limit,10)||limit},self.search=function(data,crit){return crit?(matches.length=0,findMatches(data,crit,getSearchStrategy())):[]}}},{"./SearchStrategies/fuzzy":2,"./SearchStrategies/literal":3}],5:[function(require,module){module.exports=function(_store){function isObject(obj){return!!obj&&"[object Object]"==Object.prototype.toString.call(obj)}function isArray(obj){return!!obj&&"[object Array]"==Object.prototype.toString.call(obj)}function addObject(data){return store.push(data),data}function addArray(data){for(var added=[],i=0;i<data.length;i++)isObject(data[i])&&added.push(addObject(data[i]));return added}var self=this,store=[];isArray(_store)&&addArray(_store),self.clear=function(){return store.length=0,store},self.get=function(){return store},self.put=function(data){return isObject(data)?addObject(data):isArray(data)?addArray(data):void 0}}},{}],6:[function(require,module){module.exports=function(){var self=this,templatePattern=/\{(.*?)\}/g;self.setTemplatePattern=function(newTemplatePattern){templatePattern=newTemplatePattern},self.render=function(t,data){return t.replace(templatePattern,function(match,prop){return data[prop]||match})}}},{}],7:[function(require){!function(window){"use strict";function SimpleJekyllSearch(){function initWithJSON(){store.put(opt.dataSource),registerInput()}function initWithURL(url){jsonLoader.load(url,function(err,json){err?throwError("failed to get JSON ("+url+")"):(store.put(json),registerInput())})}function throwError(message){throw new Error("SimpleJekyllSearch --- "+message)}function validateOptions(_opt){for(var i=0;i<requiredOptions.length;i++){var req=requiredOptions[i];_opt[req]||throwError("You must specify a "+req)}}function assignOptions(_opt){for(var option in opt)opt[option]=_opt[option]||opt[option]}function isJSON(json){try{return json instanceof Object&&JSON.parse(JSON.stringify(json))}catch(e){return!1}}function emptyResultsContainer(){opt.resultsContainer.innerHTML=""}function appendToResultsContainer(text){opt.resultsContainer.innerHTML+=text}function registerInput(){opt.searchInput.addEventListener("keyup",function(e){if (e.keyCode == 38 || e.keyCode == 40) return false;return 0==e.target.value.length?void emptyResultsContainer():void render(searcher.search(store,e.target.value))})}function render(results){if(emptyResultsContainer(),0==results.length)return appendToResultsContainer(opt.noResultsText);for(var i=0;i<results.length;i++)appendToResultsContainer(templater.render(opt.searchResultTemplate,results[i]))}var self=this,requiredOptions=["searchInput","resultsContainer","dataSource"],opt={searchInput:null,resultsContainer:null,dataSource:[],searchResultTemplate:'<li><a href="{url}" title="{desc}">{title}</a></li>',noResultsText:"No results found",limit:10,fuzzy:!1};self.init=function(_opt){validateOptions(_opt),assignOptions(_opt),isJSON(opt.dataSource)?initWithJSON(opt.dataSource):initWithURL(opt.dataSource)}}var Searcher=require("./Searcher"),Templater=require("./Templater"),Store=require("./Store"),JSONLoader=require("./JSONLoader"),searcher=new Searcher,templater=new Templater,store=new Store,jsonLoader=new JSONLoader;window.SimpleJekyllSearch=new SimpleJekyllSearch}(window,document)},{"./JSONLoader":1,"./Searcher":4,"./Store":5,"./Templater":6}]},{},[7]);
    2  
    3  var currentSelection = 0;

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authorizing-users.adoc:
   40  include::ref_monitorsystem-permission.adoc[leveloffset=+1]
   41  
   42: ifeval::["{project-context} == "che"]
   43  include::con_super-privileged-mode.adoc[leveloffset=+1]
   44  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_deploying-the-registries.adoc:
   14  Otherwise, these images can be pushed to a container registry (public, such as `quay.io`, or the DockerHub, or a private registry).
   15  
   16: ifeval::["{project-context}" == "che"]
   17  include::proc_deploying-registries-in-kubernetes.adoc[leveloffset=+1]
   18  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_monitoring-che.adoc:
   22  include::proc_collecting-che-metrics-with-prometheus.adoc[leveloffset=+1]
   23  
   24: ifeval::["{project-context}" == "che"]
   25  
   26  include::proc_viewing-che-metrics-on-grafana-dashboards.adoc[leveloffset=+1]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_authorization-and-user-management.adoc:
   13  To find your Keycloak URL:
   14  
   15: ifeval::["{project-context}" == "che"]
   16  If {prod-short} is running on Kubernetes:
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_kubernetes-image-puller-overview.adoc:
   10  The Kubernetes Image Puller pulls its configuration from a `ConfigMap` with the following available parameters:
   11  
   12: [id="kubernetes-image-puller-configuration"]
   13  .Kubernetes Image Puller parameters
   14: [options="header"]
   15  |===
   16  |Parameter |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_roles-in-an-organization.adoc:
    5  :context: roles-in-an-organization
    6  
    7: [id="roles-in-an-organization"]
    8  = Roles in an organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_super-privileged-mode.adoc:
   10  The *super-privileged* mode is disabled by default. To change to the *super-privileged* mode, set the `CHE_SYSTEM_SUPER__PRIVILEGED__MODE` variable to `true` in the `che.env` file. The following is a list of services that are enabled for users with the *manageSystems* permissions and with *super-privileged* mode on.
   11  
   12: [options="header"]
   13  |====
   14  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_authenticating-to-the-che-server-using-openid.adoc:
   69  To obtain the token, send a request to the token endpoint with the username and password credentials. This request can be schematically described as the following cURL request:
   70  
   71: [subs="+quotes"]
   72  ----
   73  $ curl --data "grant_type=password&client_id=__<client_name>__&username=__<username>__&password=__<password>__" \
   ..
   88  To do this, send a request to the token endpoint that can be schematically described as the following cURL request:
   89  
   90: [subs="+quotes"]
   91  ----
   92  $ curl -X POST -d "client_id=__<client_name>__" \
   ..
  104  
  105  `_<user_openshift_token>_` is the token retrieved by the end-user with the command:
  106: [subs="+quotes"]
  107  ----
  108  $ oc whoami --show-token

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-devfile-registry.adoc:
   19  +
   20  .File organization for a devfile
   21: [subs="+quotes"]
   22  ----
   23  ./che-devfile-registry/devfiles/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-plug-in-registry.adoc:
   19  +
   20  .File organization for a plugin
   21: [subs="+quotes"]
   22  ----
   23  ./che-plugin-registry/v3/plugins/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_collecting-che-metrics-with-prometheus.adoc:
   15  +
   16  .Prometheus configuration example
   17: [source,yaml,subs="+attributes"]
   18  ----
   19  include::examples/prometheus-config.yaml[]
   20  ----
   21  +
   22: ifeval::["{project-context}" == "che"]
   23  Latest version: link:https://+github.com/eclipse/che/blob/master/deploy/openshift/templates/monitoring/prometheus-config.yaml[example `prometheus-config.yaml` on GitHub].
   24  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-keycloak-tokens.adoc:
    6  You can change the following Keycloak token settings:
    7  
    8: image::keycloak/keycloak_realm.png[link="{imagesdir}/keycloak/keycloak_realm.png"]
    9  
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-smtp-and-email-notifications.adoc:
    5  :context: configuring-smtp-and-email-notifications
    6  
    7: [id="configuring-smtp-and-email-notifications"]
    8  = Configuring SMTP and email notifications
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-helm.adoc:
    8  * The `helm` binary
    9  
   10: ifeval::["{project-context}" == "che"]
   11  * An OpenShift or Kubernetes cluster to install to
   12  * The `oc` or the `kubectl` binary
   ..
   15  endif::[]
   16  
   17: ifeval::["{project-context}" != "che"]
   18  * An OpenShift cluster to install to
   19  * The `oc` binary
   ..
   23  
   24  .Parameters for installing with Helm
   25: [options="header"]
   26  |===
   27  |Value |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-openshift-templates.adoc:
   12  
   13  .Parameters for installing with OpenShift templates
   14: [options="header"]
   15  |===
   16  |Value |Usage |Default
   ..
   40  . Log into the OpenShift cluster and create a namespace to deploy the puller into:
   41  +
   42: [subs="+quotes"]
   43  ----
   44  $ oc login -u username -p password https://openshift-cluster-api:6443
   ..
   61  To set different values than the defaults, use:
   62  +
   63: [subs="+quotes"]
   64  ----
   65  $ oc process -p __<parameterName>__=__<value>__ -f deploy/openshift/__<template>__ | oc apply -f -

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-kubernetes.adoc:
   10  . To deploy the plug-in registry using the Helm chart, run the following command:
   11  +
   12: [subs="+quotes,+attributes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__     <1>
   ..
   28  . The devfile registry also has a Helm chart in the `deploy/kubernetes/che-devfile-registry/` directory of the GitHub repository. To deploy it, run the command:
   29  +
   30: [subs="+quotes,+attributes"]
   31  ----
   32  NAMESPACE=__<namespace-name>__     <1>
   ..
   46  . The Helm chart creates a pod, a service, and an Ingress. To get them, use `app=che-plugin-registry` (or `app=che-plugin-registry` for the devfile registry).
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ kubectl get -o custom-columns=TYPE:.kind,NAME:.metadata.name \
   ..
   58  . To verify that the new plug-in is correctly published to the plug-in registry, make a request to the registry path `/v3/plugins/index.json` (or `/devfiles/index.json` for the devfile registry).
   59  +
   60: [subs="+quotes,+attributes"]
   61  ----
   62  $ URL=$(kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
   ..
   90  . Verify that the {prod-short} server points to the URL of the registry. To do this, compare the value of the `pass:[CHE_WORKSPACE_PLUGIN__REGISTRY__URL]` parameter in the `che` ConfigMap (or `pass:[CHE_WORKSPACE_DEVFILE__REGISTRY__URL]` for the devfile registry):
   91  +
   92: [subs="+quotes,+attributes"]
   93  ----
   94  $ kubectl get \
   ..
  101  with the URL of the Ingress:
  102  +
  103: [subs="+quotes,+attributes"]
  104  ----
  105  $ kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
  ...
  110  . If they do not match, update the ConfigMap and restart the {prod-short} server.
  111  +
  112: [subs="+quotes,+attributes"]
  113  ----
  114  $ kubectl edit cm/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-openshift.adoc:
   10  . To deploy the plug-in registry using the OpenShift template, run the following command:
   11  +
   12: [subs="+quotes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__  <1>
   ..
   25  . The devfile registry has an OpenShift template in the `deploy/openshift/` directory of the GitHub repository. To deploy it, run the command:
   26  +
   27: [subs="+quotes"]
   28  ----
   29  NAMESPACE=__<namespace-name>__  <1>
   ..
   39  
   40  . Check if the registries are deployed successfully on OpenShift.
   41: ifeval::["{project-context}" == "crw"]
   42  For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[Deploying registries in Kubernetes] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   43  endif::[]
   44: ifeval::["{project-context}" == "che"]
   45  The steps to check are similar to the Kubernetes steps. For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   46  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_developing-grafana-dashboards.adoc:
   12  +
   13  .New Grafana dashboard: Queries to
   14: image::monitoring/monitoring-che-new-grafana-dashboard-queries.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-queries.png"]
   15  
   16  . In the *Visualisation* section, choose a metric to be shown in the following visual in the form of a graph, gauge, heatmap, or others.
   17  +
   18  .New Grafana dashboard: Visualization
   19: image::monitoring/monitoring-che-new-grafana-dashboard-visualization.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-visualization.png"]
   20  
   21  . Save changes to the dashboard by clicking the btn:[Save] button, and copy and paste the JSON code to the deployment.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-authentication-with-social-accounts-and-brokering.adoc:
   18  . Set store tokens and stored tokens readable to *ON*.
   19  +
   20: image::git/kc_provider.png[link="{imagesdir}/git/kc_provider.png"]
   21  
   22  . Add a default read-token role.
   23  +
   24: image::git/kc_roles.png[link="{imagesdir}/git/kc_roles.png"]
   25  
   26  This is the default `delegated` OAuth service mode for multi-user {prod-short}. You can configure the OAuth service mode with the property `che.oauth.service_mode`.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-che-metrics-collections.adoc:
   12  For Jaeger tracing to work, enable the following environment variables in your {prod-short} deployment:
   13  
   14: [source,bash,subs="+quotes,+attributes"]
   15  ----
   16  # Activating {prod-short} tracing modules

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_installing-the-jaeger-tracing-tool-for-che-on-openshift-4.adoc:
   15  . In the {prod-short} installation namespace of the {ocp} cluster,  use the `oc` client to create a new application for the Jaeger deployment.
   16  +
   17: [subs="+quotes,attributes"]
   18  ----
   19  $ oc new-app -f / ${CHE_LOCAL_GIT_REPO}/deploy/openshift/templates/jaeger-all-in-one-template.yml:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-server-logs-on-the-cli.adoc:
   15  +
   16  .Example
   17: [subs="+attributes"]
   18  ----
   19  $ oc get pods
   ..
   24  . To get the logs for a deployment, run the following command:
   25  +
   26: [subs="+quotes"]
   27  ----
   28  $ oc logs _<name-of-pod>_
   ..
   30  +
   31  .Example
   32: [subs="+attributes"]
   33  ----
   34  $ oc logs {prod-deployment}-11-j4w2b

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-theia-ide-logs-on-the-cli.adoc:
    6  .Prerequisites
    7  
    8: ifeval::["{project-context}" == "che"]
    9  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{site-baseurl}che-7/installing-che-on-openshift-4-from-operatorhub/#viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools_installing-che-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   10  endif::[]
   11: ifeval::["{project-context}" == "crw"]
   12  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{prod-ig-url}installing-{prod-id-short}-on-ocp-4_crw#viewing-the-state-of-the-{prod-id-short}-cluster-deployment-using-openshift-4-cli-tools_installing-{prod-id-short}-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   13  endif::[]
   ..
   49  . Get logs from the `theia/ide` container:
   50  +
   51: [subs="+quotes"]
   52  ----
   53  $ oc logs --follow _<name-of-pod>_ --container _<name-of-container>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-traces-in-jaeger-ui.adoc:
   13  +
   14  .Using Jaeger UI to trace {prod-short}
   15: image::tracing/trace-search.png[link="{imagesdir}/tracing/trace-search.png"]
   16  
   17  . Select the trace to expand it and show the tree of nested spans, as well as additional information about the highlighted span, such as tags or durations.
   18  +
   19  .Expanded tracing tree
   20: image::tracing/trace-tree-expanded.png[link="{imagesdir}/tracing/trace-tree-expanded.png"]
   21  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-kubernetes-events.adoc:
   29  ////
   30  +
   31: image::logs/kubernetes-events.png[link="{imagesdir}/logs/kubernetes-events.png"]
   32  ////
   33  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-logs-for-php-debug.adoc:
    1: [id="viewing-logs-for-php-debug"]
    2  = Viewing logs for PHP-Debug
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_configuring-system-variables.adoc:
   10  
   11  
   12: [id="configuring-system-variables"]
   13  = Configuring system properties for {prod-short}
   14  
   ..
   20  .Example of changing the default value of `+++CHE_WORKSPACE_DEFAULT__MEMORY__LIMIT__MB+++` to 2048:
   21  
   22: [source,yaml,subs="+attributes"]
   23  ----
   24  include::examples/changing-system-variables.yaml[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_grafana-dashboards-for-che.adoc:
   10  
   11  .The *Workspaces* panel
   12: image::monitoring/monitoring-che-che-server-dashboard-workspace-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-panel.png"]
   13  
   14  * *Workspace start rate* -- the ratio between successful and failed started workspaces
   ..
   24  
   25  .The *Users* panel
   26: image::monitoring/monitoring-che-che-server-dashboard-users-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-users-panel.png"]
   27  
   28  * *Number of Users* -- the number of users known to {prod-short} over time
   ..
   30  
   31  .The *Tomcat* panel
   32: image::monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png"]
   33  
   34  * *Max number of active sessions* -- the max number of active sessions that have been active at the same time
   ..
   40  
   41  .The *Request* panel
   42: image::monitoring/monitoring-che-che-server-dashboard-requests-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-requests-panel.png"]
   43  
   44  The *Requests* panel displays HTTP requests in a graph that shows the average number of requests per minute.
   45  
   46  .The *Executors* panel, part 1
   47: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png"]
   48  
   49  * *Threads running* - the number of threads that are not terminated aka alive. May include threads that are in a waiting or blocked state. 
   ..
   53  
   54  .The *Executors* panel, part 2
   55: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png"]
   56  
   57  * *Executor threads active* - number of threads that actively execute tasks.
   ..
   61  
   62  .The *Executors* panel, part 3
   63: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png"]
   64  
   65  * *Rejected task* - the number of tasks that were rejected from execution.
   ..
   69  
   70  .The *Executors* panel, part 4
   71: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png"]
   72  
   73  * *Task execution seconds max* - 5min moving maximum of task execution
   ..
   77  
   78  .The *Traces* panel, part 1
   79: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png"]
   80  
   81  * *Workspace start Max* - maximum workspace start time
   ..
   85  
   86  .The *Traces* panel, part 2
   87: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png"]
   88  
   89  * *OpenShiftInternalRuntime#start Max* - maximum time of OpenShiftInternalRuntime#start operation
   ..
   93  
   94  .The *Traces* panel, part 3
   95: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png"]
   96  
   97  * *OpenShiftEnvironmentProvisioner#provision Max* - maximum time of OpenShiftEnvironmentProvisioner#provision operation
   ..
  101  
  102  .The *Traces* panel, part 4
  103: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png"]
  104  
  105  * *WaitMachinesStart Max* - maximim time of WaitMachinesStart operations
  ...
  109  
  110  .The *Workspace detailed* panel
  111: image::monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png"]
  112  
  113  The *Workspace Detailed* panel contains heat maps, which illustrate the average time of workspace starts or fails. The row shows some period of time.
  ...
  119  
  120  .{prod-short} server JVM dashboard
  121: image::monitoring/monitoring-che-che-server-jvm-dashboard.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard.png"]
  122  
  123  .Quick Facts
  124: image::monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png"]
  125  
  126  .JVM Memory
  127: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png"]
  128  
  129  .JVM Misc
  130: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png"]
  131  
  132  .JVM Memory Pools (heap)
  133: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png"]
  134  
  135  .JVM Memory Pools (Non-Heap)
  136: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png"]
  137  
  138  .Garbage Collection
  139: image::monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png"]
  140  
  141  .Classloading
  142: image::monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png"]
  143  
  144  .Buffer Pools
  145: image::monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png"]
  146  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_managesystem-permission.adoc:
    8  Users with the *manageSystem* permission have access to the following services:
    9  
   10: [options="header"]
   11  |====
   12  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_monitorsystem-permission.adoc:
    9  Users with the *monitorSystem* permission have access to the following services.
   10  
   11: [options="header"]
   12  |====
   13  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\examples\che-devfile-meta.yml:
    1  displayName: Rust
    2  description: Rust Stack with Rust 1.39
    3: tags: ["Rust"]
    4  icon: https://www.eclipse.org/che/images/logo-eclipseche.svg
    5  globalMemoryLimit: 1686Mi

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_branding-che-theia.adoc:
   12  :parent-context-of-branding-che-theia: {context}
   13  
   14: [id="branding-che-theia"]
   15  = Branding Che-Theia
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_che-extensibility-reference.adoc:
   12  :parent-context-of-che-extensibility-reference: {context}
   13  
   14: [id="{prod-id-short}-extensibility-reference"]
   15  = {prod-short} extensibility reference
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_developing-che-theia-plug-ins.adoc:
   12  :parent-context-of-developing-che-theia-plug-ins: {context}
   13  
   14: [id="developing-che-theia-plug-ins"]
   15  = Developing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_publishing-che-theia-plug-ins.adoc:
   12  :parent-context-of-publishing-che-theia-plug-ins: {context}
   13  
   14: [id="publishing-che-theia-plug-ins"]
   15  = Publishing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_testing-che-theia-plug-ins.adoc:
   12  :parent-context-of-testing-che-theia-plug-ins: {context}
   13  
   14: [id="testing-che-theia-plug-ins"]
   15  = Testing Che-Theia plug-ins
   16  
   ..
   42  When you run a hosted instance, the main Che-Theia instance opens the *Output* view. This view contains all the output from the `yarn` backend process. It also contains the output of the backend plug-in that is being developed.
   43  
   44: image::extensibility/hosted-instance-output.png[link="{imagesdir}/extensibility/hosted-instance-output.png"]
   45  
   46  == Controlling a hosted Che-Theia instance
   ..
   59  Your plug-in will handle the opening of a document and displaying a notification message when the document is opened.
   60  
   61: image:extensibility/code-completion-example.gif[link="{imagesdir}/extensibility/code-completion-example.gif"]
   62  ====
   63  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-a-che-theia-plug-in-into-a-workspace.adoc:
   17  +
   18  .Adding plug-ins through the dashboard
   19: image::extensibility/adding-plug-ins-in-dashboard.png[link="{imagesdir}/extensibility/adding-plug-ins-in-dashboard.png"]
   20  
   21  
   ..
   30  +
   31  .Adding plug-ins by configuring a component
   32: image::extensibility/adding-plug-ins-in-workspace-devfile.png[link="{imagesdir}/extensibility/adding-plug-ins-in-workspace-devfile.png"]
   33  
   34  +

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-support-for-a-new-debugger.adoc:
    9  ---
   10  
   11: [id="adding-support-for-a-new-debugger"]
   12  = Adding support for a new debugger
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_bootstrapping-che-theia-plug-in-development-with-yeoman.adoc:
   77  Alternatively, run `yo` without any parameters and select the `@theia/plugin` generator from the list of available generators.
   78  +
   79: image::extensibility/yo-select-plug-in-generator.png[link="{imagesdir}/extensibility/yo-select-plug-in-generator.png"]
   80  
   81  . Enter the information to configure the plug-in. For example:
   82  +
   83: image::extensibility/launching-console-plug-in-generator.png[link="{imagesdir}/extensibility/launching-console-plug-in-generator.png"]
   84  
   85  When the plug-in is generated, it appears in the *Files* panel. The sample is already compiled and contains the plug-in binary. In this example, the plug-in binary is named `my_first_plugin.theia`.
   ..
   95  . Type `Yeom` to filter the commands. Select the `Yeoman Wizard` command.
   96  +
   97: image::extensibility/yeoman-wizard-launching.png[link="{imagesdir}/extensibility/yeoman-wizard-launching.png"]
   98  +
   99  Note that launching the wizard may take a few seconds.
  ...
  101  . Enter the new project name.
  102  +
  103: image::extensibility/yeoman-wizard-choosing-plug-in-name.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-name.png"]
  104  
  105  . Select the desired plug-in type (client-side or server-side).
  106  +
  107: image::extensibility/yeoman-wizard-choosing-plug-in-type.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-type.png"]
  108  
  109  . Select the plug-in sample to use.
  110  +
  111: image::extensibility/yeoman-wizard-choosing-plug-in-sample.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-sample.png"]
  112  
  113  When the plug-in is generated, the *Yeoman wizard* displays a notification.
  114  
  115: image::extensibility/yeoman-wizard-plug-in-generated.png[link="{imagesdir}/extensibility/yeoman-wizard-plug-in-generated.png"]
  116  
  117  The plug-in sample displays in the *Files* panel. Use the *Output* tab in the botton panel to access logs for plug-in generation.
  118  
  119: image::extensibility/yeoman-wizard-logs.png[link="{imagesdir}/extensibility/yeoman-wizard-logs.png"]
  120  
  121  NOTE: The *Yeoman wizard* only works when a workspace is opened in Che-Theia.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_che-usage-with-tls.adoc:
   10  
   11  +
   12: image::contributor/che-tls-chrome-import_1.png[link="{imagesdir}/contributor/che-tls-chrome-import_1.png"]
   13  
   14  . Select `Trust this certificate for identifying websites` and click OK.
   15  
   16  +
   17: image::contributor/che-tls-chrome-import_2.png[link="{imagesdir}/contributor/che-tls-chrome-import_2.png"]
   18  
   19  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   20  
   21  +
   22: image::contributor/che-tls-chrome-import_3.png[link="{imagesdir}/contributor/che-tls-chrome-import_3.png"]
   23  
   24  
   ..
   29  
   30  +
   31: image::contributor/che-tls-firefox-import_1.png[link="{imagesdir}/contributor/che-tls-firefox-import_1.png"]
   32  
   33  . Go to `Authorities` tab, click `Import` and find your generated `rootCA.crt` (or `ca.crt` for OpenShift 4) file.
   34  
   35  +
   36: image::contributor/che-tls-firefox-import_2.png[link="{imagesdir}/contributor/che-tls-firefox-import_2.png"]
   37  
   38  . Select `Trust this CA to identify websites` and click OK.
   39  
   40  +
   41: image::contributor/che-tls-firefox-import_3.png[link="{imagesdir}/contributor/che-tls-firefox-import_3.png"]
   42  
   43  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   44  
   45  +
   46: image::contributor/che-tls-firefox-import_4.png[link="{imagesdir}/contributor/che-tls-firefox-import_4.png"]
   47  
   48  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_defining-custom-branding-values-for-che-theia.adoc:
    8  Create a `product.json` file with a new name of the product, logo, description, and list of hyperlinks on the *Welcome* page (an example of link:https://github.com/che-samples/che-theia-branding-example/blob/master/branding/product.json[`product.json`]:
    9  
   10: [source,json,attrs="nowrap"]
   11  ----
   12  {
   ..
   19      "welcome": {                             <4>
   20          "title": "Welcome to Your Workspace",
   21:         "links": ["website", "documentation"]
   22      },
   23      "links": {                               <5>
   ..
   43  To use only one logo image for both dark and light themes:
   44  
   45: [source,json,attrs="nowrap"]
   46  ----
   47  {

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-kubernetes.adoc:
   18  
   19  +
   20: [subs="+quotes"]
   21  ----
   22  $ kubectl create namespace che
   ..
   27  
   28  +
   29: [subs="+quotes"]
   30  ----
   31  $ kubectl create secret tls che-tls --key=domain.key --cert=domain.crt -n che
   ..
   36  
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ cp rootCA.crt ca.crt
   ..
   46  
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ {prod-cli} server:start --platform=minikube --installer=helm --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift-using-operator.adoc:
   17  
   18  +
   19: [subs="+quotes"]
   20  ----
   21  $ oc login -u system:admin --insecure-skip-tls-verify=true
   ..
   27  
   28  +
   29: [subs="+quotes,+attributes"]
   30  ----
   31  $ oc delete secret router-certs
   ..
   38  
   39  +
   40: [subs="+quotes,+attributes"]
   41  ----
   42  $ oc create namespace che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ cp rootCA.crt ca.crt
   ..
   57  
   58  +
   59: [subs="+quotes,+attributes"]
   60  ----
   61  $ {prod-cli} server:start --platform=minishift --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift4-using-operator.adoc:
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  $ oc login -u kubeadmin -p <password>
   ..
   20  
   21  +
   22: [subs="+quotes"]
   23  ----
   24  $ oc get secret router-ca -n openshift-ingress-operator -o jsonpath="{.data.tls\.crt}" | base64 -d > ca.crt
   ..
   29  
   30  +
   31: [subs="+quotes"]
   32  ----
   33  $ oc create namespace che
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ oc create secret generic self-signed-certificate --from-file=ca.crt -n=che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ {prod-cli} server:start --platform=crc --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_developing-che-theia-plug-ins-using-che.adoc:
   13  +
   14  .Adding a workspace
   15: image::extensibility/adding-workspace.png[link="{imagesdir}/extensibility/adding-workspace.png"]
   16  
   17  . Select the *{prod-short} {prod-ver} Dev* stack, and click the btn:[CREATE & OPEN] button.
   18  +
   19  .Choosing the '{prod-short} {prod-ver} Dev' stack
   20: image::extensibility/choosing-che-7-dev-stack.png[link="{imagesdir}/extensibility/choosing-che-7-dev-stack.png"]
   21  
   22  . *Generate a plug-in scaffold.* The workspace created from this stack provides an easy way to scaffold a new plug-in. When the workspace is started and fully ready, execute the *Yeoman Wizard* from the command palette:
   ..
   25  +
   26  .Launching the Yeoman Wizard
   27: image::extensibility/launching-yeoman-wizard.png[link="{imagesdir}/extensibility/launching-yeoman-wizard.png"]
   28  +
   29  .. Fill in the following fields about the plug-in that you want to create: 
   ..
   36  +
   37  .Yeoman successfully generated a new plug-in
   38: image::extensibility/yeoman-successful.png[link="{imagesdir}/extensibility/yeoman-successful.png"]
   39  
   40  . Open the *Files* panel, to see the sources of the generated plug-in in the `src` directory.
   ..
   45  +
   46  .Opening a new terminal in the development container
   47: image::extensibility/open-terminal-in-container.png[link="{imagesdir}/extensibility/open-terminal-in-container.png"]
   48  +
   49  .. In the terminal, go to the plug-in directory, and run the `yarn` command:
   ..
   55  +
   56  .Building a Che-Theia plug-in using `yarn`
   57: image::extensibility/building-plug-in-using-yarn.png[link="{imagesdir}/extensibility/building-plug-in-using-yarn.png"]
   58  +
   59  NOTE: The plug-in generator automatically builds the plug-in after its generation.
   ..
   67  +
   68  .Running a Che-Theia plug-in in Hosted mode
   69: image::extensibility/running-plug-in-hosted-mode.gif[link="{imagesdir}/extensibility/running-plug-in-hosted-mode.gif"]
   70  
   71  . *Debug the plug-in.*
   ..
   78  +
   79  .Debugging a Che-Theia plug-in
   80: image::extensibility/debugging-plug-ins.gif[link="{imagesdir}/extensibility/debugging-plug-ins.gif"]
   81  +
   82  NOTE: When developing a frontend plug-in, debug it using your browser’s Developer Tools option.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_generating-self-signed-certificates.adoc:
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  # default for minishift
   ..
   26  
   27  +
   28: [subs="+quotes"]
   29  ----
   30  # Fedora 31
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ CA_CN=eclipse-che-signer
   ..
   46  
   47  +
   48: [subs="+quotes"]
   49  ----
   50  # Example with minikube on Fedora 31
   ..
   62  
   63  +
   64: [subs="+quotes"]
   65  ----
   66  $ openssl genrsa -out rootCA.key 4096
   ..
   71  
   72  +
   73: [subs="+quotes"]
   74  ----
   75  $ openssl req -x509 \
   ..
   91  
   92  +
   93: [subs="+quotes"]
   94  ----
   95  $ openssl genrsa -out domain.key 2048
   ..
   99  
  100  +
  101: [subs="+quotes"]
  102  ----
  103  $ openssl req -new -sha256 \
  ...
  114  
  115  +
  116: [subs="+quotes"]
  117  ----
  118  $ openssl x509 \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_sharing-your-che-theia-plug-in-with-a-factory.adoc:
   28  . Add the plug-in to the `workspace.attributes.plugins` field.
   29  +
   30: image::extensibility/sharing-plug-in-with-factory.png[link="{imagesdir}/extensibility/sharing-plug-in-with-factory.png"]
   31  
   32  . Share the factory link.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_testing-che-theia-with-custom-branding.adoc:
   18  . Create a workspace using the sample https://github.com/che-samples/che-theia-branding-example/blob/master/devfile.yaml[che-theia-branding-example devfile] to apply the changes:
   19  +
   20: image::https://che.openshift.io/factory/resources/factory-contribute.svg[link="https://che.openshift.io/f?url=https://raw.githubusercontent.com/che-samples/che-theia-branding-example/master/devfile.yaml"]
   21  +
   22: [source,yaml,attrs="nowrap"]
   23  ----
   24  metadata:
   ..
   41  * The dark theme of Che-Theia:
   42  +
   43: image::branding/welcome-dark.png[link="{imagesdir}/branding/welcome-dark.png"]
   44  +
   45: image::branding/about-dark.png[link="{imagesdir}/branding/about-dark.png"]
   46  
   47  * The light theme of Che-Theia:
   48  +
   49: image::branding/welcome-light.png[link="{imagesdir}/branding/welcome-light.png"]
   50  +
   51: image::branding/about-light.png[link="{imagesdir}/branding/about-light.png"]
   52  
   53  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\ref_che-theia-plug-in-api.adoc:
   15  The Che-Theia plug-in API consists of two namespaces:
   16  
   17: [options="header"]
   18  |===
   19  | Namespace | Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-ide-basics.adoc:
   12  :parent-context-of-che-theia-ide-basics: {context}
   13  
   14: [id="che-theia-ide-basics"]
   15  = Che-Theia IDE basics
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-troubleshooting.adoc:
   11  :parent-context-of-che-theia-troubleshooting: {context}
   12  
   13: [id="che-theia-troubleshooting"]
   14  = Che-Theia Troubleshooting
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-github-oauth.adoc:
   27  image::git/github_oauth.png[]
   28  
   29: ifeval::["{project-context}" == "che"]
   30  . On OpenShift or Kubernetes, update the deployment configuration (see link:{site-baseurl}che-7/openshift-config.html[OpenShift configuration]).
   31  +
   ..
   43  * Substitute `_<your-github-client-id>_` and `_<your-github-secret>_` with your GitHub client ID and secret.
   44  
   45: ifeval::["{project-context}" == "che"]
   46  * This configuration only applies to single-user deployments of {prod-short}.
   47  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-oauth-authorization.adoc:
   12  :parent-context-of-configuring-oauth-authorization: {context}
   13  
   14: [id="configuring-oauth-authorization"]
   15  = Configuring OAuth authorization
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-openshift-oauth.adoc:
   18  . Register {prod-short} OAuth client in OpenShift (see link:https://docs.openshift.com/container-platform/4.3/authentication/configuring-internal-oauth.html#oauth-register-additional-client_configuring-internal-oauth[Register an OAuth client in OpenShift]).
   19  +
   20: [subs="+quotes,+attributes"]
   21  ----
   22  $ oc create -f <(echo '

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_converting-a-che-6-workspace-to-a-che-7-devfile.adoc:
   15  :parent-context-of-converting-a-che-6-workspace-to-a-che-7-devfile: {context}
   16  
   17: [id="converting-a-{prod-id-short}-{prod-prev-ver}-workspace-to-a-{prod-id-short}-{prod-ver}-devfile"]
   18  = Converting a {prod-short} {prod-prev-ver} workspace to a {prod-short} {prod-ver} devfile
   19  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_creating-and-configuring-a-new-che-7-workspace.adoc:
   13  :parent-context-of-creating-and-configuring-a-new-che-7-workspace: {context}
   14  
   15: [id="creating-and-configuring-a-new-{prod-id-short}-{prod-ver}-workspace"]
   16  = Creating and configuring a new {prod-short} {prod-ver} workspace
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_customizing-developer-environments.adoc:
   12  :parent-context-of-customizing-developer-environments: {context}
   13  
   14: [id="customizing-developer-environments"]
   15  = Customizing developer environments
   16  
   ..
   28  
   29  .{prod-short} extensibility
   30: image::extensibility/extending-che.png[link="{imagesdir}/extensibility/extending-che.png"]
   31  
   32  Extending {prod} can be done entirely using {prod}. Since version 7, {prod} provides a self-hosting mode.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_defining-custom-commands-for-che-theia.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="defining-custom-commands-for-che-theia"]
   17  = Defining custom commands for Che-Theia
   18  
   ..
   46                  "options": {"cwd": "/projects/theia"},
   47                  "command": "yarn",
   48:                 "args": ["watch"]
   49                }
   50               ]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_importing-a-kubernetes-application-into-a-workspace.adoc:
   12  :parent-context-of-importing-a-kubernetes-application-into-a-workspace: {context}
   13  
   14: [id="importing-a-kubernetes-application-into-a-workspace"]
   15  = Importing a Kubernetes application into a workspace
   16  
   ..
   27  To run the application on a Kubernetes cluster:
   28  
   29: [subs="+attributes"]
   30  ----
   31  $ node=https://raw.githubusercontent.com/redhat-developer/devfile/master/samples/web-nodejs-with-db-sample/nodejs-app.yaml && \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_navigating-che-using-the-dashboard.adoc:
   18  The *Dashboard* is accessible on your cluster from a URL like `http://__<che-instance>__.__<IP-address>__.nip.io/dashboard/`.
   19  This section describes how to access this URL on
   20: ifeval::["{project-context}" == "che"]
   21  Minishift and
   22  endif::[]
   23  OpenShift.
   24  
   25: ifeval::["{project-context}" == "che"]
   26  include::proc_navigating-che-using-the-dashboard-on-minishift.adoc[leveloffset=+1]
   27  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_version-control.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="version-control"]
   17  = Version Control
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_what-is-a-che-theia-plug-in.adoc:
   12  :parent-context-of-what-is-a-che-theia-plug-in: {context}
   13  
   14: [id="what-is-a-che-theia-plug-in"]
   15  = What is a Che-Theia plug-in
   16  
   ..
   31  == Features and benefits of Che-Theia plug-ins
   32  
   33: [options="header"]
   34  |===
   35  | *Features*            | *Description* | *Benefits*

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_che-theia-plug-in-lifecycle.adoc:
   14  
   15  .Che-Theia plug-in lifecycle
   16: image::extensibility/che-theia-plug-in-lifecycle.png[link="{imagesdir}/extensibility/che-theia-plug-in-lifecycle.png"]
   17  
   18  Before a {prod-short} workspace is launched, {prod-short} master starts containers for the workspace:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_factory-json-reference.adoc:
   36  The `factory.policies`, `factory.ide`, and `factory.creator` objects are unique to factories. They provide meta information to the automation engine that alter the presentation of the factory URL or the behavior of the provisioning.
   37  
   38: [id="mixins"]
   39  == Mixins
   40  
   ..
   52  * Learn more about other link:TODO: link to project API docs[mixins]
   53  
   54: [id="pull-request-mixin-attributes"]
   55  == Pull Request mixin attributes
   56  
   ..
   89  ----
   90  
   91: [id="policies"]
   92  == Policies
   93  
   ..
  108  <4> Create one workpace per click, user, or account.
  109  
  110: [id="factories_json_reference-limitations"]
  111  == Limitations
  112  
  113  You can use `since : EPOCHTIME`, `until : EPOCHTIME`, and `referer` as a way to prevent the factory from executing under certain conditions. `since` and `until` represent a valid time window that allows the factory to activate. The `referrer` checks the hostname of the acceptor and only allows the factory to execute if there is a match.
  114  
  115: [id="factories_json_reference-multiplicity"]
  116  == Multiplicity
  117  
  118  Using `create : perClick` causes every click of the factory URL to generate a new workspace, each with its own identifier, name, and resources. Using `create : perUser` causes only one workspace to be generated for each unique user that clicks on the factory URL. If the workspace has previously been generated, the existing workspace is reopened.
  119  
  120: [id="factories_json_reference-ide-customization"]
  121  == Customizing the IDE
  122  
  ...
  220  |===
  221  
  222: [id="action-open-file"]
  223  == Action: Open File
  224  
  ...
  236  ----
  237  
  238: [id="action-find-and-replace"]
  239  == Action: Find and Replace
  240  
  ...
  276  Use https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions.html[regular expressions] in `sed`, both in find-replace and file-file type patterns.
  277  
  278: [id="creator"]
  279  == Creator
  280  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_workspaces-overview.adoc:
   13  :page-liquid:
   14  
   15: [id="workspaces-overview"]
   16  = Workspaces overview
   17  
   ..
   28  
   29  IMPORTANT: By default, it is possible to run only one workspace at a time. 
   30: ifeval::["{project-context}" == "che"]
   31  To change the default value, see link:{site-baseurl}che-7/advanced-configuration-options/#limits-for-the-workspaces-of-an-user[Limits for the workspaces of a user].
   32  endif::[]
   33: ifeval::["{project-context}" == "crw"]
   34  To change the default value, see link:{prod-ig-url}[the {prod-ig}].
   35  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-projects-to-your-workspace.adoc:
   18  . Fill in the required details for the project type that you selected, and click the btn:[Add] button.
   19  +
   20: image::workspaces/projects-add-project.png[link="{imagesdir}/workspaces/projects-add-project.png"]
   21  
   22  . To add another project to the workspace, click the btn:[Add Project] button.
   ..
   24  . After configuring the project for the workspace, check the change in the devfile, which is the configuration file of the workspace, by opening the *Devfile* tab.
   25  +
   26: image::workspaces/devfile-tab-to-view.png[link="{imagesdir}/workspaces/devfile-tab-to-view.png"]
   27  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-che-plugins-panel.adoc:
   16  . In the search bar, click the *Menu* button and then click *Change Registry* to choose the registry from the list. If the required registry is not in the list, add it using the *Add Registry* menu option. The registry link should point to the `plugins` segment of the registry. For example: `https://my-registry.com/v3/plugins/index.json`.
   17  +
   18: image::extensibility/vs-code-extension-change-registry.png[link="{imagesdir}/extensibility/vs-code-extension-change-registry.png"]
   19  
   20  . Search for the required plug-in using the filter, and then click the btn:[Install] button.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-workspace-configuration.adoc:
   18  . Locate the *components* section, and add a new entry with the following structure:
   19  +
   20: [source,yaml,subs="+quotes"]
   21  ----
   22   - type: chePlugin
   ..
   29  Alternatively, you can link to a `meta.yaml` file hosted on GitHub, via the reference field.
   30  +
   31: [source,yaml,subs="+quotes"]
   32  ----
   33   - type: chePlugin

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_changing-the-configuration-of-an-existing-workspace-from-the-user-dashboard.adoc:
   59  ====
   60  
   61: [id="configure-devfile"]
   62  [start=5]
   63  . From the *Devfile* tab, edit the workspace's YAML configuration. See link:{site-baseurl}che-7/making-a-workspace-portable-using-a-devfile/#devfile-reference_making-a-workspace-portable-using-a-devfile[Devfile reference].

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-the-workspace-and-adding-tooling.adoc:
   10  
   11  .{prod-short} {prod-ver} plug-ins that have replaced {prod-short} {prod-prev-ver} installers
   12: [options="header"]
   13  |===
   14  | {prod-short} {prod-prev-ver} installer | {prod-short} {prod-ver} plug-in
   ..
  114  .. Click the *Containers* tab (*Workspace* -> *Details* -> *Containers*).
  115  +
  116: image::workspaces/edit-the-container.png[link="{imagesdir}/workspaces/edit-the-container.png"]
  117  
  118  .. Copy the {prod-short} {prod-prev-ver} recipe, and paste it into the separate {prod-short} {prod-ver} component as a *referenceContent*.
  119  +
  120: image::workspaces/component_as_a_referenceContent.png[link="{imagesdir}/workspaces/component_as_a_referenceContent.png"]
  121  
  122  .. Set the type from the original {prod-short} {prod-prev-ver} configuration. The following is an example of the resulting file:
  ...
  147  +
  148  .Сhe 6 and Сhe 7 equivalence table
  149: [options="header"]
  150  |===
  151  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  191  
  192  .Сhe 6 and Сhe 7 equivalence table
  193: [options="header"]
  194  |===
  195  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  233  . Save changes and start the new {prod-short} {prod-ver} workspace.
  234  +
  235: image::workspaces/save-and-start-the-new-che-workspace.png[link="{imagesdir}/workspaces/save-and-start-the-new-che-workspace.png"]
  236  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-workspace-exposure-strategies-using-the-helm-chart-and-the-operator.adoc:
   12  When deploying {prod-short} using the Helm chart, configure the workspace exposure strategy using the `global.serverStrategy` property. To do so, add the following option to the `helm install` or `helm upgrade` command:
   13  
   14: [subs="+quotes"]
   15  ----
   16  $ helm install --set global.serverStrategy=__<single-host>__
   ..
   19  or:
   20  
   21: [subs="+quotes"]
   22  ----
   23  $ helm upgrade --set global.serverStrategy=__<single-host>__
   ..
   36  * Create a new cluster by executing the `kubectl apply` command. For example:
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ kubectl apply -f _<my-cluster.yaml>_
   ..
   43  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
   44  +
   45: [subs="+quotes"]
   46  ----
   47  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/k8s/ingressStrategy", "value": "__single-host__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_converting-a-che-6-workspace-to-a-basic-che-7-devfile.adoc:
   68  .. By default, the example project is added to the workspace. To remove the default project, click the btn:[Remove] button:
   69  +
   70: image::workspaces/remove-default-project.png[link="{imagesdir}/workspaces/remove-default-project.png"]
   71  
   72  .. To import a custom project that was used in {prod-short} {prod-prev-ver} workspace, click the *Add or Import Project* and select *Git* or *GitHub* option:
   73  +
   74: image::workspaces/add-custom-project.png[link="{imagesdir}/workspaces/add-custom-project.png"]
   75  
   76  .. Various commands can be added to devfiles of imported projects, for example, `run`, `build`, and  `test`. The commands are then accessible from the IDE when a workspace is started. Custom commands and other devfile components can be added in the *Devfile* configuration.
   ..
   78  .. Click the btn:[Create & Proceed Editing] button.
   79  +
   80: image::workspaces/create-and-edit.png[link="{imagesdir}/workspaces/create-and-edit.png"]
   81  +
   82  Select the *Devfile* tab to update the configuration. Machine servers in {prod-short} {prod-prev-ver} workspaces can be specified as components endpoints in a Devfile and {prod-short} {prod-prev-ver} installers as components of type chePlugin. See the link:https://redhat-developer.github.io/devfile/devfile[Devfile specification] for the detailed information about the supported properties and attributes.
   83  +
   84: image::workspaces/update-devfile-configuration.png[link="{imagesdir}/workspaces/update-devfile-configuration.png"]
   85  .. Once the *Devfile* configuration is completed, click the btn:[Open] button to start a newly created {prod-short} {prod-ver} workspace.
   86  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-new-workspace-from-the-dashboard.adoc:
   17  . In the *SELECT STACK* list, select one of the default stacks.
   18  +
   19: image::workspaces/{project-context}-stack-list.png[link="{imagesdir}/workspaces/{project-context}-stack-list.png"]
   20  
   21  . Click the btn:[Create & Proceed Editing] button. The *Workspaces -> Configs* page is shown.
   22  +
   23: image::workspaces/workspaces-config-page.png[link="{imagesdir}/workspaces/workspaces-config-page.png"]
   24  
   25  . Change the workspace name and click the *Devfile* tab.
   26  +
   27: image::workspaces/workspace-devfile-tab.png[link="{imagesdir}/workspaces/workspace-devfile-tab.png"]
   28  
   29  . Delete all the *components* and *commands* in the devfile to get an empty devfile.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-by-importing-source-code-of-a-project.adoc:
   11  :page-liquid:
   12  
   13: [id="creating-a-workspace-by-importing-source-code-of-a-project"]
   14  = Creating a workspace by importing the source code of a project
   15  
   ..
   33  * xref:#importing-to-a-running-workspace-with-git-clone-in-a-terminal[Import to a running workspace using `git clone` in a terminal]
   34  
   35: [id="importing-from-the-dashboard-into-an-existing-workspace"]
   36  == Importing from the Dashboard into an existing workspace
   37  
   ..
   96  image::workspaces/configure-command.png[Configure tasks]
   97  
   98: [id="importing-to-a-running-workspace-using-the-git-clone-command"]
   99  == Importing to a running workspace using the *Git: Clone* command
  100  
  ...
  113  image::workspaces/git-clone-command-2.png[Configure git clone command]
  114  
  115: [id="importing-to-a-running-workspace-with-git-clone-in-a-terminal"]
  116  == Importing to a running workspace with `git clone` in a terminal
  117  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-a-feature-branch-of-a-git-repository.adoc:
   16  Use following URL format to open an experimental link:https://github.com/quarkusio/quarkus-quickstarts[quarkus-quickstarts] branch hosted on link:https://che.openshift.io[che.openshift.io].
   17  
   18: [subs="+quotes"]
   19  ----
   20  https://che.openshift.io/f?url=https://github.com/maxandersen/quarkus-quickstarts/tree/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-the-default-branch-of-a-git-repository.adoc:
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://github.com/eclipse/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-with-a-publicly-accessible-standalone-devfile-using-http.adoc:
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-using-chectl-and-a-local-devfile.adoc:
   17  . Run a workspace from a devfile using the `workspace:start` parameter with the `{prod-cli}` tool as follows:
   18  
   19: [subs="+attributes,+quotes"]
   20  ----
   21  $ {prod-cli} workspace:start --devfile=devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_downloading-and-uploading-a-file-to-a-workspace-using-the-command-line-interface.adoc:
   17  * To download a local file named `downloadme.txt` from a workspace container to the current home directory of the user, use the following in the {prod-short} remote shell.
   18  +
   19: [subs="+quotes",options="+nowrap"]
   20  ----
   21  $ REMOTE_FILE_PATH=/projects/downloadme.txt
   ..
   28  * To upload a local file named `uploadme.txt` to a workspace container in the `/projects` directory:
   29  
   30: [subs="+quotes",options="+nowrap"]
   31  ----
   32  $ LOCAL_FILE_PATH=./uploadme.txt

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_generating-a-devfile-from-an-existing-kubernetes-application.adoc:
   18  . Use the `{prod-cli} devfile:generate` command to generate a devfile:
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ {prod-cli} devfile:generate
   ..
   27  The following example generates a devfile that includes the `NodeJS` component:
   28  +
   29: [subs="+attributes"]
   30  ----
   31  $ {prod-cli} devfile:generate --selector="app=nodejs"
   ..
   55  * To include support for a language, use the `--language` parameter:
   56  +
   57: [subs="+attributes"]
   58  ----
   59  $ {prod-cli} devfile:generate --selector="app=nodejs" --language="typescript"

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_including-a-kubernetes-application-in-a-workspace-devfile-definition.adoc:
   72  Use this devfile to create and start a workspace with the `{prod-cli}` command:
   73  
   74: [subs="+attributes,+quotes"]
   75  ----
   76  $ {prod-cli} worspace:start --devfile _<devfile-path>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_managing-git-configuration-identity.adoc:
   16  . Open *File > Settings > Open Preferences*:
   17  +
   18: image::git/git-config-identity.png[link="{imagesdir}/git/git-config-identity.png"]
   19  
   20  . In the opened window, navigate to the *Git* section, and find:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_overriding-devfile-values-using-factory-parameters.adoc:
   24  Consider the following initial devfile:
   25  
   26: [subs="+quotes"]
   27  ----
   28  ---
   ..
   36  To add or override `generateName` value, the following factory URL can be used:
   37  
   38: [subs="+quotes"]
   39  ----
   40  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.metadata.generateName=myprefix
   ..
   43  The resulting workspace will have the following devfile model:
   44  
   45: [subs="+quotes"]
   46  ----
   47  ---
   ..
   59  Consider the following initial devfile:
   60  
   61: [subs="+quotes"]
   62  ----
   63  ---
   ..
   75  To add or override source `branch` value, the following factory URL can be used:
   76  
   77: [subs="+quotes"]
   78  ----
   79  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.projects.web-java-spring-petclinic.source.branch=1.0.x
   ..
   82  The resulting workspace will have the following devfile model:
   83  
   84: [subs="+quotes"]
   85  ----
   86  apiVersion: 1.0.0
   ..
  102  Consider the following initial devfile:
  103  
  104: [subs="+quotes"]
  105  ----
  106  ---
  ...
  116  To add or override `persistVolumes` attribute value, the following factory URL can be used:
  117  
  118: [subs="+quotes"]
  119  ----
  120  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.persistVolumes=true
  ...
  124  The resulting workspace will have the following devfile model:
  125  
  126: [subs="+quotes"]
  127  ----
  128  ---
  ...
  141  possible to use dot-separated names:
  142  
  143: [subs="+quotes"]
  144  ----
  145  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.dot.name.format.attribute=true
  ...
  149  The resulting workspace will have the following devfile model:
  150  
  151: [subs="+quotes"]
  152  ----
  153  ---

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_remotely-accessing-workspaces-using-kubectl.adoc:
   13  * Verify the installation of `kubectl` using the `kubectl version` command:
   14  +
   15: [subs="+quotes",options="+nowrap"]
   16  ----
   17  $ kubectl version
   ..
   29  . To find the name of the Kubernetes namespace and pod that runs the {prod-short} workspace:
   30  +
   31: [subs="+quotes",options="+nowrap"]
   32  ----
   33  $ kubectl get pod -l che.workspace_id --all-namespaces
   ..
   40  . To find the name of the container:
   41  +
   42: [subs="+quotes",options="+nowrap"]
   43  ----
   44  $ NAMESPACE=che
   ..
   51  . When you have the namespace, pod name, and the name of the container, use the `kubectl` command to open a remote shell:
   52  +
   53: [literal,subs="+quotes",options="nowrap"]
   54  --
   55  $ NAMESPACE=che
   ..
   62  . From the container, execute the `build` and `run` commands (as if from the {prod-short} workspace terminal):
   63  +
   64: [subs="+quotes",options="+nowrap"]
   65  ----
   66  user@workspace7b2wemdf3hx7s3ln $ mvn clean install

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_che-theia-plug-in-metadata.adoc:
   96  
   97  .Example `meta.yaml` for a Che-Theia plug-in: the {prod-short} machine-exec Service
   98: [source,yaml,subs="+quotes,+attributes"]
   99  ----
  100  apiVersion: v2

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_objects-supported-in-eclipse-che.adoc:
    4  The following table lists the objects that are partially supported in {prod} {prod-ver}:
    5  
    6: [cols="1,1,1,1,5", options="header"]
    7  |===
    8  |Object 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_connecting-source-code-from-guthub-to-a-openshift-component-using-openshift-connector.adoc:
   32  For additional information about cloning Git repository, see:
   33  
   34: ifeval::["{project-context}" == "che"]
   35  link:https://www.eclipse.org/che/docs/che-7/version-control/#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   36  endif::[]
   37  
   38: ifeval::["{project-context}" == "crw"]
   39  link:https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html-single/end-user_guide/index#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   40  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_installing-che-in-restricted-environment.adoc:
   65  . Build the plug-in registry image:
   66  +
   67: [subs="+quotes"]
   68  ----
   69  ./build.sh --organization _<my-org>_ \
   ..
   96  . Build the devfile registry image:
   97  +
   98: [subs="+quotes"]
   99  ----
  100  ./build.sh --organization _<my-org>_ \
  ...
  155  To get a list of images required for plug-ins, display this file:
  156  
  157: [subs="+quotes"]
  158  ----
  159  $ docker run -it --rm \
  ...
  170  An offline devfile registry (see xref:building-offline-devfile-registry_{context}[]) contains a file with the list of all images referenced in its devfiles:
  171  
  172: [subs="+quotes"]
  173  ----
  174  $ docker run -it --rm \
  ...
  210  The `CheCluster` Custom Resource, which is managed by the {prod-short} Operator, includes fields to facilitate deploying an instance of {prod-short} in a restricted environment:
  211  
  212: [source,yaml,subs="+quotes"]
  213  ----
  214  # [...]
  ...
  222  Setting these values uses `<my-internal-registry>` and `<my-organization>` for all images. This means that the Operator expects the offline plug-in and devfile registries to be available at:
  223  
  224: [subs="+quotes"]
  225  ----
  226  __<my-internal-registry>__/__<my-organization>__/che-plug-in-registry:__<ver>__

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_upgrading-che.adoc:
   62  When making changes to the `checluster` custom resource, use patching to make updates to it. For example:
   63  
   64: ifeval::["{project-context}" == "che"]
   65  On Kubernetes, run:
   66  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\con_che-configmaps-and-their-behavior.adoc:
   23  For example, to overrride the default memory limit for workspaces, add the `CHE_WORKSPACE_DEFAULT\__MEMORY__LIMIT__MB` property to `customCheProperties`:
   24  
   25: [subs="+attributes"]
   26  [source,yaml]
   27  ----
   ..
   46  Previous versions of the {prod-short} Operator had a configMap named `custom` to fulfill this role.  If the {prod-short} Operator finds a `configMap` with the name `custom`, it adds the data it contains into the `customCheProperties` field, redeploys {prod-short}, and deletes the `custom` `configMap`.
   47  
   48: ifeval::["{project-context}" == "che"]
   49  == {prod-short} installed using a Helm Chart
   50  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_adding-custom-certificates-to-trust-store.adoc:
    8  . Create a new *configMap* with the certificate(s):
    9  +
   10: [subs="+quotes"]
   11  ----
   12  $ kubectl create configmap <config-map name> --from-file=<certificate file path> -n=che
   ..
   21  . Set the `global.tls.serverTrustStoreConfigMapName` property to previously created config-map name. To do that, add the following option to the `helm upgrade` command:
   22  +
   23: [subs="+quotes"]
   24  ----
   25  $ helm upgrade che -n che --set global.tls.serverTrustStoreConfigMapName=<config-map name> --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_configuring-namespace-strategies.adoc:
   20  To assign namespace names composed of a `che-ws` prefix and workspace id, set:
   21  
   22: [subs="+quotes"]
   23  ----
   24  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<workspaceid>__
   ..
   36  To have all workspaces created in `che-workspaces` namespace, set:
   37  
   38: [subs="+quotes"]
   39  ----
   40  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-workspaces
   ..
   54  To assign namespace names composed of a `che-ws` prefix and individual usernames (`che-ws-user1`, `che-ws-user2`), set:
   55  
   56: [subs="+quotes"]
   57  ----
   58  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<username>__
   ..
   79  disabled by default. To allow user-defined workspace namespaces, set:
   80  
   81: [subs="+quotes"]
   82  ----
   83  CHE_INFRA_KUBERNETES_NAMESPACE_ALLOW__USER__DEFINED=true

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_deploying-che-with-support-for-git-repositories-with-self-signed-certificates.adoc:
   15  . Create a new *configMap* with details about the Git server:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ kubectl create configmap che-git-self-signed-cert --from-file=ca.crt \
   ..
   34  . Update the `global.useGitSelfSignedCerts` property. To do that, add the following option to the `helm upgrade` command:
   35  +
   36: [subs="+quotes"]
   37  ----
   38  $ helm upgrade che -n che --set global.useGitSelfSignedCerts=true --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-chectl-installation.adoc:
   10  * For {prod-short} installed using the `{prod-cli} server:start` command and the `-n` argument (custom namespace specified), use the `-n` argument also to uninstall the {prod-short} instance.
   11  
   12: ifeval::["{project-context}" == "che"]
   13  * For installations that did not use the `-n` argument, the created namespace is named `{prod-id-short}` by default.
   14  endif::[]
   15  
   16: ifeval::["{project-context}" == "crw"]
   17  * For installations that did not use the `-n` argument, the created namespace is named `workspaces` by default.
   18  endif::[]
   ..
   29  . Stop the {prod} Server:
   30  +
   31: [subs="+quotes,attributes"]
   32  ----
   33  $ {prod-cli} server:stop
   ..
   42  . Remove {prod-short} from the cluster:
   43  +
   44: [subs="+quotes,attributes"]
   45  ----
   46  $ {prod-cli} server:delete -n _<namespace>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-operatorhub-installation.adoc:
   26  . In the row that displays information about the specific {prod-short} cluster, delete the {prod-short} Cluster deployment using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   27  //+
   28: //image::uninstall/che-delete-che-cluster.png[link="{imagesdir}/uninstall/che-delete-che-cluster.png"]
   29  . Alternatively, delete the {prod-short} deployment by clicking the displayed {prod} Cluster, `{prod-id}`, and select the *Delete cluster* option in the *Actions* drop-down menu on the top right.
   30  
   ..
   35  . In the row that displays information about the specific {prod} Operator, uninstall the {prod-short} Operator using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   36  //+
   37: //image::uninstall/che-uninstall-operator.png[link="{imagesdir}/uninstall/che-uninstall-operator.png"]
   38  . Accept the selected option, *Also completely remove the Operator from the selected namespace*.
   39  . Alternatively, uninstall the {prod} Operator by clicking the displayed {prod} Operator, `{prod}`, followed by selecting the *Uninstall Operator* option in the *Actions* drop-down menu on the top right.
   ..
   57  . Sign in to the cluster:
   58  +
   59: [subs="+quotes"]
   60  ----
   61  $ oc login -u _<username>_ -p _<password>_ _<cluster_URL>_
   ..
   64  . Switch to the project where the {prod-short} instance is deployed:
   65  +
   66: [subs="+quotes,attributes"]
   67  ----
   68  $ oc project _<{prod-id-short}_project>_
   ..
   71  . Obtain the {prod-short} cluster name. The following shows a cluster named `{prod-id}`:
   72  +
   73: [subs="+quotes,attributes"]
   74  ----
   75  $ oc get {prod-id-short}cluster
   ..
   80  . Delete the {prod-short} cluster:
   81  +
   82: [subs="+quotes,attributes"]
   83  ----
   84  $ oc delete {prod-id-short}cluster {prod-id}
   ..
   88  . Obtain the name of the {prod-short} cluster service version (CSV) module. The following detects a CSV module named `{prod-id}.v{prod-ver}`:
   89  +
   90: [subs="+quotes,attributes"]
   91  ----
   92  $ oc get csv
   ..
   97  . Delete the {prod-short} CSV:
   98  +
   99: [subs="+quotes,attributes"]
  100  ----
  101  $ oc delete csv {prod-id}.v{prod-ver}

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-3-using-the-cli-management-tool.adoc:
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-4-using-the-cli-management-tool.adoc:
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\ref_che-configmaps-fields-reference.adoc:
    9  == `server` settings related to the {prod-short} server
   10  
   11: [cols="1,1,3", options="header"]
   12  :===
   13  Property: Default value: Description
   ..
   49  == `database` configuration settings related to the database used by {prod-short}
   50  
   51: [cols="1,1,3", options="header"]
   52  :===
   53  Property: Default value: Description
   ..
   65  == `auth` configuration settings related to authentication used by {prod-short} installation
   66  
   67: [cols="1,1,3", options="header"]
   68  :===
   69  Property: Default value: Description
   ..
   87  
   88  
   89: [cols="1,1,3", options="header"]
   90  :===
   91  Property: Default value: Description
   ..
  102  == `k8s` configuration settings specific to {prod-short} installations on Kubernetes
  103  
  104: [cols="1,1,3", options="header"]
  105  :===
  106  Property: Default value: Description
  ...
  116  == `installation` defines the observed state of {prod-short} installation
  117  
  118: [cols="1,3", options="header"]
  119  :===
  120  Property: Description
  ...
  136  == Limits for workspaces
  137  
  138: [cols="1,1,3", options="header"]
  139  :===
  140  Property: Default value: Description
  ...
  146  == Limits for the workspaces of an user
  147  
  148: [cols="1,1,3", options="header"]
  149  :===
  150  Property: Default value: Description
  ...
  158  
  159  
  160: [cols="1,1,3", options="header"]
  161  :===
  162  Property: Default value: Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-architecture.adoc:
   12  :parent-context-of-che-architectural-elements: {context}
   13  
   14: [id="{prod-id-short}-architectural-elements"]
   15  = {prod-short} architectural elements
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_persistent-volume-configuration.adoc:
   91  When deploying {prod-short} using the Helm chart, configure the workspace PVC strategy by setting values for `global.pvcStrategy`. To do so, add the following option to the `helm install` or `helm upgrade` command:
   92  
   93: [subs="+quotes"]
   94  ----
   95  $ helm install --set global.pvcStrategy=__<common>__
   ..
   98  or:
   99  
  100: [subs="+quotes"]
  101  ----
  102  $ helm upgrade --set global.pvcStrategy=__<common>__
  ...
  120  * Create a new cluster by executing the `kubectl apply` command. For example:
  121  +
  122: [subs="+quotes"]
  123  ----
  124  $ kubectl apply -f _<my-cluster.yaml>_
  ...
  127  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
  128  +
  129: [subs="+quotes"]
  130  ----
  131  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/storage/pvcStrategy", "value": "__common__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_accessing-che-from-red-hat-applications-menu.adoc:
   16  A drop-down menu with installed applications is displayed.
   17  +
   18: image::installation/{project-context}-red-hat-application-menu-che-odp.png[link="{imagesdir}/installation/{project-context}-red-hat-application-menu-che-odp.png"]
   19  
   20  . Click the *{prod-short}* link. This creates a new workspace or redirects to an existing one. For source links pointing to publicly accessible GitHub repositories that contain a `devfile.yaml` file, this file is be used to configure the workspace. Otherwise, a default workspace is created.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_configuring-dns-on-azure.adoc:
    8  . In the Azure web console, navigate to *Home* -> *DNS zones*.
    9  +
   10: image::installation/dns-zone-in-microsoft-azure.png[link="{imagesdir}/installation/dns-zone-in-microsoft-azure.png"]
   11  
   12  . Create a new zone.
   ..
   14  .. In the *Resource group* drop-down list, click *eclipseCheResourceGroup*.
   15  +
   16: image::installation/selecting-the-resource-group.png[link="{imagesdir}/installation/selecting-the-resource-group.png"]
   17  
   18  .. In the *Instance details* section, in the *Name* field, type the name of the domain (*azr.my-ide.cloud*, in this case).
   ..
   20  .. Click the btn:[Review + create] button.
   21  +
   22: image::installation/entering-the-name-fo-the-domain.png[link="{imagesdir}/installation/entering-the-name-fo-the-domain.png"]
   23  
   24  . Click the btn:[Create] button.
   25  +
   26: image::installation/completing-the-creation-of-the-zone.png[link="{imagesdir}/installation/completing-the-creation-of-the-zone.png"]
   27  +
   28  The created zone and the list of name servers (NS) are displayed in the *DNS Zones* section.
   29  +
   30: image::installation/list-of-created-zones-and-NS.png[link="{imagesdir}/installation/list-of-created-zones-and-NS.png"]
   31  +
   32  These servers must be configured with the registrar of the domain.
   ..
   40  .. In the *IP Address* field, select the external IP of Ingress-nginx controller that the user had obtained in the xref:installing-ingress-on-azure[] section (*40.89.129.194*, in this case).
   41  +
   42: image::installation/adding-a-record-set.png[link="{imagesdir}/installation/adding-a-record-set.png"]
   43  +
   44  The following is an example of an added DNS zone:
   45  +
   46: image::installation/example-of-an-added-dns-zone.png[link="{imagesdir}/installation/example-of-an-added-dns-zone.png"]
   47  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_editing-the-code-of-applications-running-in-openshift-container-platform-using-che.adoc:
   21  The deployments are displayed as graphical circles surrounded by circular buttons. One of these buttons is *Edit Source Code*.
   22  +
   23: image::installation/edit-source-code-button-che-odp.png[link="{imagesdir}/installation/edit-source-code-button-che-odp.png"]
   24  
   25  . To edit the code of an application using {prod-short}, click the *Edit Source Code* button. This redirects to a workspace with the cloned source code of the application component.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_enabling-ssl-on-openshift-4.adoc:
   28  . Click *Confirm change*.
   29  +
   30: image::installation/tls-mode-true.png[link="{imagesdir}/installation/tls-mode-true.png"]
   31  
   32  . Navigate to the *Resources* tab.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager-on-kubernetes.adoc:
   76  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   77  +
   78: image::installation/dns-challenge-gcp.png[link="{imagesdir}/installation/dns-challenge-gcp.png"]
   79  
   80  . The cert-manager logs should contain information about the DNS challenge. To get the logs (here, `cert-manager-8d478bb45-2924h` is the name of the cert-manager pod):

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager.adoc:
   91  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   92  +
   93: image::installation/new-dns-challenge-added.png[link="{imagesdir}/installation/new-dns-challenge-added.png"]
   94  +
   95  The cert-manager logs should contain information about the DNS challenge.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-azure-using-the-chectl-command.adoc:
   13  * To install {prod-short}, run the following `{prod-cli}` command:
   14  +
   15: [subs="+attributes"]
   16  ----
   17  $ {prod-cli} server:start --installer=helm --platform=k8s --tls \
   ..
   51  Keycloak and {prod-short} now have valid wildcard certificates.
   52  
   53: image::installation/wildcard-certificates-for-keycloak-che.png[link="{imagesdir}/installation/wildcard-certificates-for-keycloak-che.png"]
   54  
   55  .{prod-short} user dashboard
   56: image::installation/che-user-dashboard.png[link="{imagesdir}/installation/che-user-dashboard.png"]
   57  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-codeready-containers-using-chectl.adoc:
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-google-cloud-platform-using-chectl.adoc:
   12  To install {prod-short} on Google Cloud Platform, run the following `{prod-cli}` command:
   13  +
   14: [subs="+attributes"]
   15  ----
   16  $ {prod-cli} server:start --installer=helm --platform=k8s --tls --domain=gcp.my-ide.cloud --multiuser
   ..
   48  
   49  .Keycloak and {prod-short} with valid wildcard certificates
   50: image::installation/keycloak-and-che-with-valid-wildcard-certs.gif[link="{imagesdir}/installation/keycloak-and-che-with-valid-wildcard-certs.gif"]
   51  
   52  .{prod-short} user dashboard
   53: image::installation/che-user-dashboard-gcp.png[link="{imagesdir}/installation/che-user-dashboard-gcp.png"]
   54  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kind-using-chectl.adoc:
   95  . Run `{prod-cli}`, using the external IP of the `ingress-nginx` Service, as an https://nip.io[nip.io] url.
   96  +
   97: [subs="+quotes,+attributes"]
   98  ----
   99  $ {prod-cli} server:start --installer operator --platform k8s --domain 172.17.250.1.nip.io

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kubernetes-using-the-chectl-command.adoc:
   16  . Run the following command:
   17  +
   18: [subs="+quotes,+attributes",options="nowrap"]
   19  ----
   20  $ {prod-cli} server:start --platform=k8s --installer=helm --domain=aws.my-ide.cloud --multiuser --tls
   ..
   53  . The certificate generated by Let’s Encrypt is a valid certificate.
   54  +
   55: image::installation/certificate-generate-lets-encrypt.png[link="{imagesdir}/installation/certificate-generate-lets-encrypt.png"]
   56  +
   57: image::installation/eclipse-che-welcome-to-your-workspace.png[link="{imagesdir}/installation/eclipse-che-welcome-to-your-workspace.png"]
   58  
   59  // .Additional Resources

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minikube-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minishift-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator-and-ssl.adoc:
   18  . Run the following command to create the {prod-short} instance:
   19  +
   20: [subs="+quotes,+attributes",options="nowrap"]
   21  ----
   22  $ {prod-cli} server:start -n _<project-name>_ --domain=<OPENSHIFT_APPS_URL> --tls 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator.adoc:
   20  . Create a new project called *{prod-id-short}*:
   21  +
   22: [subs="+quotes,+attributes"]
   23  ----
   24  $ oc new-project {prod-id-short}
   ..
   27  . Run the following command to create the {prod-short} instance:
   28  +
   29: [subs="+quotes,+attributes",options="nowrap"]
   30  ----
   31  $ {prod-cli} server:start --platform=openshift --installer=operator \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-storage-classes.adoc:
   23  * To provide storage class name for Postgres PVC, use the `{prod-cli}` `server:start` command with the `--postgres-pvc-storage-class-name` flag:
   24  +
   25: [subs="+quotes,+attributes"]
   26  ----
   27  $ {prod-cli} server:start -m -p minikube -a operator --postgres-pvc-storage-class-name=postgress-storage
   ..
   30  * To provide storage class name for {prod-short} workspaces, use the `server:start` command with the `--workspace-pvc-storage-class-name` flag:
   31  +
   32: [subs="+quotes,+attributes"]
   33  ----
   34  $ {prod-cli} server:start -m -p minikube -a operator --workspace-pvc-storage-class-name=workspace-storage
   ..
   70  . Start the {prod-id-short} server with your custom resources:
   71  +
   72: [subs="+quotes,+attributes"]
   73  ----
   74  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml
   ..
  124  
  125  . Bind the two Persisted Volumes:
  126: [subs="+quotes,+attributes"]
  127  ----
  128  $ kubectl apply -f che-workspace-pv.yaml -f che-postgres-pv.yaml
  ...
  176  . Start the {prod-id-short} server with your custom resources:
  177  +
  178: [subs="+quotes,+attributes"]
  179  ----
  180  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-the-che-operator-in-openshift-4-web-console.adoc:
   32  . The `eclipse-che` cluster is created.
   33  +
   34: image::installation/eclipse-che-cluster-create-che-cluster.png[link="{imagesdir}/installation/eclipse-che-cluster-create-che-cluster.png"]
   35  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-dns-on-google-cloud-platform.adoc:
    6  . Using the Cloud DNS, create a zone called *eclipse-che* and, for example, a DNS name *gcp.my-ide.cloud*. Click the btn:[Create] button.
    7  +
    8: image::installation/creating-dns-zone-on-gcp.png[link="{imagesdir}/installation/creating-dns-zone-on-gcp.png"]
    9  +
   10  The Cloud DNS zone is created.
   11  +
   12: image::installation/cloud-dns-zone-on-gcp.png[link="{imagesdir}/installation/cloud-dns-zone-on-gcp.png"]
   13  
   14  . Click the *Registrar Setup* link in the top-right corner of the window. The name servers (NS) to be added to the registrar are displayed.
   15  +
   16: image::installation/registrar-setup-gcp.png[link="{imagesdir}/installation/registrar-setup-gcp.png"]
   17  
   18  . Update the DNS zone (example: `ovh` domain).
   19  . Add the `*.gcp.my-ide.cloud` entry to the external Ingress IP on the cloud DNS.
   20  +
   21: image::installation/dns-settings-gcp.png[link="{imagesdir}/installation/dns-settings-gcp.png"]
   22  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-codeready-containers-using-chectl.adoc:
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minikube-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minishift-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-linux-or-macos.adoc:
   18  . Run the following command in the terminal (this downloads and executes the `install.sh` script):
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ bash <(curl -sL  https://www.eclipse.org/che/{prod-cli}/)
   ..
   25  . Run the following command to verify that the `{prod-cli}` binary used is `/usr/local/bin/{prod-cli}`:
   26  +
   27: [subs="+attributes"]
   28  ----
   29  $ which {prod-cli}
   ..
   34  . Run the following command to verify that the version of {prod-cli} that is the expected one.
   35  +
   36: [subs="+attributes"]
   37  ----
   38  $ {prod-cli} --version
   ..
   46  . Read the installation logs.
   47  +
   48: [subs="+attributes"]
   49  ----
   50  $ cat {prod-cli}-install.log

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-windows.adoc:
    9  * Run the following command in the PowerShell terminal:
   10  +
   11: [subs="+attributes"]
   12  ----
   13  C:\Users> Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://www.eclipse.org/che/{prod-cli}/win/'))

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-openshift-3-for-installing-che.adoc:
   15  . Log in to OpenShift. See link:https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html#basic-setup-and-login[Basic Setup and Login].
   16  +
   17: [subs="+attributes,+quotes",options="nowrap"]
   18  ----
   19  $ oc login
   ..
   22  . Run the following command to verify that the version of the `oc` OpenShift CLI management tool is 3.11:
   23  +
   24: [subs="+attributes,+quotes",options="nowrap"]
   25  ----
   26  $ oc version
   ..
   30  . Run the following commands to create a dummy project to find the URL that this OpenShift instance is using to deploy applications.
   31  +
   32: [subs="+attributes,+quotes",options="nowrap"]
   33  ----
   34  $ oc new-project hello-world
   ..
   44  . Remove the dummy project:
   45  +
   46: [subs="+attributes,+quotes",options="nowrap"]
   47  ----
   48  $ oc delete project hello-world

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-the-aws-system-for-installing-che.adoc:
   35  . Create the zone on AWS:
   36  +
   37: [subs="+quotes",options="nowrap"]
   38  ----
   39  $ aws route53 create-hosted-zone --name aws.my-ide.cloud --caller-reference 1
   ..
   97  . After the cluster is ready, validate it:
   98  +
   99: [subs="+quotes",options="nowrap"]
  100  ----
  101  $ kops validate cluster
  ...
  121  . Check the cluster using the `kubectl` command. The `kubectl` context is also configured automatically by the kops tool:
  122  +
  123: [subs="+quotes",options="nowrap"]
  124  ----
  125  $ kubectl config current-context
  ...
  138  . Install the default configuration.
  139  +
  140: [subs="+quotes",options="nowrap"]
  141  ----
  142  $ kubectl apply \
  ...
  146  . Install the configuration for AWS.
  147  +
  148: [subs="+quotes",options="nowrap"]
  149  ----
  150  $ kubectl apply \
  ...
  156  The following output confirms that the Ingress controller is running.
  157  +
  158: [subs="+quotes",options="nowrap"]
  159  ----
  160  $ kubectl get pods --namespace ingress-nginx
  ...
  165  . Find the external IP of ingress-nginx.
  166  +
  167: [subs="+quotes",options="nowrap"]
  168  ----
  169  $ kubectl get services --namespace ingress-nginx -o jsonpath='{.items[].status.loadBalancer.ingress[0].hostname}'
  ...
  179  Output similar to the following means a needed role must be created manually:
  180  +
  181: [subs="+quotes",options="nowrap"]
  182  ----
  183  arn:aws:sts::269287474311:assumed-role...4bff is not authorized to perform: iam:CreateServiceLinkedRole on resource: arn:aws:iam::269287474311:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing
  ...
  186  Run the following command to create the role:
  187  +
  188: [subs="+quotes",options="nowrap"]
  189  ----
  190  $ aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"
  ...
  194  . Create the wildcard DNS `*` (for `*.aws-my-ide.cloud`) with the previous hostname and ensure to add the dot (`.`) at the end of the hostname. In the *Type* drop-down list, select *CNAME*.
  195  +
  196: image::installation/create-record-set.png[link="{imagesdir}/installation/create-record-set.png"]
  197  +
  198  The following is an example of the resulting window after adding all the values.
  199  +
  200: image::installation/create-record-set-all-values.png[link="{imagesdir}/installation/create-record-set-all-values.png"]
  201  +
  202  The `che.aws.my-ide.cloud` address must resolve to an IP address.
  203  +
  204: [subs="+quotes",options="nowrap"]
  205  ----
  206  $ host che.aws.my-ide.cloud
  ...
  219  . Use the following command to obtain the zone ID:
  220  +
  221: [subs="+quotes",options="nowrap"]
  222  ----
  223  $ aws route53 list-hosted-zones
  ...
  239  . Copy the following content and replace `INSERT_ZONE_ID` with the route53 zone ID:
  240  +
  241: [subs="+quotes",options="nowrap"]
  242  ----
  243  {
  ...
  269  . In the *EC2 Dashboard*, identify the *IAM role* used by the master node.
  270  +
  271: image::installation/aws-lauch-instance.png[link="{imagesdir}/installation/aws-lauch-instance.png"]
  272  +
  273  It is located under the *Description* tab, in the *IAM role* field.
  274  +
  275: image::installation/describtion-tab-iam-role.png[link="{imagesdir}/installation/describtion-tab-iam-role.png"]
  276  
  277  . Click the *IAM role* link (`masters.eu.aws.my-ide.cloud`, in this case).
  278  . Click the *Add inline policy* link at the bottom of the window.
  279  +
  280: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  281  
  282  . In the *Create policy* window, on the *JSON* tab, paste the content of the JSON file created earlier and click the *Review policy* button.
  283  +
  284: image::installation/aws-create-policy.png[link="{imagesdir}/installation/aws-create-policy.png"]
  285  
  286  . In the *Name* field, type `eclipse-che-route53` and click *Create Policy*.
  287  +
  288: image::installation/create-policy-review-policy.png[link="{imagesdir}/installation/create-policy-review-policy.png"]
  289  
  290  
  ...
  293  . To install cert-manager, run the following commands (for details, see link:https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html[Installing Cert on Kubernetes]):
  294  +
  295: [subs="+quotes",options="nowrap"]
  296  ----
  297  $ kubectl create namespace cert-manager
  ...
  303  . Set `validate=false`. If set to `true`, it will only work with the latest Kubernetes:
  304  +
  305: [subs="+quotes",options="nowrap"]
  306  ----
  307  $ kubectl apply \
  ...
  312  . Create the {prod-short} namespace if it does not already exist:
  313  +
  314: [subs="+quotes",options="nowrap"]
  315  ----
  316  $ kubectl create namespace che
  ...
  320  . Create the *cert-manager* user:
  321  +
  322: [subs="+quotes",options="nowrap"]
  323  ----
  324  $ aws iam create-user --user-name cert-manager
  ...
  336  . Create the access key:
  337  +
  338: [subs="+quotes",options="nowrap"]
  339  ----
  340  $ aws iam create-access-key --user-name cert-manager
  ...
  354  . Create a secret from the `SecretAccessKey` content.
  355  +
  356: [subs="+quotes",options="nowrap"]
  357  ----
  358  $ kubectl create secret generic aws-cert-manager-access-key \
  ...
  362  . Use the *Add inline policy* link to add the inline policy to link:https://console.aws.amazon.com/iam/home#/users/cert-manager[AWS Cert-Manager].
  363  +
  364: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  365  
  366  . Paste the following inline policy in the *JSON* tab:
  367  +
  368: [subs="+quotes",options="nowrap"]
  369  ----
  370  {
  ...
  391  
  392  +
  393: image::installation/json-review-policy.png[link="{imagesdir}/installation/json-review-policy.png"]
  394  
  395  . Click *Review policy*.
  396  +
  397: image::installation/create-policy-review.png[link="{imagesdir}/installation/create-policy-review.png"]
  398  
  399  . In the *Name* field, type `route53`, and click *Create policy*.
  ...
  451  . Check if the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is being added to the DNS zone for _Let’s encrypt_.
  452  +
  453: image::installation/aws-hosted-zones-dns.png[link="{imagesdir}/installation/aws-hosted-zones-dns.png"]
  454  +
  455  The cert-manager logs should contain information about the DNS challenge.
  ...
  457  . Obtain the name of the pods:
  458  +
  459: [subs="+quotes",options="nowrap"]
  460  ----
  461  $ kubectl get pods --namespace cert-manager
  ...
  469  . Obtain the logs using the following command (here, `cert-manager-8d478bb45-sdfmz` is the name of the cert-manager pod):
  470  +
  471: [subs="+quotes",options="nowrap"]
  472  ----
  473  $ kubectl logs -f cert-manager-8d478bb45-sdfmz -n cert-manager
  ...
  484  . Ensure that the certificate is ready:
  485  +
  486: [subs="+quotes",options="nowrap"]
  487  ----
  488  $ kubectl describe certificate/che-tls -n che
  ...
  502  . Wait for the status to become `OK` and ensure that the log contains the following entry:
  503  +
  504: [subs="+quotes",options="nowrap"]
  505  ----
  506  I0729 13:56:26.140886       1 conditions.go:143] Found status change for Certificate "che-tls" condition "Ready": "False" -> "True"; setting lastTransitionTime to 2019-07-29 13:56:26.140866531 +0000 UTC m=+4557.134131468
  ...
  509  . Ensure that the status is up-to-date using the following command:
  510  +
  511: [subs="+quotes",options="nowrap"]
  512  ----
  513  $ kubectl describe certificate/che-tls -n che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_upgrading-the-chectl-management-tool.adoc:
   16  * Run the following command in the terminal to update `{prod-cli}` to the latest version.
   17  +
   18: [subs="+attributes"]
   19  ----
   20  # {prod-cli} update
   ..
   34  To move to a different channel, invoke the update with the name of the channel as an optional argument.
   35  
   36: [subs="+attributes"]
   37  ----
   38  # {prod-cli} update [next|stable]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-in-openshift-4-web-console.adoc:
    9  
   10  * A {prod-short} is being deployed on this instance of OpenShift 4.
   11: ifeval::["{context}" == "installing-che-on-openshift-4-from-operatorhub"]
   12  See xref:installing-{prod-id-short}-using-the-{prod-id-short}-operator-in-openshift-4-web-console_{context}[].
   13  endif::[]
   ..
   33  The screen displays the state of the resources assigned to the {prod-short} deployment.
   34  +
   35: image::installation/eclipse-che-resources-tab.png[link="{imagesdir}/installation/eclipse-che-resources-tab.png"]
   36  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools.adoc:
   15  . Run the following commands to select the `{project-context}` project:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ oc project _<project_name>_
   ..
   46  Example output of the command:
   47  +
   48: [options="nowrap",role="white-space-pre",subs="+quotes,+attributes"]
   49  ----
   50  include::examples/{project-context}-cluster-deployment-openshift-logs.adoc[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-7-known-issues.adoc:
    1: [id="{prod-id-short}-known-issues"]
    2  = {prod-short} {prod-ver} known issues
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-deployment-options-using-chectl.adoc:
    2  = {prod-short} deployment options using {prod-cli}
    3  
    4: [options="nowrap",subs="+attributes"]
    5  ----
    6  {prod-cli} server:start --help

387 matches across 139 files


Searching 538 files for "\[id[a-z]+\"\]" (regex)

0 matches

Searching 538 files for "\[id="[a-z]+\"\]" (regex)

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_factory-json-reference.adoc:
   36  The `factory.policies`, `factory.ide`, and `factory.creator` objects are unique to factories. They provide meta information to the automation engine that alter the presentation of the factory URL or the behavior of the provisioning.
   37  
   38: [id="mixins"]
   39  == Mixins
   40  
   ..
   89  ----
   90  
   91: [id="policies"]
   92  == Policies
   93  
   ..
  276  Use https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions.html[regular expressions] in `sed`, both in find-replace and file-file type patterns.
  277  
  278: [id="creator"]
  279  == Creator
  280  

3 matches in 1 file


Searching 538 files for "[a-z]+\"\]" (regex)

C:\Users\yanar_000\Documents\che-docs\src\main\_layouts\default.html:
   37      <script>
   38          $(function () {
   39:             $('[data-toggle="tooltip"]').tooltip()
   40          })
   41      </script>

C:\Users\yanar_000\Documents\che-docs\src\main\css\customstyles.css:
  768  }
  769  
  770: a[data-toggle="tooltip"] {
  771      color: #649345;
  772      font-style: italic;
  ...
 1240   */
 1241  /* 1 */
 1242: .ie9 img[src$=".svg"] {
 1243      width: 100%;
 1244  }
 1245  /* 2 */
 1246  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
 1247:     img[src$=".svg"] {
 1248          width: 100%;
 1249      }

C:\Users\yanar_000\Documents\che-docs\src\main\css\printstyles.css:
   25      color: blue !important;
   26  }
   27: a[href*="mailto"]::after, a[data-toggle="tooltip"]::after, a[href].noCrossRef::after {
   28      content: "";
   29  }

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-blue.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-che.css:
   32  }
   33  
   34: a[data-toggle="tooltip"] {
   35      color: #649345;
   36      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\theme-green.css:
   40  }
   41  
   42: a[data-toggle="tooltip"] {
   43      color: #649345;
   44      font-style: italic;

C:\Users\yanar_000\Documents\che-docs\src\main\css\fonts\fontawesome-webfont.woff2:
    <binary>

C:\Users\yanar_000\Documents\che-docs\src\main\js\customscripts.js:
   12      }
   13      // activate tooltips. although this is a bootstrap js function, it must be activated this way in your theme.
   14:     $('[data-toggle="tooltip"]').tooltip({
   15          placement : 'top'
   16      });
   ..
   27  $(function() {
   28      var json, tabsState;
   29:     $('a[data-toggle="pill"], a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
   30          var href, json, parentId, tabsState;
   31  

C:\Users\yanar_000\Documents\che-docs\src\main\js\jekyll-search.js:
    1: !function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module){module.exports=function(){function receivedResponse(xhr){return 200==xhr.status&&4==xhr.readyState}function handleResponse(xhr,callback){xhr.onreadystatechange=function(){if(receivedResponse(xhr))try{callback(null,JSON.parse(xhr.responseText))}catch(err){callback(err,null)}}}var self=this;self.load=function(location,callback){var xhr=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");xhr.open("GET",location,!0),handleResponse(xhr,callback),xhr.send()}}},{}],2:[function(require,module){function FuzzySearchStrategy(){function createFuzzyRegExpFromString(string){return new RegExp(string.split("").join(".*?"),"gi")}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),!!string.match(createFuzzyRegExpFromString(crit)))}}module.exports=new FuzzySearchStrategy},{}],3:[function(require,module){function LiteralSearchStrategy(){function doMatch(string,crit){return string.toLowerCase().indexOf(crit.toLowerCase())>=0}var self=this;self.matches=function(string,crit){return"string"!=typeof string?!1:(string=string.trim(),doMatch(string,crit))}}module.exports=new LiteralSearchStrategy},{}],4:[function(require,module){module.exports=function(){function findMatches(store,crit,strategy){for(var data=store.get(),i=0;i<data.length&&matches.length<limit;i++)findMatchesInObject(data[i],crit,strategy);return matches}function findMatchesInObject(obj,crit,strategy){for(var key in obj)if(strategy.matches(obj[key],crit)){matches.push(obj);break}}function getSearchStrategy(){return fuzzy?fuzzySearchStrategy:literalSearchStrategy}var self=this,matches=[],fuzzy=!1,limit=10,fuzzySearchStrategy=require("./SearchStrategies/fuzzy"),literalSearchStrategy=require("./SearchStrategies/literal");self.setFuzzy=function(_fuzzy){fuzzy=!!_fuzzy},self.setLimit=function(_limit){limit=parseInt(_limit,10)||limit},self.search=function(data,crit){return crit?(matches.length=0,findMatches(data,crit,getSearchStrategy())):[]}}},{"./SearchStrategies/fuzzy":2,"./SearchStrategies/literal":3}],5:[function(require,module){module.exports=function(_store){function isObject(obj){return!!obj&&"[object Object]"==Object.prototype.toString.call(obj)}function isArray(obj){return!!obj&&"[object Array]"==Object.prototype.toString.call(obj)}function addObject(data){return store.push(data),data}function addArray(data){for(var added=[],i=0;i<data.length;i++)isObject(data[i])&&added.push(addObject(data[i]));return added}var self=this,store=[];isArray(_store)&&addArray(_store),self.clear=function(){return store.length=0,store},self.get=function(){return store},self.put=function(data){return isObject(data)?addObject(data):isArray(data)?addArray(data):void 0}}},{}],6:[function(require,module){module.exports=function(){var self=this,templatePattern=/\{(.*?)\}/g;self.setTemplatePattern=function(newTemplatePattern){templatePattern=newTemplatePattern},self.render=function(t,data){return t.replace(templatePattern,function(match,prop){return data[prop]||match})}}},{}],7:[function(require){!function(window){"use strict";function SimpleJekyllSearch(){function initWithJSON(){store.put(opt.dataSource),registerInput()}function initWithURL(url){jsonLoader.load(url,function(err,json){err?throwError("failed to get JSON ("+url+")"):(store.put(json),registerInput())})}function throwError(message){throw new Error("SimpleJekyllSearch --- "+message)}function validateOptions(_opt){for(var i=0;i<requiredOptions.length;i++){var req=requiredOptions[i];_opt[req]||throwError("You must specify a "+req)}}function assignOptions(_opt){for(var option in opt)opt[option]=_opt[option]||opt[option]}function isJSON(json){try{return json instanceof Object&&JSON.parse(JSON.stringify(json))}catch(e){return!1}}function emptyResultsContainer(){opt.resultsContainer.innerHTML=""}function appendToResultsContainer(text){opt.resultsContainer.innerHTML+=text}function registerInput(){opt.searchInput.addEventListener("keyup",function(e){if (e.keyCode == 38 || e.keyCode == 40) return false;return 0==e.target.value.length?void emptyResultsContainer():void render(searcher.search(store,e.target.value))})}function render(results){if(emptyResultsContainer(),0==results.length)return appendToResultsContainer(opt.noResultsText);for(var i=0;i<results.length;i++)appendToResultsContainer(templater.render(opt.searchResultTemplate,results[i]))}var self=this,requiredOptions=["searchInput","resultsContainer","dataSource"],opt={searchInput:null,resultsContainer:null,dataSource:[],searchResultTemplate:'<li><a href="{url}" title="{desc}">{title}</a></li>',noResultsText:"No results found",limit:10,fuzzy:!1};self.init=function(_opt){validateOptions(_opt),assignOptions(_opt),isJSON(opt.dataSource)?initWithJSON(opt.dataSource):initWithURL(opt.dataSource)}}var Searcher=require("./Searcher"),Templater=require("./Templater"),Store=require("./Store"),JSONLoader=require("./JSONLoader"),searcher=new Searcher,templater=new Templater,store=new Store,jsonLoader=new JSONLoader;window.SimpleJekyllSearch=new SimpleJekyllSearch}(window,document)},{"./JSONLoader":1,"./Searcher":4,"./Store":5,"./Templater":6}]},{},[7]);
    2  
    3  var currentSelection = 0;

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_authorizing-users.adoc:
   40  include::ref_monitorsystem-permission.adoc[leveloffset=+1]
   41  
   42: ifeval::["{project-context} == "che"]
   43  include::con_super-privileged-mode.adoc[leveloffset=+1]
   44  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_deploying-the-registries.adoc:
   14  Otherwise, these images can be pushed to a container registry (public, such as `quay.io`, or the DockerHub, or a private registry).
   15  
   16: ifeval::["{project-context}" == "che"]
   17  include::proc_deploying-registries-in-kubernetes.adoc[leveloffset=+1]
   18  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\assembly_monitoring-che.adoc:
   22  include::proc_collecting-che-metrics-with-prometheus.adoc[leveloffset=+1]
   23  
   24: ifeval::["{project-context}" == "che"]
   25  
   26  include::proc_viewing-che-metrics-on-grafana-dashboards.adoc[leveloffset=+1]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_authorization-and-user-management.adoc:
   13  To find your Keycloak URL:
   14  
   15: ifeval::["{project-context}" == "che"]
   16  If {prod-short} is running on Kubernetes:
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_kubernetes-image-puller-overview.adoc:
   10  The Kubernetes Image Puller pulls its configuration from a `ConfigMap` with the following available parameters:
   11  
   12: [id="kubernetes-image-puller-configuration"]
   13  .Kubernetes Image Puller parameters
   14: [options="header"]
   15  |===
   16  |Parameter |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_roles-in-an-organization.adoc:
    5  :context: roles-in-an-organization
    6  
    7: [id="roles-in-an-organization"]
    8  = Roles in an organization
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\con_super-privileged-mode.adoc:
   10  The *super-privileged* mode is disabled by default. To change to the *super-privileged* mode, set the `CHE_SYSTEM_SUPER__PRIVILEGED__MODE` variable to `true` in the `che.env` file. The following is a list of services that are enabled for users with the *manageSystems* permissions and with *super-privileged* mode on.
   11  
   12: [options="header"]
   13  |====
   14  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_authenticating-to-the-che-server-using-openid.adoc:
   69  To obtain the token, send a request to the token endpoint with the username and password credentials. This request can be schematically described as the following cURL request:
   70  
   71: [subs="+quotes"]
   72  ----
   73  $ curl --data "grant_type=password&client_id=__<client_name>__&username=__<username>__&password=__<password>__" \
   ..
   88  To do this, send a request to the token endpoint that can be schematically described as the following cURL request:
   89  
   90: [subs="+quotes"]
   91  ----
   92  $ curl -X POST -d "client_id=__<client_name>__" \
   ..
  104  
  105  `_<user_openshift_token>_` is the token retrieved by the end-user with the command:
  106: [subs="+quotes"]
  107  ----
  108  $ oc whoami --show-token

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-devfile-registry.adoc:
   19  +
   20  .File organization for a devfile
   21: [subs="+quotes"]
   22  ----
   23  ./che-devfile-registry/devfiles/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_building-a-custom-plug-in-registry.adoc:
   19  +
   20  .File organization for a plugin
   21: [subs="+quotes"]
   22  ----
   23  ./che-plugin-registry/v3/plugins/

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_collecting-che-metrics-with-prometheus.adoc:
   15  +
   16  .Prometheus configuration example
   17: [source,yaml,subs="+attributes"]
   18  ----
   19  include::examples/prometheus-config.yaml[]
   20  ----
   21  +
   22: ifeval::["{project-context}" == "che"]
   23  Latest version: link:https://+github.com/eclipse/che/blob/master/deploy/openshift/templates/monitoring/prometheus-config.yaml[example `prometheus-config.yaml` on GitHub].
   24  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-keycloak-tokens.adoc:
    6  You can change the following Keycloak token settings:
    7  
    8: image::keycloak/keycloak_realm.png[link="{imagesdir}/keycloak/keycloak_realm.png"]
    9  
   10  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_configuring-smtp-and-email-notifications.adoc:
    5  :context: configuring-smtp-and-email-notifications
    6  
    7: [id="configuring-smtp-and-email-notifications"]
    8  = Configuring SMTP and email notifications
    9  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-helm.adoc:
    8  * The `helm` binary
    9  
   10: ifeval::["{project-context}" == "che"]
   11  * An OpenShift or Kubernetes cluster to install to
   12  * The `oc` or the `kubectl` binary
   ..
   15  endif::[]
   16  
   17: ifeval::["{project-context}" != "che"]
   18  * An OpenShift cluster to install to
   19  * The `oc` binary
   ..
   23  
   24  .Parameters for installing with Helm
   25: [options="header"]
   26  |===
   27  |Value |Usage |Default

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-kubernetes-image-puller-using-openshift-templates.adoc:
   12  
   13  .Parameters for installing with OpenShift templates
   14: [options="header"]
   15  |===
   16  |Value |Usage |Default
   ..
   40  . Log into the OpenShift cluster and create a namespace to deploy the puller into:
   41  +
   42: [subs="+quotes"]
   43  ----
   44  $ oc login -u username -p password https://openshift-cluster-api:6443
   ..
   61  To set different values than the defaults, use:
   62  +
   63: [subs="+quotes"]
   64  ----
   65  $ oc process -p __<parameterName>__=__<value>__ -f deploy/openshift/__<template>__ | oc apply -f -

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-kubernetes.adoc:
   10  . To deploy the plug-in registry using the Helm chart, run the following command:
   11  +
   12: [subs="+quotes,+attributes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__     <1>
   ..
   28  . The devfile registry also has a Helm chart in the `deploy/kubernetes/che-devfile-registry/` directory of the GitHub repository. To deploy it, run the command:
   29  +
   30: [subs="+quotes,+attributes"]
   31  ----
   32  NAMESPACE=__<namespace-name>__     <1>
   ..
   46  . The Helm chart creates a pod, a service, and an Ingress. To get them, use `app=che-plugin-registry` (or `app=che-plugin-registry` for the devfile registry).
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ kubectl get -o custom-columns=TYPE:.kind,NAME:.metadata.name \
   ..
   58  . To verify that the new plug-in is correctly published to the plug-in registry, make a request to the registry path `/v3/plugins/index.json` (or `/devfiles/index.json` for the devfile registry).
   59  +
   60: [subs="+quotes,+attributes"]
   61  ----
   62  $ URL=$(kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
   ..
   90  . Verify that the {prod-short} server points to the URL of the registry. To do this, compare the value of the `pass:[CHE_WORKSPACE_PLUGIN__REGISTRY__URL]` parameter in the `che` ConfigMap (or `pass:[CHE_WORKSPACE_DEVFILE__REGISTRY__URL]` for the devfile registry):
   91  +
   92: [subs="+quotes,+attributes"]
   93  ----
   94  $ kubectl get \
   ..
  101  with the URL of the Ingress:
  102  +
  103: [subs="+quotes,+attributes"]
  104  ----
  105  $ kubectl get -o 'custom-columns=URL:.spec.rules[0].host' \
  ...
  110  . If they do not match, update the ConfigMap and restart the {prod-short} server.
  111  +
  112: [subs="+quotes,+attributes"]
  113  ----
  114  $ kubectl edit cm/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_deploying-registries-in-openshift.adoc:
   10  . To deploy the plug-in registry using the OpenShift template, run the following command:
   11  +
   12: [subs="+quotes"]
   13  ----
   14  NAMESPACE=__<namespace-name>__  <1>
   ..
   25  . The devfile registry has an OpenShift template in the `deploy/openshift/` directory of the GitHub repository. To deploy it, run the command:
   26  +
   27: [subs="+quotes"]
   28  ----
   29  NAMESPACE=__<namespace-name>__  <1>
   ..
   39  
   40  . Check if the registries are deployed successfully on OpenShift.
   41: ifeval::["{project-context}" == "crw"]
   42  For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[Deploying registries in Kubernetes] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   43  endif::[]
   44: ifeval::["{project-context}" == "che"]
   45  The steps to check are similar to the Kubernetes steps. For details, see the xref:deploying-registries-in-kubernetes_deploying-the-registries[] section, where the only difference when deploying in OpenShift is that Ingresses are replaced with routes.
   46  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_developing-grafana-dashboards.adoc:
   12  +
   13  .New Grafana dashboard: Queries to
   14: image::monitoring/monitoring-che-new-grafana-dashboard-queries.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-queries.png"]
   15  
   16  . In the *Visualisation* section, choose a metric to be shown in the following visual in the form of a graph, gauge, heatmap, or others.
   17  +
   18  .New Grafana dashboard: Visualization
   19: image::monitoring/monitoring-che-new-grafana-dashboard-visualization.png[link="{imagesdir}/monitoring/monitoring-che-new-grafana-dashboard-visualization.png"]
   20  
   21  . Save changes to the dashboard by clicking the btn:[Save] button, and copy and paste the JSON code to the deployment.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-authentication-with-social-accounts-and-brokering.adoc:
   18  . Set store tokens and stored tokens readable to *ON*.
   19  +
   20: image::git/kc_provider.png[link="{imagesdir}/git/kc_provider.png"]
   21  
   22  . Add a default read-token role.
   23  +
   24: image::git/kc_roles.png[link="{imagesdir}/git/kc_roles.png"]
   25  
   26  This is the default `delegated` OAuth service mode for multi-user {prod-short}. You can configure the OAuth service mode with the property `che.oauth.service_mode`.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_enabling-che-metrics-collections.adoc:
   12  For Jaeger tracing to work, enable the following environment variables in your {prod-short} deployment:
   13  
   14: [source,bash,subs="+quotes,+attributes"]
   15  ----
   16  # Activating {prod-short} tracing modules

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_installing-the-jaeger-tracing-tool-for-che-on-openshift-4.adoc:
   15  . In the {prod-short} installation namespace of the {ocp} cluster,  use the `oc` client to create a new application for the Jaeger deployment.
   16  +
   17: [subs="+quotes,attributes"]
   18  ----
   19  $ oc new-app -f / ${CHE_LOCAL_GIT_REPO}/deploy/openshift/templates/jaeger-all-in-one-template.yml:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-server-logs-on-the-cli.adoc:
   15  +
   16  .Example
   17: [subs="+attributes"]
   18  ----
   19  $ oc get pods
   ..
   24  . To get the logs for a deployment, run the following command:
   25  +
   26: [subs="+quotes"]
   27  ----
   28  $ oc logs _<name-of-pod>_
   ..
   30  +
   31  .Example
   32: [subs="+attributes"]
   33  ----
   34  $ oc logs {prod-deployment}-11-j4w2b

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-theia-ide-logs-on-the-cli.adoc:
    6  .Prerequisites
    7  
    8: ifeval::["{project-context}" == "che"]
    9  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{site-baseurl}che-7/installing-che-on-openshift-4-from-operatorhub/#viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools_installing-che-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   10  endif::[]
   11: ifeval::["{project-context}" == "crw"]
   12  * {prod-short} is deployed in an OpenShift cluster. Verify the state of the deployment in the OpenShift logs. See link:{prod-ig-url}installing-{prod-id-short}-on-ocp-4_crw#viewing-the-state-of-the-{prod-id-short}-cluster-deployment-using-openshift-4-cli-tools_installing-{prod-id-short}-on-openshift-4-from-operatorhub[Viewing the state of the {prod-short} cluster deployment using OpenShift 4 CLI tools].
   13  endif::[]
   ..
   49  . Get logs from the `theia/ide` container:
   50  +
   51: [subs="+quotes"]
   52  ----
   53  $ oc logs --follow _<name-of-pod>_ --container _<name-of-container>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-che-traces-in-jaeger-ui.adoc:
   13  +
   14  .Using Jaeger UI to trace {prod-short}
   15: image::tracing/trace-search.png[link="{imagesdir}/tracing/trace-search.png"]
   16  
   17  . Select the trace to expand it and show the tree of nested spans, as well as additional information about the highlighted span, such as tags or durations.
   18  +
   19  .Expanded tracing tree
   20: image::tracing/trace-tree-expanded.png[link="{imagesdir}/tracing/trace-tree-expanded.png"]
   21  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-kubernetes-events.adoc:
   29  ////
   30  +
   31: image::logs/kubernetes-events.png[link="{imagesdir}/logs/kubernetes-events.png"]
   32  ////
   33  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\proc_viewing-logs-for-php-debug.adoc:
    1: [id="viewing-logs-for-php-debug"]
    2  = Viewing logs for PHP-Debug
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_configuring-system-variables.adoc:
   10  
   11  
   12: [id="configuring-system-variables"]
   13  = Configuring system properties for {prod-short}
   14  
   ..
   20  .Example of changing the default value of `+++CHE_WORKSPACE_DEFAULT__MEMORY__LIMIT__MB+++` to 2048:
   21  
   22: [source,yaml,subs="+attributes"]
   23  ----
   24  include::examples/changing-system-variables.yaml[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_grafana-dashboards-for-che.adoc:
   10  
   11  .The *Workspaces* panel
   12: image::monitoring/monitoring-che-che-server-dashboard-workspace-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-panel.png"]
   13  
   14  * *Workspace start rate* -- the ratio between successful and failed started workspaces
   ..
   24  
   25  .The *Users* panel
   26: image::monitoring/monitoring-che-che-server-dashboard-users-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-users-panel.png"]
   27  
   28  * *Number of Users* -- the number of users known to {prod-short} over time
   ..
   30  
   31  .The *Tomcat* panel
   32: image::monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-tomcat-panel.png"]
   33  
   34  * *Max number of active sessions* -- the max number of active sessions that have been active at the same time
   ..
   40  
   41  .The *Request* panel
   42: image::monitoring/monitoring-che-che-server-dashboard-requests-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-requests-panel.png"]
   43  
   44  The *Requests* panel displays HTTP requests in a graph that shows the average number of requests per minute.
   45  
   46  .The *Executors* panel, part 1
   47: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-1.png"]
   48  
   49  * *Threads running* - the number of threads that are not terminated aka alive. May include threads that are in a waiting or blocked state. 
   ..
   53  
   54  .The *Executors* panel, part 2
   55: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-2.png"]
   56  
   57  * *Executor threads active* - number of threads that actively execute tasks.
   ..
   61  
   62  .The *Executors* panel, part 3
   63: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-3.png"]
   64  
   65  * *Rejected task* - the number of tasks that were rejected from execution.
   ..
   69  
   70  .The *Executors* panel, part 4
   71: image::monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-executors-panel-4.png"]
   72  
   73  * *Task execution seconds max* - 5min moving maximum of task execution
   ..
   77  
   78  .The *Traces* panel, part 1
   79: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-1.png"]
   80  
   81  * *Workspace start Max* - maximum workspace start time
   ..
   85  
   86  .The *Traces* panel, part 2
   87: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-2.png"]
   88  
   89  * *OpenShiftInternalRuntime#start Max* - maximum time of OpenShiftInternalRuntime#start operation
   ..
   93  
   94  .The *Traces* panel, part 3
   95: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-3.png"]
   96  
   97  * *OpenShiftEnvironmentProvisioner#provision Max* - maximum time of OpenShiftEnvironmentProvisioner#provision operation
   ..
  101  
  102  .The *Traces* panel, part 4
  103: image::monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-trace-panel-4.png"]
  104  
  105  * *WaitMachinesStart Max* - maximim time of WaitMachinesStart operations
  ...
  109  
  110  .The *Workspace detailed* panel
  111: image::monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png[link="{imagesdir}/monitoring/monitoring-che-che-server-dashboard-workspace-detailed-panel.png"]
  112  
  113  The *Workspace Detailed* panel contains heat maps, which illustrate the average time of workspace starts or fails. The row shows some period of time.
  ...
  119  
  120  .{prod-short} server JVM dashboard
  121: image::monitoring/monitoring-che-che-server-jvm-dashboard.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard.png"]
  122  
  123  .Quick Facts
  124: image::monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-quick-facts.png"]
  125  
  126  .JVM Memory
  127: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory.png"]
  128  
  129  .JVM Misc
  130: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-misc.png"]
  131  
  132  .JVM Memory Pools (heap)
  133: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-heap.png"]
  134  
  135  .JVM Memory Pools (Non-Heap)
  136: image::monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-jvm-memory-pools-non-heap.png"]
  137  
  138  .Garbage Collection
  139: image::monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-garbage-collection.png"]
  140  
  141  .Classloading
  142: image::monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-classloading.png"]
  143  
  144  .Buffer Pools
  145: image::monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png[link="{imagesdir}/monitoring/monitoring-che-che-server-jvm-dashboard-buffer-pools.png"]
  146  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_managesystem-permission.adoc:
    8  Users with the *manageSystem* permission have access to the following services:
    9  
   10: [options="header"]
   11  |====
   12  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\ref_monitorsystem-permission.adoc:
    9  Users with the *monitorSystem* permission have access to the following services.
   10  
   11: [options="header"]
   12  |====
   13  |Path|HTTP Method|Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\administration-guide\examples\che-devfile-meta.yml:
    1  displayName: Rust
    2  description: Rust Stack with Rust 1.39
    3: tags: ["Rust"]
    4  icon: https://www.eclipse.org/che/images/logo-eclipseche.svg
    5  globalMemoryLimit: 1686Mi

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_branding-che-theia.adoc:
   12  :parent-context-of-branding-che-theia: {context}
   13  
   14: [id="branding-che-theia"]
   15  = Branding Che-Theia
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_che-extensibility-reference.adoc:
   12  :parent-context-of-che-extensibility-reference: {context}
   13  
   14: [id="{prod-id-short}-extensibility-reference"]
   15  = {prod-short} extensibility reference
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_developing-che-theia-plug-ins.adoc:
   12  :parent-context-of-developing-che-theia-plug-ins: {context}
   13  
   14: [id="developing-che-theia-plug-ins"]
   15  = Developing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_publishing-che-theia-plug-ins.adoc:
   12  :parent-context-of-publishing-che-theia-plug-ins: {context}
   13  
   14: [id="publishing-che-theia-plug-ins"]
   15  = Publishing Che-Theia plug-ins
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\assembly_testing-che-theia-plug-ins.adoc:
   12  :parent-context-of-testing-che-theia-plug-ins: {context}
   13  
   14: [id="testing-che-theia-plug-ins"]
   15  = Testing Che-Theia plug-ins
   16  
   ..
   42  When you run a hosted instance, the main Che-Theia instance opens the *Output* view. This view contains all the output from the `yarn` backend process. It also contains the output of the backend plug-in that is being developed.
   43  
   44: image::extensibility/hosted-instance-output.png[link="{imagesdir}/extensibility/hosted-instance-output.png"]
   45  
   46  == Controlling a hosted Che-Theia instance
   ..
   59  Your plug-in will handle the opening of a document and displaying a notification message when the document is opened.
   60  
   61: image:extensibility/code-completion-example.gif[link="{imagesdir}/extensibility/code-completion-example.gif"]
   62  ====
   63  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-a-che-theia-plug-in-into-a-workspace.adoc:
   17  +
   18  .Adding plug-ins through the dashboard
   19: image::extensibility/adding-plug-ins-in-dashboard.png[link="{imagesdir}/extensibility/adding-plug-ins-in-dashboard.png"]
   20  
   21  
   ..
   30  +
   31  .Adding plug-ins by configuring a component
   32: image::extensibility/adding-plug-ins-in-workspace-devfile.png[link="{imagesdir}/extensibility/adding-plug-ins-in-workspace-devfile.png"]
   33  
   34  +

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_adding-support-for-a-new-debugger.adoc:
    9  ---
   10  
   11: [id="adding-support-for-a-new-debugger"]
   12  = Adding support for a new debugger
   13  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_bootstrapping-che-theia-plug-in-development-with-yeoman.adoc:
   77  Alternatively, run `yo` without any parameters and select the `@theia/plugin` generator from the list of available generators.
   78  +
   79: image::extensibility/yo-select-plug-in-generator.png[link="{imagesdir}/extensibility/yo-select-plug-in-generator.png"]
   80  
   81  . Enter the information to configure the plug-in. For example:
   82  +
   83: image::extensibility/launching-console-plug-in-generator.png[link="{imagesdir}/extensibility/launching-console-plug-in-generator.png"]
   84  
   85  When the plug-in is generated, it appears in the *Files* panel. The sample is already compiled and contains the plug-in binary. In this example, the plug-in binary is named `my_first_plugin.theia`.
   ..
   95  . Type `Yeom` to filter the commands. Select the `Yeoman Wizard` command.
   96  +
   97: image::extensibility/yeoman-wizard-launching.png[link="{imagesdir}/extensibility/yeoman-wizard-launching.png"]
   98  +
   99  Note that launching the wizard may take a few seconds.
  ...
  101  . Enter the new project name.
  102  +
  103: image::extensibility/yeoman-wizard-choosing-plug-in-name.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-name.png"]
  104  
  105  . Select the desired plug-in type (client-side or server-side).
  106  +
  107: image::extensibility/yeoman-wizard-choosing-plug-in-type.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-type.png"]
  108  
  109  . Select the plug-in sample to use.
  110  +
  111: image::extensibility/yeoman-wizard-choosing-plug-in-sample.png[link="{imagesdir}/extensibility/yeoman-wizard-choosing-plug-in-sample.png"]
  112  
  113  When the plug-in is generated, the *Yeoman wizard* displays a notification.
  114  
  115: image::extensibility/yeoman-wizard-plug-in-generated.png[link="{imagesdir}/extensibility/yeoman-wizard-plug-in-generated.png"]
  116  
  117  The plug-in sample displays in the *Files* panel. Use the *Output* tab in the botton panel to access logs for plug-in generation.
  118  
  119: image::extensibility/yeoman-wizard-logs.png[link="{imagesdir}/extensibility/yeoman-wizard-logs.png"]
  120  
  121  NOTE: The *Yeoman wizard* only works when a workspace is opened in Che-Theia.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_che-usage-with-tls.adoc:
   10  
   11  +
   12: image::contributor/che-tls-chrome-import_1.png[link="{imagesdir}/contributor/che-tls-chrome-import_1.png"]
   13  
   14  . Select `Trust this certificate for identifying websites` and click OK.
   15  
   16  +
   17: image::contributor/che-tls-chrome-import_2.png[link="{imagesdir}/contributor/che-tls-chrome-import_2.png"]
   18  
   19  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   20  
   21  +
   22: image::contributor/che-tls-chrome-import_3.png[link="{imagesdir}/contributor/che-tls-chrome-import_3.png"]
   23  
   24  
   ..
   29  
   30  +
   31: image::contributor/che-tls-firefox-import_1.png[link="{imagesdir}/contributor/che-tls-firefox-import_1.png"]
   32  
   33  . Go to `Authorities` tab, click `Import` and find your generated `rootCA.crt` (or `ca.crt` for OpenShift 4) file.
   34  
   35  +
   36: image::contributor/che-tls-firefox-import_2.png[link="{imagesdir}/contributor/che-tls-firefox-import_2.png"]
   37  
   38  . Select `Trust this CA to identify websites` and click OK.
   39  
   40  +
   41: image::contributor/che-tls-firefox-import_3.png[link="{imagesdir}/contributor/che-tls-firefox-import_3.png"]
   42  
   43  . Browser is satisfied with {prod-short} certificate and is reporting secure connection.
   44  
   45  +
   46: image::contributor/che-tls-firefox-import_4.png[link="{imagesdir}/contributor/che-tls-firefox-import_4.png"]
   47  
   48  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_defining-custom-branding-values-for-che-theia.adoc:
    8  Create a `product.json` file with a new name of the product, logo, description, and list of hyperlinks on the *Welcome* page (an example of link:https://github.com/che-samples/che-theia-branding-example/blob/master/branding/product.json[`product.json`]:
    9  
   10: [source,json,attrs="nowrap"]
   11  ----
   12  {
   ..
   19      "welcome": {                             <4>
   20          "title": "Welcome to Your Workspace",
   21:         "links": ["website", "documentation"]
   22      },
   23      "links": {                               <5>
   ..
   43  To use only one logo image for both dark and light themes:
   44  
   45: [source,json,attrs="nowrap"]
   46  ----
   47  {

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-kubernetes.adoc:
   18  
   19  +
   20: [subs="+quotes"]
   21  ----
   22  $ kubectl create namespace che
   ..
   27  
   28  +
   29: [subs="+quotes"]
   30  ----
   31  $ kubectl create secret tls che-tls --key=domain.key --cert=domain.crt -n che
   ..
   36  
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ cp rootCA.crt ca.crt
   ..
   46  
   47  +
   48: [subs="+quotes,+attributes"]
   49  ----
   50  $ {prod-cli} server:start --platform=minikube --installer=helm --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift-using-operator.adoc:
   17  
   18  +
   19: [subs="+quotes"]
   20  ----
   21  $ oc login -u system:admin --insecure-skip-tls-verify=true
   ..
   27  
   28  +
   29: [subs="+quotes,+attributes"]
   30  ----
   31  $ oc delete secret router-certs
   ..
   38  
   39  +
   40: [subs="+quotes,+attributes"]
   41  ----
   42  $ oc create namespace che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ cp rootCA.crt ca.crt
   ..
   57  
   58  +
   59: [subs="+quotes,+attributes"]
   60  ----
   61  $ {prod-cli} server:start --platform=minishift --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_deploy-che-with-self-signed-tls-on-openhift4-using-operator.adoc:
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  $ oc login -u kubeadmin -p <password>
   ..
   20  
   21  +
   22: [subs="+quotes"]
   23  ----
   24  $ oc get secret router-ca -n openshift-ingress-operator -o jsonpath="{.data.tls\.crt}" | base64 -d > ca.crt
   ..
   29  
   30  +
   31: [subs="+quotes"]
   32  ----
   33  $ oc create namespace che
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ oc create secret generic self-signed-certificate --from-file=ca.crt -n=che
   ..
   47  
   48  +
   49: [subs="+quotes,+attributes"]
   50  ----
   51  $ {prod-cli} server:start --platform=crc --installer=operator --tls --self-signed-cert

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_developing-che-theia-plug-ins-using-che.adoc:
   13  +
   14  .Adding a workspace
   15: image::extensibility/adding-workspace.png[link="{imagesdir}/extensibility/adding-workspace.png"]
   16  
   17  . Select the *{prod-short} {prod-ver} Dev* stack, and click the btn:[CREATE & OPEN] button.
   18  +
   19  .Choosing the '{prod-short} {prod-ver} Dev' stack
   20: image::extensibility/choosing-che-7-dev-stack.png[link="{imagesdir}/extensibility/choosing-che-7-dev-stack.png"]
   21  
   22  . *Generate a plug-in scaffold.* The workspace created from this stack provides an easy way to scaffold a new plug-in. When the workspace is started and fully ready, execute the *Yeoman Wizard* from the command palette:
   ..
   25  +
   26  .Launching the Yeoman Wizard
   27: image::extensibility/launching-yeoman-wizard.png[link="{imagesdir}/extensibility/launching-yeoman-wizard.png"]
   28  +
   29  .. Fill in the following fields about the plug-in that you want to create: 
   ..
   36  +
   37  .Yeoman successfully generated a new plug-in
   38: image::extensibility/yeoman-successful.png[link="{imagesdir}/extensibility/yeoman-successful.png"]
   39  
   40  . Open the *Files* panel, to see the sources of the generated plug-in in the `src` directory.
   ..
   45  +
   46  .Opening a new terminal in the development container
   47: image::extensibility/open-terminal-in-container.png[link="{imagesdir}/extensibility/open-terminal-in-container.png"]
   48  +
   49  .. In the terminal, go to the plug-in directory, and run the `yarn` command:
   ..
   55  +
   56  .Building a Che-Theia plug-in using `yarn`
   57: image::extensibility/building-plug-in-using-yarn.png[link="{imagesdir}/extensibility/building-plug-in-using-yarn.png"]
   58  +
   59  NOTE: The plug-in generator automatically builds the plug-in after its generation.
   ..
   67  +
   68  .Running a Che-Theia plug-in in Hosted mode
   69: image::extensibility/running-plug-in-hosted-mode.gif[link="{imagesdir}/extensibility/running-plug-in-hosted-mode.gif"]
   70  
   71  . *Debug the plug-in.*
   ..
   78  +
   79  .Debugging a Che-Theia plug-in
   80: image::extensibility/debugging-plug-ins.gif[link="{imagesdir}/extensibility/debugging-plug-ins.gif"]
   81  +
   82  NOTE: When developing a frontend plug-in, debug it using your browser’s Developer Tools option.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_generating-self-signed-certificates.adoc:
   11  
   12  +
   13: [subs="+quotes"]
   14  ----
   15  # default for minishift
   ..
   26  
   27  +
   28: [subs="+quotes"]
   29  ----
   30  # Fedora 31
   ..
   38  
   39  +
   40: [subs="+quotes"]
   41  ----
   42  $ CA_CN=eclipse-che-signer
   ..
   46  
   47  +
   48: [subs="+quotes"]
   49  ----
   50  # Example with minikube on Fedora 31
   ..
   62  
   63  +
   64: [subs="+quotes"]
   65  ----
   66  $ openssl genrsa -out rootCA.key 4096
   ..
   71  
   72  +
   73: [subs="+quotes"]
   74  ----
   75  $ openssl req -x509 \
   ..
   91  
   92  +
   93: [subs="+quotes"]
   94  ----
   95  $ openssl genrsa -out domain.key 2048
   ..
   99  
  100  +
  101: [subs="+quotes"]
  102  ----
  103  $ openssl req -new -sha256 \
  ...
  114  
  115  +
  116: [subs="+quotes"]
  117  ----
  118  $ openssl x509 \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_sharing-your-che-theia-plug-in-with-a-factory.adoc:
   28  . Add the plug-in to the `workspace.attributes.plugins` field.
   29  +
   30: image::extensibility/sharing-plug-in-with-factory.png[link="{imagesdir}/extensibility/sharing-plug-in-with-factory.png"]
   31  
   32  . Share the factory link.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\proc_testing-che-theia-with-custom-branding.adoc:
   18  . Create a workspace using the sample https://github.com/che-samples/che-theia-branding-example/blob/master/devfile.yaml[che-theia-branding-example devfile] to apply the changes:
   19  +
   20: image::https://che.openshift.io/factory/resources/factory-contribute.svg[link="https://che.openshift.io/f?url=https://raw.githubusercontent.com/che-samples/che-theia-branding-example/master/devfile.yaml"]
   21  +
   22: [source,yaml,attrs="nowrap"]
   23  ----
   24  metadata:
   ..
   41  * The dark theme of Che-Theia:
   42  +
   43: image::branding/welcome-dark.png[link="{imagesdir}/branding/welcome-dark.png"]
   44  +
   45: image::branding/about-dark.png[link="{imagesdir}/branding/about-dark.png"]
   46  
   47  * The light theme of Che-Theia:
   48  +
   49: image::branding/welcome-light.png[link="{imagesdir}/branding/welcome-light.png"]
   50  +
   51: image::branding/about-light.png[link="{imagesdir}/branding/about-light.png"]
   52  
   53  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\contributor-guide\ref_che-theia-plug-in-api.adoc:
   15  The Che-Theia plug-in API consists of two namespaces:
   16  
   17: [options="header"]
   18  |===
   19  | Namespace | Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-ide-basics.adoc:
   12  :parent-context-of-che-theia-ide-basics: {context}
   13  
   14: [id="che-theia-ide-basics"]
   15  = Che-Theia IDE basics
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_che-theia-troubleshooting.adoc:
   11  :parent-context-of-che-theia-troubleshooting: {context}
   12  
   13: [id="che-theia-troubleshooting"]
   14  = Che-Theia Troubleshooting
   15  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-github-oauth.adoc:
   27  image::git/github_oauth.png[]
   28  
   29: ifeval::["{project-context}" == "che"]
   30  . On OpenShift or Kubernetes, update the deployment configuration (see link:{site-baseurl}che-7/openshift-config.html[OpenShift configuration]).
   31  +
   ..
   43  * Substitute `_<your-github-client-id>_` and `_<your-github-secret>_` with your GitHub client ID and secret.
   44  
   45: ifeval::["{project-context}" == "che"]
   46  * This configuration only applies to single-user deployments of {prod-short}.
   47  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-oauth-authorization.adoc:
   12  :parent-context-of-configuring-oauth-authorization: {context}
   13  
   14: [id="configuring-oauth-authorization"]
   15  = Configuring OAuth authorization
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_configuring-openshift-oauth.adoc:
   18  . Register {prod-short} OAuth client in OpenShift (see link:https://docs.openshift.com/container-platform/4.3/authentication/configuring-internal-oauth.html#oauth-register-additional-client_configuring-internal-oauth[Register an OAuth client in OpenShift]).
   19  +
   20: [subs="+quotes,+attributes"]
   21  ----
   22  $ oc create -f <(echo '

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_converting-a-che-6-workspace-to-a-che-7-devfile.adoc:
   15  :parent-context-of-converting-a-che-6-workspace-to-a-che-7-devfile: {context}
   16  
   17: [id="converting-a-{prod-id-short}-{prod-prev-ver}-workspace-to-a-{prod-id-short}-{prod-ver}-devfile"]
   18  = Converting a {prod-short} {prod-prev-ver} workspace to a {prod-short} {prod-ver} devfile
   19  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_creating-and-configuring-a-new-che-7-workspace.adoc:
   13  :parent-context-of-creating-and-configuring-a-new-che-7-workspace: {context}
   14  
   15: [id="creating-and-configuring-a-new-{prod-id-short}-{prod-ver}-workspace"]
   16  = Creating and configuring a new {prod-short} {prod-ver} workspace
   17  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_customizing-developer-environments.adoc:
   12  :parent-context-of-customizing-developer-environments: {context}
   13  
   14: [id="customizing-developer-environments"]
   15  = Customizing developer environments
   16  
   ..
   28  
   29  .{prod-short} extensibility
   30: image::extensibility/extending-che.png[link="{imagesdir}/extensibility/extending-che.png"]
   31  
   32  Extending {prod} can be done entirely using {prod}. Since version 7, {prod} provides a self-hosting mode.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_defining-custom-commands-for-che-theia.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="defining-custom-commands-for-che-theia"]
   17  = Defining custom commands for Che-Theia
   18  
   ..
   46                  "options": {"cwd": "/projects/theia"},
   47                  "command": "yarn",
   48:                 "args": ["watch"]
   49                }
   50               ]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_importing-a-kubernetes-application-into-a-workspace.adoc:
   12  :parent-context-of-importing-a-kubernetes-application-into-a-workspace: {context}
   13  
   14: [id="importing-a-kubernetes-application-into-a-workspace"]
   15  = Importing a Kubernetes application into a workspace
   16  
   ..
   27  To run the application on a Kubernetes cluster:
   28  
   29: [subs="+attributes"]
   30  ----
   31  $ node=https://raw.githubusercontent.com/redhat-developer/devfile/master/samples/web-nodejs-with-db-sample/nodejs-app.yaml && \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_navigating-che-using-the-dashboard.adoc:
   18  The *Dashboard* is accessible on your cluster from a URL like `http://__<che-instance>__.__<IP-address>__.nip.io/dashboard/`.
   19  This section describes how to access this URL on
   20: ifeval::["{project-context}" == "che"]
   21  Minishift and
   22  endif::[]
   23  OpenShift.
   24  
   25: ifeval::["{project-context}" == "che"]
   26  include::proc_navigating-che-using-the-dashboard-on-minishift.adoc[leveloffset=+1]
   27  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_version-control.adoc:
   14  // che-theia-ide-basics
   15  
   16: [id="version-control"]
   17  = Version Control
   18  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\assembly_what-is-a-che-theia-plug-in.adoc:
   12  :parent-context-of-what-is-a-che-theia-plug-in: {context}
   13  
   14: [id="what-is-a-che-theia-plug-in"]
   15  = What is a Che-Theia plug-in
   16  
   ..
   31  == Features and benefits of Che-Theia plug-ins
   32  
   33: [options="header"]
   34  |===
   35  | *Features*            | *Description* | *Benefits*

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_che-theia-plug-in-lifecycle.adoc:
   14  
   15  .Che-Theia plug-in lifecycle
   16: image::extensibility/che-theia-plug-in-lifecycle.png[link="{imagesdir}/extensibility/che-theia-plug-in-lifecycle.png"]
   17  
   18  Before a {prod-short} workspace is launched, {prod-short} master starts containers for the workspace:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_factory-json-reference.adoc:
   36  The `factory.policies`, `factory.ide`, and `factory.creator` objects are unique to factories. They provide meta information to the automation engine that alter the presentation of the factory URL or the behavior of the provisioning.
   37  
   38: [id="mixins"]
   39  == Mixins
   40  
   ..
   52  * Learn more about other link:TODO: link to project API docs[mixins]
   53  
   54: [id="pull-request-mixin-attributes"]
   55  == Pull Request mixin attributes
   56  
   ..
   89  ----
   90  
   91: [id="policies"]
   92  == Policies
   93  
   ..
  108  <4> Create one workpace per click, user, or account.
  109  
  110: [id="factories_json_reference-limitations"]
  111  == Limitations
  112  
  113  You can use `since : EPOCHTIME`, `until : EPOCHTIME`, and `referer` as a way to prevent the factory from executing under certain conditions. `since` and `until` represent a valid time window that allows the factory to activate. The `referrer` checks the hostname of the acceptor and only allows the factory to execute if there is a match.
  114  
  115: [id="factories_json_reference-multiplicity"]
  116  == Multiplicity
  117  
  118  Using `create : perClick` causes every click of the factory URL to generate a new workspace, each with its own identifier, name, and resources. Using `create : perUser` causes only one workspace to be generated for each unique user that clicks on the factory URL. If the workspace has previously been generated, the existing workspace is reopened.
  119  
  120: [id="factories_json_reference-ide-customization"]
  121  == Customizing the IDE
  122  
  ...
  220  |===
  221  
  222: [id="action-open-file"]
  223  == Action: Open File
  224  
  ...
  236  ----
  237  
  238: [id="action-find-and-replace"]
  239  == Action: Find and Replace
  240  
  ...
  276  Use https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions.html[regular expressions] in `sed`, both in find-replace and file-file type patterns.
  277  
  278: [id="creator"]
  279  == Creator
  280  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\con_workspaces-overview.adoc:
   13  :page-liquid:
   14  
   15: [id="workspaces-overview"]
   16  = Workspaces overview
   17  
   ..
   28  
   29  IMPORTANT: By default, it is possible to run only one workspace at a time. 
   30: ifeval::["{project-context}" == "che"]
   31  To change the default value, see link:{site-baseurl}che-7/advanced-configuration-options/#limits-for-the-workspaces-of-an-user[Limits for the workspaces of a user].
   32  endif::[]
   33: ifeval::["{project-context}" == "crw"]
   34  To change the default value, see link:{prod-ig-url}[the {prod-ig}].
   35  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-projects-to-your-workspace.adoc:
   18  . Fill in the required details for the project type that you selected, and click the btn:[Add] button.
   19  +
   20: image::workspaces/projects-add-project.png[link="{imagesdir}/workspaces/projects-add-project.png"]
   21  
   22  . To add another project to the workspace, click the btn:[Add Project] button.
   ..
   24  . After configuring the project for the workspace, check the change in the devfile, which is the configuration file of the workspace, by opening the *Devfile* tab.
   25  +
   26: image::workspaces/devfile-tab-to-view.png[link="{imagesdir}/workspaces/devfile-tab-to-view.png"]
   27  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-che-plugins-panel.adoc:
   16  . In the search bar, click the *Menu* button and then click *Change Registry* to choose the registry from the list. If the required registry is not in the list, add it using the *Add Registry* menu option. The registry link should point to the `plugins` segment of the registry. For example: `https://my-registry.com/v3/plugins/index.json`.
   17  +
   18: image::extensibility/vs-code-extension-change-registry.png[link="{imagesdir}/extensibility/vs-code-extension-change-registry.png"]
   19  
   20  . Search for the required plug-in using the filter, and then click the btn:[Install] button.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_adding-the-vs-code-extension-using-the-workspace-configuration.adoc:
   18  . Locate the *components* section, and add a new entry with the following structure:
   19  +
   20: [source,yaml,subs="+quotes"]
   21  ----
   22   - type: chePlugin
   ..
   29  Alternatively, you can link to a `meta.yaml` file hosted on GitHub, via the reference field.
   30  +
   31: [source,yaml,subs="+quotes"]
   32  ----
   33   - type: chePlugin

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_changing-the-configuration-of-an-existing-workspace-from-the-user-dashboard.adoc:
   59  ====
   60  
   61: [id="configure-devfile"]
   62  [start=5]
   63  . From the *Devfile* tab, edit the workspace's YAML configuration. See link:{site-baseurl}che-7/making-a-workspace-portable-using-a-devfile/#devfile-reference_making-a-workspace-portable-using-a-devfile[Devfile reference].

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-the-workspace-and-adding-tooling.adoc:
   10  
   11  .{prod-short} {prod-ver} plug-ins that have replaced {prod-short} {prod-prev-ver} installers
   12: [options="header"]
   13  |===
   14  | {prod-short} {prod-prev-ver} installer | {prod-short} {prod-ver} plug-in
   ..
  114  .. Click the *Containers* tab (*Workspace* -> *Details* -> *Containers*).
  115  +
  116: image::workspaces/edit-the-container.png[link="{imagesdir}/workspaces/edit-the-container.png"]
  117  
  118  .. Copy the {prod-short} {prod-prev-ver} recipe, and paste it into the separate {prod-short} {prod-ver} component as a *referenceContent*.
  119  +
  120: image::workspaces/component_as_a_referenceContent.png[link="{imagesdir}/workspaces/component_as_a_referenceContent.png"]
  121  
  122  .. Set the type from the original {prod-short} {prod-prev-ver} configuration. The following is an example of the resulting file:
  ...
  147  +
  148  .Сhe 6 and Сhe 7 equivalence table
  149: [options="header"]
  150  |===
  151  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  191  
  192  .Сhe 6 and Сhe 7 equivalence table
  193: [options="header"]
  194  |===
  195  | {prod-short} {prod-prev-ver} workspace configuration | {prod-short} {prod-ver} workspace devfile
  ...
  233  . Save changes and start the new {prod-short} {prod-ver} workspace.
  234  +
  235: image::workspaces/save-and-start-the-new-che-workspace.png[link="{imagesdir}/workspaces/save-and-start-the-new-che-workspace.png"]
  236  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_configuring-workspace-exposure-strategies-using-the-helm-chart-and-the-operator.adoc:
   12  When deploying {prod-short} using the Helm chart, configure the workspace exposure strategy using the `global.serverStrategy` property. To do so, add the following option to the `helm install` or `helm upgrade` command:
   13  
   14: [subs="+quotes"]
   15  ----
   16  $ helm install --set global.serverStrategy=__<single-host>__
   ..
   19  or:
   20  
   21: [subs="+quotes"]
   22  ----
   23  $ helm upgrade --set global.serverStrategy=__<single-host>__
   ..
   36  * Create a new cluster by executing the `kubectl apply` command. For example:
   37  +
   38: [subs="+quotes"]
   39  ----
   40  $ kubectl apply -f _<my-cluster.yaml>_
   ..
   43  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
   44  +
   45: [subs="+quotes"]
   46  ----
   47  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/k8s/ingressStrategy", "value": "__single-host__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_converting-a-che-6-workspace-to-a-basic-che-7-devfile.adoc:
   68  .. By default, the example project is added to the workspace. To remove the default project, click the btn:[Remove] button:
   69  +
   70: image::workspaces/remove-default-project.png[link="{imagesdir}/workspaces/remove-default-project.png"]
   71  
   72  .. To import a custom project that was used in {prod-short} {prod-prev-ver} workspace, click the *Add or Import Project* and select *Git* or *GitHub* option:
   73  +
   74: image::workspaces/add-custom-project.png[link="{imagesdir}/workspaces/add-custom-project.png"]
   75  
   76  .. Various commands can be added to devfiles of imported projects, for example, `run`, `build`, and  `test`. The commands are then accessible from the IDE when a workspace is started. Custom commands and other devfile components can be added in the *Devfile* configuration.
   ..
   78  .. Click the btn:[Create & Proceed Editing] button.
   79  +
   80: image::workspaces/create-and-edit.png[link="{imagesdir}/workspaces/create-and-edit.png"]
   81  +
   82  Select the *Devfile* tab to update the configuration. Machine servers in {prod-short} {prod-prev-ver} workspaces can be specified as components endpoints in a Devfile and {prod-short} {prod-prev-ver} installers as components of type chePlugin. See the link:https://redhat-developer.github.io/devfile/devfile[Devfile specification] for the detailed information about the supported properties and attributes.
   83  +
   84: image::workspaces/update-devfile-configuration.png[link="{imagesdir}/workspaces/update-devfile-configuration.png"]
   85  .. Once the *Devfile* configuration is completed, click the btn:[Open] button to start a newly created {prod-short} {prod-ver} workspace.
   86  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-new-workspace-from-the-dashboard.adoc:
   17  . In the *SELECT STACK* list, select one of the default stacks.
   18  +
   19: image::workspaces/{project-context}-stack-list.png[link="{imagesdir}/workspaces/{project-context}-stack-list.png"]
   20  
   21  . Click the btn:[Create & Proceed Editing] button. The *Workspaces -> Configs* page is shown.
   22  +
   23: image::workspaces/workspaces-config-page.png[link="{imagesdir}/workspaces/workspaces-config-page.png"]
   24  
   25  . Change the workspace name and click the *Devfile* tab.
   26  +
   27: image::workspaces/workspace-devfile-tab.png[link="{imagesdir}/workspaces/workspace-devfile-tab.png"]
   28  
   29  . Delete all the *components* and *commands* in the devfile to get an empty devfile.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-by-importing-source-code-of-a-project.adoc:
   11  :page-liquid:
   12  
   13: [id="creating-a-workspace-by-importing-source-code-of-a-project"]
   14  = Creating a workspace by importing the source code of a project
   15  
   ..
   33  * xref:#importing-to-a-running-workspace-with-git-clone-in-a-terminal[Import to a running workspace using `git clone` in a terminal]
   34  
   35: [id="importing-from-the-dashboard-into-an-existing-workspace"]
   36  == Importing from the Dashboard into an existing workspace
   37  
   ..
   96  image::workspaces/configure-command.png[Configure tasks]
   97  
   98: [id="importing-to-a-running-workspace-using-the-git-clone-command"]
   99  == Importing to a running workspace using the *Git: Clone* command
  100  
  ...
  113  image::workspaces/git-clone-command-2.png[Configure git clone command]
  114  
  115: [id="importing-to-a-running-workspace-with-git-clone-in-a-terminal"]
  116  == Importing to a running workspace with `git clone` in a terminal
  117  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-a-feature-branch-of-a-git-repository.adoc:
   16  Use following URL format to open an experimental link:https://github.com/quarkusio/quarkus-quickstarts[quarkus-quickstarts] branch hosted on link:https://che.openshift.io[che.openshift.io].
   17  
   18: [subs="+quotes"]
   19  ----
   20  https://che.openshift.io/f?url=https://github.com/maxandersen/quarkus-quickstarts/tree/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-the-default-branch-of-a-git-repository.adoc:
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://github.com/eclipse/che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-from-with-a-publicly-accessible-standalone-devfile-using-http.adoc:
   14  
   15  .Example
   16: [subs="+quotes"]
   17  ----
   18  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_creating-a-workspace-using-chectl-and-a-local-devfile.adoc:
   17  . Run a workspace from a devfile using the `workspace:start` parameter with the `{prod-cli}` tool as follows:
   18  
   19: [subs="+attributes,+quotes"]
   20  ----
   21  $ {prod-cli} workspace:start --devfile=devfile.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_downloading-and-uploading-a-file-to-a-workspace-using-the-command-line-interface.adoc:
   17  * To download a local file named `downloadme.txt` from a workspace container to the current home directory of the user, use the following in the {prod-short} remote shell.
   18  +
   19: [subs="+quotes",options="+nowrap"]
   20  ----
   21  $ REMOTE_FILE_PATH=/projects/downloadme.txt
   ..
   28  * To upload a local file named `uploadme.txt` to a workspace container in the `/projects` directory:
   29  
   30: [subs="+quotes",options="+nowrap"]
   31  ----
   32  $ LOCAL_FILE_PATH=./uploadme.txt

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_generating-a-devfile-from-an-existing-kubernetes-application.adoc:
   18  . Use the `{prod-cli} devfile:generate` command to generate a devfile:
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ {prod-cli} devfile:generate
   ..
   27  The following example generates a devfile that includes the `NodeJS` component:
   28  +
   29: [subs="+attributes"]
   30  ----
   31  $ {prod-cli} devfile:generate --selector="app=nodejs"
   ..
   55  * To include support for a language, use the `--language` parameter:
   56  +
   57: [subs="+attributes"]
   58  ----
   59  $ {prod-cli} devfile:generate --selector="app=nodejs" --language="typescript"

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_including-a-kubernetes-application-in-a-workspace-devfile-definition.adoc:
   72  Use this devfile to create and start a workspace with the `{prod-cli}` command:
   73  
   74: [subs="+attributes,+quotes"]
   75  ----
   76  $ {prod-cli} worspace:start --devfile _<devfile-path>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_managing-git-configuration-identity.adoc:
   16  . Open *File > Settings > Open Preferences*:
   17  +
   18: image::git/git-config-identity.png[link="{imagesdir}/git/git-config-identity.png"]
   19  
   20  . In the opened window, navigate to the *Git* section, and find:

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_overriding-devfile-values-using-factory-parameters.adoc:
   24  Consider the following initial devfile:
   25  
   26: [subs="+quotes"]
   27  ----
   28  ---
   ..
   36  To add or override `generateName` value, the following factory URL can be used:
   37  
   38: [subs="+quotes"]
   39  ----
   40  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.metadata.generateName=myprefix
   ..
   43  The resulting workspace will have the following devfile model:
   44  
   45: [subs="+quotes"]
   46  ----
   47  ---
   ..
   59  Consider the following initial devfile:
   60  
   61: [subs="+quotes"]
   62  ----
   63  ---
   ..
   75  To add or override source `branch` value, the following factory URL can be used:
   76  
   77: [subs="+quotes"]
   78  ----
   79  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.projects.web-java-spring-petclinic.source.branch=1.0.x
   ..
   82  The resulting workspace will have the following devfile model:
   83  
   84: [subs="+quotes"]
   85  ----
   86  apiVersion: 1.0.0
   ..
  102  Consider the following initial devfile:
  103  
  104: [subs="+quotes"]
  105  ----
  106  ---
  ...
  116  To add or override `persistVolumes` attribute value, the following factory URL can be used:
  117  
  118: [subs="+quotes"]
  119  ----
  120  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.persistVolumes=true
  ...
  124  The resulting workspace will have the following devfile model:
  125  
  126: [subs="+quotes"]
  127  ----
  128  ---
  ...
  141  possible to use dot-separated names:
  142  
  143: [subs="+quotes"]
  144  ----
  145  https://che.openshift.io/f?url=https://gist.githubusercontent.com/themr0c/ef8e59a162748a8be07e900b6401e6a8/raw/8802c20743cde712bbc822521463359a60d1f7a9/devfile.yaml&override.attributes.dot.name.format.attribute=true
  ...
  149  The resulting workspace will have the following devfile model:
  150  
  151: [subs="+quotes"]
  152  ----
  153  ---

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\proc_remotely-accessing-workspaces-using-kubectl.adoc:
   13  * Verify the installation of `kubectl` using the `kubectl version` command:
   14  +
   15: [subs="+quotes",options="+nowrap"]
   16  ----
   17  $ kubectl version
   ..
   29  . To find the name of the Kubernetes namespace and pod that runs the {prod-short} workspace:
   30  +
   31: [subs="+quotes",options="+nowrap"]
   32  ----
   33  $ kubectl get pod -l che.workspace_id --all-namespaces
   ..
   40  . To find the name of the container:
   41  +
   42: [subs="+quotes",options="+nowrap"]
   43  ----
   44  $ NAMESPACE=che
   ..
   51  . When you have the namespace, pod name, and the name of the container, use the `kubectl` command to open a remote shell:
   52  +
   53: [literal,subs="+quotes",options="nowrap"]
   54  --
   55  $ NAMESPACE=che
   ..
   62  . From the container, execute the `build` and `run` commands (as if from the {prod-short} workspace terminal):
   63  +
   64: [subs="+quotes",options="+nowrap"]
   65  ----
   66  user@workspace7b2wemdf3hx7s3ln $ mvn clean install

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_che-theia-plug-in-metadata.adoc:
   96  
   97  .Example `meta.yaml` for a Che-Theia plug-in: the {prod-short} machine-exec Service
   98: [source,yaml,subs="+quotes,+attributes"]
   99  ----
  100  apiVersion: v2

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\end-user-guide\ref_objects-supported-in-eclipse-che.adoc:
    4  The following table lists the objects that are partially supported in {prod} {prod-ver}:
    5  
    6: [cols="1,1,1,1,5", options="header"]
    7  |===
    8  |Object 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\extensions\proc_connecting-source-code-from-guthub-to-a-openshift-component-using-openshift-connector.adoc:
   32  For additional information about cloning Git repository, see:
   33  
   34: ifeval::["{project-context}" == "che"]
   35  link:https://www.eclipse.org/che/docs/che-7/version-control/#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   36  endif::[]
   37  
   38: ifeval::["{project-context}" == "crw"]
   39  link:https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html-single/end-user_guide/index#accessing-a-git-repository-via-https_version-control[Accessing a Git repository via HTTPS]
   40  endif::[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_installing-che-in-restricted-environment.adoc:
   65  . Build the plug-in registry image:
   66  +
   67: [subs="+quotes"]
   68  ----
   69  ./build.sh --organization _<my-org>_ \
   ..
   96  . Build the devfile registry image:
   97  +
   98: [subs="+quotes"]
   99  ----
  100  ./build.sh --organization _<my-org>_ \
  ...
  155  To get a list of images required for plug-ins, display this file:
  156  
  157: [subs="+quotes"]
  158  ----
  159  $ docker run -it --rm \
  ...
  170  An offline devfile registry (see xref:building-offline-devfile-registry_{context}[]) contains a file with the list of all images referenced in its devfiles:
  171  
  172: [subs="+quotes"]
  173  ----
  174  $ docker run -it --rm \
  ...
  210  The `CheCluster` Custom Resource, which is managed by the {prod-short} Operator, includes fields to facilitate deploying an instance of {prod-short} in a restricted environment:
  211  
  212: [source,yaml,subs="+quotes"]
  213  ----
  214  # [...]
  ...
  222  Setting these values uses `<my-internal-registry>` and `<my-organization>` for all images. This means that the Operator expects the offline plug-in and devfile registries to be available at:
  223  
  224: [subs="+quotes"]
  225  ----
  226  __<my-internal-registry>__/__<my-organization>__/che-plug-in-registry:__<ver>__

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\assembly_upgrading-che.adoc:
   62  When making changes to the `checluster` custom resource, use patching to make updates to it. For example:
   63  
   64: ifeval::["{project-context}" == "che"]
   65  On Kubernetes, run:
   66  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\con_che-configmaps-and-their-behavior.adoc:
   23  For example, to overrride the default memory limit for workspaces, add the `CHE_WORKSPACE_DEFAULT\__MEMORY__LIMIT__MB` property to `customCheProperties`:
   24  
   25: [subs="+attributes"]
   26  [source,yaml]
   27  ----
   ..
   46  Previous versions of the {prod-short} Operator had a configMap named `custom` to fulfill this role.  If the {prod-short} Operator finds a `configMap` with the name `custom`, it adds the data it contains into the `customCheProperties` field, redeploys {prod-short}, and deletes the `custom` `configMap`.
   47  
   48: ifeval::["{project-context}" == "che"]
   49  == {prod-short} installed using a Helm Chart
   50  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_adding-custom-certificates-to-trust-store.adoc:
    8  . Create a new *configMap* with the certificate(s):
    9  +
   10: [subs="+quotes"]
   11  ----
   12  $ kubectl create configmap <config-map name> --from-file=<certificate file path> -n=che
   ..
   21  . Set the `global.tls.serverTrustStoreConfigMapName` property to previously created config-map name. To do that, add the following option to the `helm upgrade` command:
   22  +
   23: [subs="+quotes"]
   24  ----
   25  $ helm upgrade che -n che --set global.tls.serverTrustStoreConfigMapName=<config-map name> --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_configuring-namespace-strategies.adoc:
   20  To assign namespace names composed of a `che-ws` prefix and workspace id, set:
   21  
   22: [subs="+quotes"]
   23  ----
   24  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<workspaceid>__
   ..
   36  To have all workspaces created in `che-workspaces` namespace, set:
   37  
   38: [subs="+quotes"]
   39  ----
   40  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-workspaces
   ..
   54  To assign namespace names composed of a `che-ws` prefix and individual usernames (`che-ws-user1`, `che-ws-user2`), set:
   55  
   56: [subs="+quotes"]
   57  ----
   58  CHE_INFRA_KUBERNETES_NAMESPACE_DEFAULT=che-ws-__<username>__
   ..
   79  disabled by default. To allow user-defined workspace namespaces, set:
   80  
   81: [subs="+quotes"]
   82  ----
   83  CHE_INFRA_KUBERNETES_NAMESPACE_ALLOW__USER__DEFINED=true

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_deploying-che-with-support-for-git-repositories-with-self-signed-certificates.adoc:
   15  . Create a new *configMap* with details about the Git server:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ kubectl create configmap che-git-self-signed-cert --from-file=ca.crt \
   ..
   34  . Update the `global.useGitSelfSignedCerts` property. To do that, add the following option to the `helm upgrade` command:
   35  +
   36: [subs="+quotes"]
   37  ----
   38  $ helm upgrade che -n che --set global.useGitSelfSignedCerts=true --set global.ingressDomain=__<kubernetes-cluster-domain>__ .

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-chectl-installation.adoc:
   10  * For {prod-short} installed using the `{prod-cli} server:start` command and the `-n` argument (custom namespace specified), use the `-n` argument also to uninstall the {prod-short} instance.
   11  
   12: ifeval::["{project-context}" == "che"]
   13  * For installations that did not use the `-n` argument, the created namespace is named `{prod-id-short}` by default.
   14  endif::[]
   15  
   16: ifeval::["{project-context}" == "crw"]
   17  * For installations that did not use the `-n` argument, the created namespace is named `workspaces` by default.
   18  endif::[]
   ..
   29  . Stop the {prod} Server:
   30  +
   31: [subs="+quotes,attributes"]
   32  ----
   33  $ {prod-cli} server:stop
   ..
   42  . Remove {prod-short} from the cluster:
   43  +
   44: [subs="+quotes,attributes"]
   45  ----
   46  $ {prod-cli} server:delete -n _<namespace>_

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_uninstalling-che-after-operatorhub-installation.adoc:
   26  . In the row that displays information about the specific {prod-short} cluster, delete the {prod-short} Cluster deployment using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   27  //+
   28: //image::uninstall/che-delete-che-cluster.png[link="{imagesdir}/uninstall/che-delete-che-cluster.png"]
   29  . Alternatively, delete the {prod-short} deployment by clicking the displayed {prod} Cluster, `{prod-id}`, and select the *Delete cluster* option in the *Actions* drop-down menu on the top right.
   30  
   ..
   35  . In the row that displays information about the specific {prod} Operator, uninstall the {prod-short} Operator using the drop-down menu illustrated as three horizontal dots (icon:fa-ellipsis-v[]) situated on the right side of the screen.
   36  //+
   37: //image::uninstall/che-uninstall-operator.png[link="{imagesdir}/uninstall/che-uninstall-operator.png"]
   38  . Accept the selected option, *Also completely remove the Operator from the selected namespace*.
   39  . Alternatively, uninstall the {prod} Operator by clicking the displayed {prod} Operator, `{prod}`, followed by selecting the *Uninstall Operator* option in the *Actions* drop-down menu on the top right.
   ..
   57  . Sign in to the cluster:
   58  +
   59: [subs="+quotes"]
   60  ----
   61  $ oc login -u _<username>_ -p _<password>_ _<cluster_URL>_
   ..
   64  . Switch to the project where the {prod-short} instance is deployed:
   65  +
   66: [subs="+quotes,attributes"]
   67  ----
   68  $ oc project _<{prod-id-short}_project>_
   ..
   71  . Obtain the {prod-short} cluster name. The following shows a cluster named `{prod-id}`:
   72  +
   73: [subs="+quotes,attributes"]
   74  ----
   75  $ oc get {prod-id-short}cluster
   ..
   80  . Delete the {prod-short} cluster:
   81  +
   82: [subs="+quotes,attributes"]
   83  ----
   84  $ oc delete {prod-id-short}cluster {prod-id}
   ..
   88  . Obtain the name of the {prod-short} cluster service version (CSV) module. The following detects a CSV module named `{prod-id}.v{prod-ver}`:
   89  +
   90: [subs="+quotes,attributes"]
   91  ----
   92  $ oc get csv
   ..
   97  . Delete the {prod-short} CSV:
   98  +
   99: [subs="+quotes,attributes"]
  100  ----
  101  $ oc delete csv {prod-id}.v{prod-ver}

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-3-using-the-cli-management-tool.adoc:
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\proc_upgrading-che-on-openshift-4-using-the-cli-management-tool.adoc:
   19  . Run the following command:
   20  +
   21: [subs="+attributes,+quotes"]
   22  ----
   23  $ {prod-cli} server:update

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\installation-guide\ref_che-configmaps-fields-reference.adoc:
    9  == `server` settings related to the {prod-short} server
   10  
   11: [cols="1,1,3", options="header"]
   12  :===
   13  Property: Default value: Description
   ..
   49  == `database` configuration settings related to the database used by {prod-short}
   50  
   51: [cols="1,1,3", options="header"]
   52  :===
   53  Property: Default value: Description
   ..
   65  == `auth` configuration settings related to authentication used by {prod-short} installation
   66  
   67: [cols="1,1,3", options="header"]
   68  :===
   69  Property: Default value: Description
   ..
   87  
   88  
   89: [cols="1,1,3", options="header"]
   90  :===
   91  Property: Default value: Description
   ..
  102  == `k8s` configuration settings specific to {prod-short} installations on Kubernetes
  103  
  104: [cols="1,1,3", options="header"]
  105  :===
  106  Property: Default value: Description
  ...
  116  == `installation` defines the observed state of {prod-short} installation
  117  
  118: [cols="1,3", options="header"]
  119  :===
  120  Property: Description
  ...
  136  == Limits for workspaces
  137  
  138: [cols="1,1,3", options="header"]
  139  :===
  140  Property: Default value: Description
  ...
  146  == Limits for the workspaces of an user
  147  
  148: [cols="1,1,3", options="header"]
  149  :===
  150  Property: Default value: Description
  ...
  158  
  159  
  160: [cols="1,1,3", options="header"]
  161  :===
  162  Property: Default value: Description

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\assembly_che-architecture.adoc:
   12  :parent-context-of-che-architectural-elements: {context}
   13  
   14: [id="{prod-id-short}-architectural-elements"]
   15  = {prod-short} architectural elements
   16  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\con_persistent-volume-configuration.adoc:
   91  When deploying {prod-short} using the Helm chart, configure the workspace PVC strategy by setting values for `global.pvcStrategy`. To do so, add the following option to the `helm install` or `helm upgrade` command:
   92  
   93: [subs="+quotes"]
   94  ----
   95  $ helm install --set global.pvcStrategy=__<common>__
   ..
   98  or:
   99  
  100: [subs="+quotes"]
  101  ----
  102  $ helm upgrade --set global.pvcStrategy=__<common>__
  ...
  120  * Create a new cluster by executing the `kubectl apply` command. For example:
  121  +
  122: [subs="+quotes"]
  123  ----
  124  $ kubectl apply -f _<my-cluster.yaml>_
  ...
  127  * Update the YAML file properties of an already running cluster by executing the `kubectl patch` command. For example:
  128  +
  129: [subs="+quotes"]
  130  ----
  131  $ kubectl patch checluster eclipse-che --type=json -p '[{"op": "replace", "path": "/spec/storage/pvcStrategy", "value": "__common__"}]'

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_accessing-che-from-red-hat-applications-menu.adoc:
   16  A drop-down menu with installed applications is displayed.
   17  +
   18: image::installation/{project-context}-red-hat-application-menu-che-odp.png[link="{imagesdir}/installation/{project-context}-red-hat-application-menu-che-odp.png"]
   19  
   20  . Click the *{prod-short}* link. This creates a new workspace or redirects to an existing one. For source links pointing to publicly accessible GitHub repositories that contain a `devfile.yaml` file, this file is be used to configure the workspace. Otherwise, a default workspace is created.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_configuring-dns-on-azure.adoc:
    8  . In the Azure web console, navigate to *Home* -> *DNS zones*.
    9  +
   10: image::installation/dns-zone-in-microsoft-azure.png[link="{imagesdir}/installation/dns-zone-in-microsoft-azure.png"]
   11  
   12  . Create a new zone.
   ..
   14  .. In the *Resource group* drop-down list, click *eclipseCheResourceGroup*.
   15  +
   16: image::installation/selecting-the-resource-group.png[link="{imagesdir}/installation/selecting-the-resource-group.png"]
   17  
   18  .. In the *Instance details* section, in the *Name* field, type the name of the domain (*azr.my-ide.cloud*, in this case).
   ..
   20  .. Click the btn:[Review + create] button.
   21  +
   22: image::installation/entering-the-name-fo-the-domain.png[link="{imagesdir}/installation/entering-the-name-fo-the-domain.png"]
   23  
   24  . Click the btn:[Create] button.
   25  +
   26: image::installation/completing-the-creation-of-the-zone.png[link="{imagesdir}/installation/completing-the-creation-of-the-zone.png"]
   27  +
   28  The created zone and the list of name servers (NS) are displayed in the *DNS Zones* section.
   29  +
   30: image::installation/list-of-created-zones-and-NS.png[link="{imagesdir}/installation/list-of-created-zones-and-NS.png"]
   31  +
   32  These servers must be configured with the registrar of the domain.
   ..
   40  .. In the *IP Address* field, select the external IP of Ingress-nginx controller that the user had obtained in the xref:installing-ingress-on-azure[] section (*40.89.129.194*, in this case).
   41  +
   42: image::installation/adding-a-record-set.png[link="{imagesdir}/installation/adding-a-record-set.png"]
   43  +
   44  The following is an example of an added DNS zone:
   45  +
   46: image::installation/example-of-an-added-dns-zone.png[link="{imagesdir}/installation/example-of-an-added-dns-zone.png"]
   47  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_editing-the-code-of-applications-running-in-openshift-container-platform-using-che.adoc:
   21  The deployments are displayed as graphical circles surrounded by circular buttons. One of these buttons is *Edit Source Code*.
   22  +
   23: image::installation/edit-source-code-button-che-odp.png[link="{imagesdir}/installation/edit-source-code-button-che-odp.png"]
   24  
   25  . To edit the code of an application using {prod-short}, click the *Edit Source Code* button. This redirects to a workspace with the cloned source code of the application component.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_enabling-ssl-on-openshift-4.adoc:
   28  . Click *Confirm change*.
   29  +
   30: image::installation/tls-mode-true.png[link="{imagesdir}/installation/tls-mode-true.png"]
   31  
   32  . Navigate to the *Resources* tab.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager-on-kubernetes.adoc:
   76  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   77  +
   78: image::installation/dns-challenge-gcp.png[link="{imagesdir}/installation/dns-challenge-gcp.png"]
   79  
   80  . The cert-manager logs should contain information about the DNS challenge. To get the logs (here, `cert-manager-8d478bb45-2924h` is the name of the cert-manager pod):

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-cert-manager.adoc:
   91  . Check that the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is added to the DNS zone for _Let’s Encrypt_.
   92  +
   93: image::installation/new-dns-challenge-added.png[link="{imagesdir}/installation/new-dns-challenge-added.png"]
   94  +
   95  The cert-manager logs should contain information about the DNS challenge.

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-azure-using-the-chectl-command.adoc:
   13  * To install {prod-short}, run the following `{prod-cli}` command:
   14  +
   15: [subs="+attributes"]
   16  ----
   17  $ {prod-cli} server:start --installer=helm --platform=k8s --tls \
   ..
   51  Keycloak and {prod-short} now have valid wildcard certificates.
   52  
   53: image::installation/wildcard-certificates-for-keycloak-che.png[link="{imagesdir}/installation/wildcard-certificates-for-keycloak-che.png"]
   54  
   55  .{prod-short} user dashboard
   56: image::installation/che-user-dashboard.png[link="{imagesdir}/installation/che-user-dashboard.png"]
   57  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-codeready-containers-using-chectl.adoc:
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-google-cloud-platform-using-chectl.adoc:
   12  To install {prod-short} on Google Cloud Platform, run the following `{prod-cli}` command:
   13  +
   14: [subs="+attributes"]
   15  ----
   16  $ {prod-cli} server:start --installer=helm --platform=k8s --tls --domain=gcp.my-ide.cloud --multiuser
   ..
   48  
   49  .Keycloak and {prod-short} with valid wildcard certificates
   50: image::installation/keycloak-and-che-with-valid-wildcard-certs.gif[link="{imagesdir}/installation/keycloak-and-che-with-valid-wildcard-certs.gif"]
   51  
   52  .{prod-short} user dashboard
   53: image::installation/che-user-dashboard-gcp.png[link="{imagesdir}/installation/che-user-dashboard-gcp.png"]
   54  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kind-using-chectl.adoc:
   95  . Run `{prod-cli}`, using the external IP of the `ingress-nginx` Service, as an https://nip.io[nip.io] url.
   96  +
   97: [subs="+quotes,+attributes"]
   98  ----
   99  $ {prod-cli} server:start --installer operator --platform k8s --domain 172.17.250.1.nip.io

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-kubernetes-using-the-chectl-command.adoc:
   16  . Run the following command:
   17  +
   18: [subs="+quotes,+attributes",options="nowrap"]
   19  ----
   20  $ {prod-cli} server:start --platform=k8s --installer=helm --domain=aws.my-ide.cloud --multiuser --tls
   ..
   53  . The certificate generated by Let’s Encrypt is a valid certificate.
   54  +
   55: image::installation/certificate-generate-lets-encrypt.png[link="{imagesdir}/installation/certificate-generate-lets-encrypt.png"]
   56  +
   57: image::installation/eclipse-che-welcome-to-your-workspace.png[link="{imagesdir}/installation/eclipse-che-welcome-to-your-workspace.png"]
   58  
   59  // .Additional Resources

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minikube-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-minishift-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator-and-ssl.adoc:
   18  . Run the following command to create the {prod-short} instance:
   19  +
   20: [subs="+quotes,+attributes",options="nowrap"]
   21  ----
   22  $ {prod-cli} server:start -n _<project-name>_ --domain=<OPENSHIFT_APPS_URL> --tls 

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-on-openshift-3-using-the-operator.adoc:
   20  . Create a new project called *{prod-id-short}*:
   21  +
   22: [subs="+quotes,+attributes"]
   23  ----
   24  $ oc new-project {prod-id-short}
   ..
   27  . Run the following command to create the {prod-short} instance:
   28  +
   29: [subs="+quotes,+attributes",options="nowrap"]
   30  ----
   31  $ {prod-cli} server:start --platform=openshift --installer=operator \

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-storage-classes.adoc:
   23  * To provide storage class name for Postgres PVC, use the `{prod-cli}` `server:start` command with the `--postgres-pvc-storage-class-name` flag:
   24  +
   25: [subs="+quotes,+attributes"]
   26  ----
   27  $ {prod-cli} server:start -m -p minikube -a operator --postgres-pvc-storage-class-name=postgress-storage
   ..
   30  * To provide storage class name for {prod-short} workspaces, use the `server:start` command with the `--workspace-pvc-storage-class-name` flag:
   31  +
   32: [subs="+quotes,+attributes"]
   33  ----
   34  $ {prod-cli} server:start -m -p minikube -a operator --workspace-pvc-storage-class-name=workspace-storage
   ..
   70  . Start the {prod-id-short} server with your custom resources:
   71  +
   72: [subs="+quotes,+attributes"]
   73  ----
   74  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml
   ..
  124  
  125  . Bind the two Persisted Volumes:
  126: [subs="+quotes,+attributes"]
  127  ----
  128  $ kubectl apply -f che-workspace-pv.yaml -f che-postgres-pv.yaml
  ...
  176  . Start the {prod-id-short} server with your custom resources:
  177  +
  178: [subs="+quotes,+attributes"]
  179  ----
  180  $ {prod-cli} server:start -m -p minikube -a operator --che-operator-cr-yaml=/path/to/custom/che/resource/org_v1_che_cr.yaml

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-che-using-the-che-operator-in-openshift-4-web-console.adoc:
   32  . The `eclipse-che` cluster is created.
   33  +
   34: image::installation/eclipse-che-cluster-create-che-cluster.png[link="{imagesdir}/installation/eclipse-che-cluster-create-che-cluster.png"]
   35  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-dns-on-google-cloud-platform.adoc:
    6  . Using the Cloud DNS, create a zone called *eclipse-che* and, for example, a DNS name *gcp.my-ide.cloud*. Click the btn:[Create] button.
    7  +
    8: image::installation/creating-dns-zone-on-gcp.png[link="{imagesdir}/installation/creating-dns-zone-on-gcp.png"]
    9  +
   10  The Cloud DNS zone is created.
   11  +
   12: image::installation/cloud-dns-zone-on-gcp.png[link="{imagesdir}/installation/cloud-dns-zone-on-gcp.png"]
   13  
   14  . Click the *Registrar Setup* link in the top-right corner of the window. The name servers (NS) to be added to the registrar are displayed.
   15  +
   16: image::installation/registrar-setup-gcp.png[link="{imagesdir}/installation/registrar-setup-gcp.png"]
   17  
   18  . Update the DNS zone (example: `ovh` domain).
   19  . Add the `*.gcp.my-ide.cloud` entry to the external Ingress IP on the cloud DNS.
   20  +
   21: image::installation/dns-settings-gcp.png[link="{imagesdir}/installation/dns-settings-gcp.png"]
   22  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-codeready-containers-using-chectl.adoc:
   16  * Run the following command:
   17  +
   18: [subs="+attributes"]
   19  ----
   20  $ {prod-cli} server:start --platform crc --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minikube-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minikube --multiuser

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-multi-user-che-on-minishift-using-chectl.adoc:
   15  * Run the following command:
   16  +
   17: [subs="+attributes"]
   18  ----
   19  $ {prod-cli} server:start --platform minishift

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-linux-or-macos.adoc:
   18  . Run the following command in the terminal (this downloads and executes the `install.sh` script):
   19  +
   20: [subs="+attributes"]
   21  ----
   22  $ bash <(curl -sL  https://www.eclipse.org/che/{prod-cli}/)
   ..
   25  . Run the following command to verify that the `{prod-cli}` binary used is `/usr/local/bin/{prod-cli}`:
   26  +
   27: [subs="+attributes"]
   28  ----
   29  $ which {prod-cli}
   ..
   34  . Run the following command to verify that the version of {prod-cli} that is the expected one.
   35  +
   36: [subs="+attributes"]
   37  ----
   38  $ {prod-cli} --version
   ..
   46  . Read the installation logs.
   47  +
   48: [subs="+attributes"]
   49  ----
   50  $ cat {prod-cli}-install.log

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_installing-the-chectl-management-tool-on-windows.adoc:
    9  * Run the following command in the PowerShell terminal:
   10  +
   11: [subs="+attributes"]
   12  ----
   13  C:\Users> Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://www.eclipse.org/che/{prod-cli}/win/'))

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-openshift-3-for-installing-che.adoc:
   15  . Log in to OpenShift. See link:https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html#basic-setup-and-login[Basic Setup and Login].
   16  +
   17: [subs="+attributes,+quotes",options="nowrap"]
   18  ----
   19  $ oc login
   ..
   22  . Run the following command to verify that the version of the `oc` OpenShift CLI management tool is 3.11:
   23  +
   24: [subs="+attributes,+quotes",options="nowrap"]
   25  ----
   26  $ oc version
   ..
   30  . Run the following commands to create a dummy project to find the URL that this OpenShift instance is using to deploy applications.
   31  +
   32: [subs="+attributes,+quotes",options="nowrap"]
   33  ----
   34  $ oc new-project hello-world
   ..
   44  . Remove the dummy project:
   45  +
   46: [subs="+attributes,+quotes",options="nowrap"]
   47  ----
   48  $ oc delete project hello-world

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_preparing-the-aws-system-for-installing-che.adoc:
   35  . Create the zone on AWS:
   36  +
   37: [subs="+quotes",options="nowrap"]
   38  ----
   39  $ aws route53 create-hosted-zone --name aws.my-ide.cloud --caller-reference 1
   ..
   97  . After the cluster is ready, validate it:
   98  +
   99: [subs="+quotes",options="nowrap"]
  100  ----
  101  $ kops validate cluster
  ...
  121  . Check the cluster using the `kubectl` command. The `kubectl` context is also configured automatically by the kops tool:
  122  +
  123: [subs="+quotes",options="nowrap"]
  124  ----
  125  $ kubectl config current-context
  ...
  138  . Install the default configuration.
  139  +
  140: [subs="+quotes",options="nowrap"]
  141  ----
  142  $ kubectl apply \
  ...
  146  . Install the configuration for AWS.
  147  +
  148: [subs="+quotes",options="nowrap"]
  149  ----
  150  $ kubectl apply \
  ...
  156  The following output confirms that the Ingress controller is running.
  157  +
  158: [subs="+quotes",options="nowrap"]
  159  ----
  160  $ kubectl get pods --namespace ingress-nginx
  ...
  165  . Find the external IP of ingress-nginx.
  166  +
  167: [subs="+quotes",options="nowrap"]
  168  ----
  169  $ kubectl get services --namespace ingress-nginx -o jsonpath='{.items[].status.loadBalancer.ingress[0].hostname}'
  ...
  179  Output similar to the following means a needed role must be created manually:
  180  +
  181: [subs="+quotes",options="nowrap"]
  182  ----
  183  arn:aws:sts::269287474311:assumed-role...4bff is not authorized to perform: iam:CreateServiceLinkedRole on resource: arn:aws:iam::269287474311:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing
  ...
  186  Run the following command to create the role:
  187  +
  188: [subs="+quotes",options="nowrap"]
  189  ----
  190  $ aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"
  ...
  194  . Create the wildcard DNS `*` (for `*.aws-my-ide.cloud`) with the previous hostname and ensure to add the dot (`.`) at the end of the hostname. In the *Type* drop-down list, select *CNAME*.
  195  +
  196: image::installation/create-record-set.png[link="{imagesdir}/installation/create-record-set.png"]
  197  +
  198  The following is an example of the resulting window after adding all the values.
  199  +
  200: image::installation/create-record-set-all-values.png[link="{imagesdir}/installation/create-record-set-all-values.png"]
  201  +
  202  The `che.aws.my-ide.cloud` address must resolve to an IP address.
  203  +
  204: [subs="+quotes",options="nowrap"]
  205  ----
  206  $ host che.aws.my-ide.cloud
  ...
  219  . Use the following command to obtain the zone ID:
  220  +
  221: [subs="+quotes",options="nowrap"]
  222  ----
  223  $ aws route53 list-hosted-zones
  ...
  239  . Copy the following content and replace `INSERT_ZONE_ID` with the route53 zone ID:
  240  +
  241: [subs="+quotes",options="nowrap"]
  242  ----
  243  {
  ...
  269  . In the *EC2 Dashboard*, identify the *IAM role* used by the master node.
  270  +
  271: image::installation/aws-lauch-instance.png[link="{imagesdir}/installation/aws-lauch-instance.png"]
  272  +
  273  It is located under the *Description* tab, in the *IAM role* field.
  274  +
  275: image::installation/describtion-tab-iam-role.png[link="{imagesdir}/installation/describtion-tab-iam-role.png"]
  276  
  277  . Click the *IAM role* link (`masters.eu.aws.my-ide.cloud`, in this case).
  278  . Click the *Add inline policy* link at the bottom of the window.
  279  +
  280: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  281  
  282  . In the *Create policy* window, on the *JSON* tab, paste the content of the JSON file created earlier and click the *Review policy* button.
  283  +
  284: image::installation/aws-create-policy.png[link="{imagesdir}/installation/aws-create-policy.png"]
  285  
  286  . In the *Name* field, type `eclipse-che-route53` and click *Create Policy*.
  287  +
  288: image::installation/create-policy-review-policy.png[link="{imagesdir}/installation/create-policy-review-policy.png"]
  289  
  290  
  ...
  293  . To install cert-manager, run the following commands (for details, see link:https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html[Installing Cert on Kubernetes]):
  294  +
  295: [subs="+quotes",options="nowrap"]
  296  ----
  297  $ kubectl create namespace cert-manager
  ...
  303  . Set `validate=false`. If set to `true`, it will only work with the latest Kubernetes:
  304  +
  305: [subs="+quotes",options="nowrap"]
  306  ----
  307  $ kubectl apply \
  ...
  312  . Create the {prod-short} namespace if it does not already exist:
  313  +
  314: [subs="+quotes",options="nowrap"]
  315  ----
  316  $ kubectl create namespace che
  ...
  320  . Create the *cert-manager* user:
  321  +
  322: [subs="+quotes",options="nowrap"]
  323  ----
  324  $ aws iam create-user --user-name cert-manager
  ...
  336  . Create the access key:
  337  +
  338: [subs="+quotes",options="nowrap"]
  339  ----
  340  $ aws iam create-access-key --user-name cert-manager
  ...
  354  . Create a secret from the `SecretAccessKey` content.
  355  +
  356: [subs="+quotes",options="nowrap"]
  357  ----
  358  $ kubectl create secret generic aws-cert-manager-access-key \
  ...
  362  . Use the *Add inline policy* link to add the inline policy to link:https://console.aws.amazon.com/iam/home#/users/cert-manager[AWS Cert-Manager].
  363  +
  364: image::installation/aws-summary-iam-role.png[link="{imagesdir}/installation/aws-summary-iam-role.png"]
  365  
  366  . Paste the following inline policy in the *JSON* tab:
  367  +
  368: [subs="+quotes",options="nowrap"]
  369  ----
  370  {
  ...
  391  
  392  +
  393: image::installation/json-review-policy.png[link="{imagesdir}/installation/json-review-policy.png"]
  394  
  395  . Click *Review policy*.
  396  +
  397: image::installation/create-policy-review.png[link="{imagesdir}/installation/create-policy-review.png"]
  398  
  399  . In the *Name* field, type `route53`, and click *Create policy*.
  ...
  451  . Check if the `issuerRef` name is the same as the `ClusterIssuer`. A new DNS challenge is being added to the DNS zone for _Let’s encrypt_.
  452  +
  453: image::installation/aws-hosted-zones-dns.png[link="{imagesdir}/installation/aws-hosted-zones-dns.png"]
  454  +
  455  The cert-manager logs should contain information about the DNS challenge.
  ...
  457  . Obtain the name of the pods:
  458  +
  459: [subs="+quotes",options="nowrap"]
  460  ----
  461  $ kubectl get pods --namespace cert-manager
  ...
  469  . Obtain the logs using the following command (here, `cert-manager-8d478bb45-sdfmz` is the name of the cert-manager pod):
  470  +
  471: [subs="+quotes",options="nowrap"]
  472  ----
  473  $ kubectl logs -f cert-manager-8d478bb45-sdfmz -n cert-manager
  ...
  484  . Ensure that the certificate is ready:
  485  +
  486: [subs="+quotes",options="nowrap"]
  487  ----
  488  $ kubectl describe certificate/che-tls -n che
  ...
  502  . Wait for the status to become `OK` and ensure that the log contains the following entry:
  503  +
  504: [subs="+quotes",options="nowrap"]
  505  ----
  506  I0729 13:56:26.140886       1 conditions.go:143] Found status change for Certificate "che-tls" condition "Ready": "False" -> "True"; setting lastTransitionTime to 2019-07-29 13:56:26.140866531 +0000 UTC m=+4557.134131468
  ...
  509  . Ensure that the status is up-to-date using the following command:
  510  +
  511: [subs="+quotes",options="nowrap"]
  512  ----
  513  $ kubectl describe certificate/che-tls -n che

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_upgrading-the-chectl-management-tool.adoc:
   16  * Run the following command in the terminal to update `{prod-cli}` to the latest version.
   17  +
   18: [subs="+attributes"]
   19  ----
   20  # {prod-cli} update
   ..
   34  To move to a different channel, invoke the update with the name of the channel as an optional argument.
   35  
   36: [subs="+attributes"]
   37  ----
   38  # {prod-cli} update [next|stable]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-in-openshift-4-web-console.adoc:
    9  
   10  * A {prod-short} is being deployed on this instance of OpenShift 4.
   11: ifeval::["{context}" == "installing-che-on-openshift-4-from-operatorhub"]
   12  See xref:installing-{prod-id-short}-using-the-{prod-id-short}-operator-in-openshift-4-web-console_{context}[].
   13  endif::[]
   ..
   33  The screen displays the state of the resources assigned to the {prod-short} deployment.
   34  +
   35: image::installation/eclipse-che-resources-tab.png[link="{imagesdir}/installation/eclipse-che-resources-tab.png"]
   36  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\proc_viewing-the-state-of-the-che-cluster-deployment-using-openshift-4-cli-tools.adoc:
   15  . Run the following commands to select the `{project-context}` project:
   16  +
   17: [subs="+quotes"]
   18  ----
   19  $ oc project _<project_name>_
   ..
   46  Example output of the command:
   47  +
   48: [options="nowrap",role="white-space-pre",subs="+quotes,+attributes"]
   49  ----
   50  include::examples/{project-context}-cluster-deployment-openshift-logs.adoc[]

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-7-known-issues.adoc:
    1: [id="{prod-id-short}-known-issues"]
    2  = {prod-short} {prod-ver} known issues
    3  

C:\Users\yanar_000\Documents\che-docs\src\main\pages\che-7\overview\ref_che-deployment-options-using-chectl.adoc:
    2  = {prod-short} deployment options using {prod-cli}
    3  
    4: [options="nowrap",subs="+attributes"]
    5  ----
    6  {prod-cli} server:start --help

387 matches across 139 files
